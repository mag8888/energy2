#!/usr/bin/env node

const io = require('socket.io-client');

console.log('üéÆ [SIMPLE-TEST] Testing game launch with 2 players...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
function createPlayer(playerName, playerId) {
  return {
    id: playerId,
    username: playerName,
    email: `${playerName}@test.com`,
    displayId: playerId.toUpperCase()
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
function connectPlayer(playerName, playerId) {
  return new Promise((resolve) => {
    const socket = io('http://localhost:5000', {
      transports: ['websocket'],
      timeout: 10000
    });

    const playerData = createPlayer(playerName, playerId);
    let roomId = null;

    socket.on('connect', () => {
      console.log(`‚úÖ [${playerName}] Connected to server`);
      resolve({ socket, playerData });
    });

    socket.on('error', (error) => {
      console.log(`‚ùå [${playerName}] Socket error:`, error);
    });

    socket.on('disconnect', () => {
      console.log(`üîå [${playerName}] Disconnected from server`);
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testTwoPlayerGameLaunch() {
  console.log('üîå [SIMPLE-TEST] Connecting two players...');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤
  const [player1, player2] = await Promise.all([
    connectPlayer('Player1', 'p1'),
    connectPlayer('Player2', 'p2')
  ]);

  console.log('‚úÖ [SIMPLE-TEST] Both players connected');

  return new Promise((resolve) => {
    let testResults = {
      roomCreated: false,
      player1Joined: false,
      player2Joined: false,
      player1Ready: false,
      player2Ready: false,
      gameStarted: false,
      errors: []
    };

    let roomId = null;
    let playersInRoom = 0;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–µ—Ä–≤—ã–º –∏–≥—Ä–æ–∫–æ–º
    const roomName = `SimpleTest_${Date.now()}`;
    console.log(`üè† [SIMPLE-TEST] Creating room: ${roomName}`);
    
    player1.socket.emit('createRoom', roomName, 2, null, 1, 'Simple Test Room');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    player1.socket.once('roomCreated', (roomData) => {
      console.log(`‚úÖ [SIMPLE-TEST] Room created: ${roomData.roomId}`);
      roomId = roomData.roomId;
      testResults.roomCreated = true;

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      console.log(`üéØ [SIMPLE-TEST] Player1 joining room: ${roomId}`);
      player1.socket.emit('joinRoom', roomId, player1.playerData);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    player1.socket.on('playersUpdate', (players) => {
      console.log(`üë• [Player1] Players update: ${players.length} players`);
      playersInRoom = players.length;
      
      if (players.some(p => p.username === 'Player1')) {
        testResults.player1Joined = true;
        console.log(`‚úÖ [SIMPLE-TEST] Player1 joined successfully`);
        
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ
        if (!testResults.player2Joined && roomId) {
          console.log(`üéØ [SIMPLE-TEST] Player2 joining room: ${roomId}`);
          player2.socket.emit('joinRoom', roomId, player2.playerData);
        }
      }
      
      if (players.some(p => p.username === 'Player2')) {
        testResults.player2Joined = true;
        console.log(`‚úÖ [SIMPLE-TEST] Player2 joined successfully`);
      }
      
      // –ï—Å–ª–∏ –æ–±–∞ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ, –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –≥–æ—Ç–æ–≤—ã–º–∏
      if (testResults.player1Joined && testResults.player2Joined && playersInRoom >= 2) {
        if (!testResults.player1Ready) {
          console.log(`üéØ [SIMPLE-TEST] Marking Player1 as ready`);
          player1.socket.emit('setReady', roomId, true);
          testResults.player1Ready = true;
        }
        
        setTimeout(() => {
          if (!testResults.player2Ready) {
            console.log(`üéØ [SIMPLE-TEST] Marking Player2 as ready`);
            player2.socket.emit('setReady', roomId, true);
            testResults.player2Ready = true;
          }
        }, 1000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    player2.socket.on('playersUpdate', (players) => {
      console.log(`üë• [Player2] Players update: ${players.length} players`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    const checkGameStart = () => {
      if (testResults.player1Ready && testResults.player2Ready && !testResults.gameStarted) {
        console.log(`üöÄ [SIMPLE-TEST] Both players ready, attempting to start game...`);
        player1.socket.emit('startGame', roomId, (success, error) => {
          if (success) {
            console.log(`‚úÖ [SIMPLE-TEST] Game start acknowledged by server`);
            testResults.gameStarted = true;
          } else {
            console.log(`‚ùå [SIMPLE-TEST] Game start failed:`, error);
            testResults.errors.push(`Game start failed: ${error}`);
          }
          
          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
          setTimeout(() => {
            player1.socket.disconnect();
            player2.socket.disconnect();
            resolve(testResults);
          }, 2000);
        });
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–≥—Ä—ã
    [player1.socket, player2.socket].forEach((socket, index) => {
      const playerName = index === 0 ? 'Player1' : 'Player2';
      
      socket.on('roomUpdated', (roomData) => {
        console.log(`üè† [${playerName}] Room updated: ${roomData.status}`);
        if (roomData.status === 'started') {
          testResults.gameStarted = true;
        }
      });

      socket.on('gameStarted', (gameData) => {
        console.log(`üéÆ [${playerName}] Game started event received`);
        testResults.gameStarted = true;
      });

      socket.on('canStartGame', (canStart) => {
        console.log(`üéØ [${playerName}] Can start game: ${canStart}`);
        if (canStart) {
          setTimeout(checkGameStart, 500);
        }
      });
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    setTimeout(() => {
      console.log('‚è∞ [SIMPLE-TEST] Test timeout reached');
      player1.socket.disconnect();
      player2.socket.disconnect();
      resolve(testResults);
    }, 30000);
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéÆ [SIMPLE-TEST] ==========================================');
  console.log('üéÆ [SIMPLE-TEST] SIMPLE TWO-PLAYER GAME LAUNCH TEST');
  console.log('üéÆ [SIMPLE-TEST] ==========================================\n');
  
  try {
    const results = await testTwoPlayerGameLaunch();
    
    console.log('\nüìä [SIMPLE-TEST] Test Results:');
    console.log(`   - Room Created: ${results.roomCreated ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Player1 Joined: ${results.player1Joined ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Player2 Joined: ${results.player2Joined ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Player1 Ready: ${results.player1Ready ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Player2 Ready: ${results.player2Ready ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Game Started: ${results.gameStarted ? '‚úÖ OK' : '‚ùå FAILED'}`);
    
    if (results.errors.length > 0) {
      console.log('\n‚ùå [SIMPLE-TEST] Errors:');
      results.errors.forEach(error => console.log(`   - ${error}`));
    }
    
    if (results.gameStarted) {
      console.log('\nüéâ [SIMPLE-TEST] ==========================================');
      console.log('üéâ [SIMPLE-TEST] GAME LAUNCH TEST PASSED!');
      console.log('üéâ [SIMPLE-TEST] ==========================================');
      console.log('‚úÖ [SIMPLE-TEST] Game can be started with 2 players!');
      console.log('‚úÖ [SIMPLE-TEST] All systems are operational!');
    } else {
      console.log('\n‚ùå [SIMPLE-TEST] ==========================================');
      console.log('‚ùå [SIMPLE-TEST] GAME LAUNCH TEST FAILED!');
      console.log('‚ùå [SIMPLE-TEST] ==========================================');
      console.log('‚ö†Ô∏è  [SIMPLE-TEST] Check the errors above');
    }
    
  } catch (error) {
    console.log(`üí• [SIMPLE-TEST] ERROR: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().catch(console.error);
