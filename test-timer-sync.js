#!/usr/bin/env node

/**
 * üß™ –ê–í–¢–û–¢–ï–°–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π turnTimerUpdate
 * 2. –û–±—Ä–∞–±–æ—Ç–∫—É turnChanged
 * 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ roomData
 * 4. –ü—Ä–∞–≤–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞');
console.log('=' .repeat(50));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useSocketEvents.js
function checkTimerSyncFixes() {
  const filePath = 'client/src/hooks/useSocketEvents.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useSocketEvents.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–£–ª—É—á—à–µ–Ω—ã –ª–æ–≥–∏ –≤ handleTurnTimerUpdate',
      pattern: /‚è∞ \[turnTimerUpdate\] received:/,
      found: false
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω roomId –≤ handleTurnTimerUpdate',
      pattern: /‚è∞ \[turnTimerUpdate\] roomId:/,
      found: false
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω socket.id –≤ handleTurnTimerUpdate',
      pattern: /‚è∞ \[turnTimerUpdate\] socket\.id:/,
      found: false
    },
    {
      name: '–£–ª—É—á—à–µ–Ω—ã –ª–æ–≥–∏ –≤ handleTurnChanged',
      pattern: /üîÑ \[turnChanged\] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:/,
      found: false
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω roomId –≤ handleTurnChanged',
      pattern: /roomId/,
      found: false
    },
    {
      name: '–£–ª—É—á—à–µ–Ω—ã –ª–æ–≥–∏ –≤ handleRoomData',
      pattern: /üè† \[roomData\] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:/,
      found: false
    },
    {
      name: '–î–æ–±–∞–≤–ª–µ–Ω roomId –≤ handleRoomData',
      pattern: /roomId/,
      found: false
    }
  ];

  checks.forEach(check => {
    check.found = check.pattern.test(content);
    console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ GameControls.js
function checkGameControlsTimer() {
  const filePath = 'client/src/components/GameControls.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª GameControls.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–ö–Ω–æ–ø–∫–∞ "–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö" –¥–ª—è diceValue = 0',
      pattern: /if \(diceValue === 0\) return '–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö'/,
      found: false
    },
    {
      name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫—É–±–∏–∫–∞',
      pattern: /if \(diceValue === 0 && onRollDice\)/,
      found: false
    },
    {
      name: '–ü–µ—Ä–µ–¥–∞—á–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–ø—Å–æ–≤ –≤ NextPlayerButton',
      pattern: /diceValue={diceValue}.*onRollDice={onRollDice}.*isRolling={isRolling}/s,
      found: false
    },
    {
      name: '–õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è',
      pattern: /const getButtonText = \(\) => \{[^}]*if \(!isMyTurn\) return '–û–ñ–ò–î–ê–ù–ò–ï'[^}]*if \(diceValue === 0\) return '–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö'/s,
      found: false
    }
  ];

  checks.forEach(check => {
    check.found = check.pattern.test(content);
    console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useGameLogic.js
function checkGameLogicTimer() {
  const filePath = 'client/src/hooks/useGameLogic.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useGameLogic.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–£–±—Ä–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ isMyTurn = true',
      pattern: /–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMyTurn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/,
      found: false,
      shouldBeFalse: true
    },
    {
      name: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ–¥–∞',
      pattern: /const isMyTurn = gameState\.currentTurn === gameState\.myId/,
      found: false
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ myId –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π isMyTurn',
      pattern: /if \(gameState\.myId && gameState\.currentTurn\)/,
      found: false
    }
  ];

  checks.forEach(check => {
    if (check.shouldBeFalse) {
      check.found = !check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    } else {
      check.found = check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    }
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
function checkServer() {
  try {
    const result = execSync('ps aux | grep "node index.js" | grep -v grep', { encoding: 'utf8' });
    if (result.trim()) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return false;
  }
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTests() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useSocketEvents.js:');
  const socketEventsFixed = checkTimerSyncFixes();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ GameControls.js:');
  const gameControlsFixed = checkGameControlsTimer();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useGameLogic.js:');
  const gameLogicFixed = checkGameLogicTimer();

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' .repeat(40));
  console.log(`useSocketEvents.js: ${socketEventsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`GameControls.js: ${gameControlsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`useGameLogic.js: ${gameLogicFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);

  if (socketEventsFixed && gameControlsFixed && gameLogicFixed) {
    console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ê–ô–ú–ï–†–ê –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüß™ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)');
    console.log('3. –í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –ª–æ–≥–∏:');
    console.log('   - ‚è∞ [turnTimerUpdate] received: ...');
    console.log('   - üîÑ [turnChanged] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ...');
    console.log('   - üè† [roomData] –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ...');
    console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:');
    console.log('   - –ò–¥–µ—Ç –ª–∏ —Ç–∞–π–º–µ—Ä –≤–Ω–∏–∑ –æ—Ç 2:00');
    console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö" –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
    console.log('   - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏');
  } else {
    console.log('\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  const serverRunning = checkServer();
  
  if (!serverRunning) {
    console.log('\n‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd server && node index.js');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();

