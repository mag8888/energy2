import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  Grid,
  Chip,
  LinearProgress,
  Alert
} from '@mui/material';
import { motion } from 'framer-motion';

const OrderDetermination = ({ 
  roomId, 
  players, 
  timer, 
  phase, 
  onRollDice, 
  onTieBreakRoll,
  socket 
}) => {
  const [localTimer, setLocalTimer] = useState(timer);
  const [myRoll, setMyRoll] = useState(null);
  const [myTieBreakRoll, setMyTieBreakRoll] = useState(null);
  const [isMyTurn, setIsMyTurn] = useState(false);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
  useEffect(() => {
    setLocalTimer(timer);
  }, [timer]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–π –ª–∏ —Å–µ–π—á–∞—Å —Ö–æ–¥
  useEffect(() => {
    if (phase === 'tie_break') {
      // –í —Ñ–∞–∑–µ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É—é –ª–∏ —è
      const tieBreakPlayer = players.find(p => p.id === socket.id);
      setIsMyTurn(tieBreakPlayer && !tieBreakPlayer.tieBreakRoll);
    } else {
      // –í –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–∑–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—Ä–æ—Å–∞–ª –ª–∏ —è –∫—É–±–∏–∫
      const me = players.find(p => p.id === socket.id);
      setIsMyTurn(me && !me.diceRoll);
    }
  }, [players, phase, socket.id]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const handleRollDice = () => {
    if (phase === 'tie_break') {
      onTieBreakRoll(roomId, socket.id);
      setMyTieBreakRoll('rolling');
    } else {
      onRollDice(roomId, socket.id);
      setMyRoll('rolling');
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –º–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const myPlayer = players.find(p => p.id === socket.id);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–Ω–æ–ø–∫–µ
  const getButtonText = () => {
    if (phase === 'tie_break') {
      if (myTieBreakRoll === 'rolling') return 'üé≤ –ë—Ä–æ—Å–∞—é...';
      if (myTieBreakRoll !== null) return '‚úÖ –ë—Ä–æ—Å–∏–ª';
      return 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ (–ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞)';
    } else {
      if (myRoll === 'rolling') return 'üé≤ –ë—Ä–æ—Å–∞—é...';
      if (myRoll !== null) return '‚úÖ –ë—Ä–æ—Å–∏–ª';
      return 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫';
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
  const isButtonDisabled = () => {
    if (phase === 'tie_break') {
      return myTieBreakRoll !== null;
    } else {
      return myRoll !== null;
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ç–∞–π–º–µ—Ä–∞
  const getTimerColor = () => {
    if (localTimer > 30) return 'success';
    if (localTimer > 15) return 'warning';
    return 'error';
  };

  return (
    <Box sx={{ p: 3, maxWidth: '800px', margin: '0 auto' }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Typography variant="h4" gutterBottom align="center" color="primary">
          üé≤ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
        </Typography>

        {phase === 'tie_break' && (
          <Alert severity="info" sx={{ mb: 3 }}>
            üéØ –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ù—É–∂–Ω–∞ –ø–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞.
          </Alert>
        )}

        {/* –¢–∞–π–º–µ—Ä */}
        <Box sx={{ mb: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="h6">
              ‚è∞ –í—Ä–µ–º—è: {formatTime(localTimer)}
            </Typography>
            <Chip 
              label={phase === 'tie_break' ? '–ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞' : '–û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–æ—Å–æ–∫'} 
              color={phase === 'tie_break' ? 'warning' : 'primary'}
            />
          </Box>
          <LinearProgress 
            variant="determinate" 
            value={(localTimer / (phase === 'tie_break' ? 30 : 60)) * 100}
            color={getTimerColor()}
            sx={{ height: 8, borderRadius: 4 }}
          />
        </Box>

        {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ */}
        <Box sx={{ textAlign: 'center', mb: 4 }}>
          <Button
            variant="contained"
            size="large"
            onClick={handleRollDice}
            disabled={isButtonDisabled() || !isMyTurn}
            sx={{ 
              fontSize: '1.2rem', 
              py: 2, 
              px: 4,
              minWidth: '200px'
            }}
          >
            {getButtonText()}
          </Button>
          
          {!isMyTurn && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              {phase === 'tie_break' 
                ? '–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...' 
                : '–û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...'
              }
            </Typography>
          )}
        </Box>

        {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
        <Grid container spacing={2}>
          {players.map((player) => (
            <Grid item xs={12} sm={6} key={player.id}>
              <motion.div
                whileHover={{ scale: 1.02 }}
                transition={{ duration: 0.2 }}
              >
                <Card 
                  sx={{ 
                    border: player.id === socket.id ? '2px solid #1976d2' : '1px solid #e0e0e0',
                    '&:hover': { boxShadow: 3 }
                  }}
                >
                  <CardContent>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                      <Typography variant="h6">
                        {player.username}
                      </Typography>
                      {player.id === socket.id && (
                        <Chip label="–í—ã" color="primary" size="small" />
                      )}
                    </Box>

                    {/* –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–æ—Å–æ–∫ */}
                    <Box sx={{ mb: 2 }}>
                      <Typography variant="body2" color="text.secondary">
                        –û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–æ—Å–æ–∫:
                      </Typography>
                      {player.diceRoll !== null ? (
                        <Typography variant="h5" color="success.main" fontWeight="bold">
                          üé≤ {player.diceRoll}
                        </Typography>
                      ) : (
                        <Typography variant="body2" color="text.secondary">
                          –û–∂–∏–¥–∞–µ—Ç...
                        </Typography>
                      )}
                    </Box>

                    {/* –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞ */}
                    {phase === 'tie_break' && (
                      <Box>
                        <Typography variant="body2" color="text.secondary">
                          –ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞:
                        </Typography>
                        {player.tieBreakRoll !== null ? (
                          <Typography variant="h5" color="warning.main" fontWeight="bold">
                            üé≤ {player.tieBreakRoll}
                          </Typography>
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            –û–∂–∏–¥–∞–µ—Ç...
                          </Typography>
                        )}
                      </Box>
                    )}

                    {/* –°—Ç–∞—Ç—É—Å */}
                    <Box sx={{ mt: 2 }}>
                      {player.diceRoll !== null && (
                        <Chip 
                          label="–ë—Ä–æ—Å–∏–ª" 
                          color="success" 
                          size="small" 
                          sx={{ mr: 1 }}
                        />
                      )}
                      {phase === 'tie_break' && player.tieBreakRoll !== null && (
                        <Chip 
                          label="–ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞" 
                          color="warning" 
                          size="small" 
                        />
                      )}
                    </Box>
                  </CardContent>
                </Card>
              </motion.div>
            </Grid>
          ))}
        </Grid>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <Box sx={{ mt: 4, p: 2, bgcolor: 'grey.50', borderRadius: 2 }}>
          <Typography variant="h6" gutterBottom>
            üìã –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
          </Typography>
          <Typography variant="body2" paragraph>
            1. <strong>–û—Å–Ω–æ–≤–Ω–æ–π –±—Ä–æ—Å–æ–∫:</strong> –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫ –æ–¥–∏–Ω —Ä–∞–∑
          </Typography>
          <Typography variant="body2" paragraph>
            2. <strong>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</strong> –ò–≥—Ä–æ–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–≤—ã—Å—à–∏–π –ø–µ—Ä–≤—ã–π)
          </Typography>
          <Typography variant="body2" paragraph>
            3. <strong>–ü–µ—Ä–µ–∏–≥—Ä–æ–≤–∫–∞:</strong> –ü—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä–æ–∫–∏ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞—é—Ç –∫—É–±–∏–∫
          </Typography>
          <Typography variant="body2" paragraph>
            4. <strong>–§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:</strong> –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ
          </Typography>
          <Typography variant="body2" color="warning.main">
            ‚ö†Ô∏è –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –±—Ä–æ—Å–∏—Ç –∫—É–±–∏–∫ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∫—É–±–∏–∫ –±—Ä–æ—Å–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          </Typography>
        </Box>
      </motion.div>
    </Box>
  );
};

export default OrderDetermination;
