import React, { useState, useEffect } from 'react';
import { Box, Button } from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';
import CasinoIcon from '@mui/icons-material/Casino';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—É–±–∏–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–±–µ–∑ GIF, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã)
const AnimatedDice = ({ isRolling, result, size = 80 }) => {
  const diceVariants = {
    idle: { 
      scale: 1,
      transition: { duration: 0.3 }
    },
    rolling: { 
      scale: [1, 1.05, 1],
      transition: { 
        duration: 0.6,
        repeat: Infinity,
        ease: "easeInOut"
      }
    },
    result: { 
      scale: 1,
      transition: { duration: 0.5, type: "spring", stiffness: 200 }
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É TIFF
  const [supportsTiff, setSupportsTiff] = useState(true);
  useEffect(() => {
    const img = new Image();
    img.onload = () => setSupportsTiff(true);
    img.onerror = () => setSupportsTiff(false);
    img.src = '/images/K1-61.tiff';
  }, []);

  // –ü—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  const getDiceImage = (number, isAnimated = false) => {
    if (supportsTiff && !isAnimated) return `/images/K${number}-61.tiff`;
    return `/images/K${number}.gif`;
  };

  // –ö–∞–¥—Ä–æ–≤–∞—è "–∞–Ω–∏–º–∞—Ü–∏—è" —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –≥—Ä–∞–Ω–µ–π TIFF (–±–µ–∑ GIF)
  const [currentFace, setCurrentFace] = useState(result || 1);

  useEffect(() => {
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω –∏ –Ω–µ –∫—Ä—É—Ç–∏—Ç—Å—è ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!isRolling && result) {
      setCurrentFace(result);
      return;
    }

    if (isRolling) {
      let face = currentFace || 1;
      const interval = setInterval(() => {
        face = face % 6 + 1;
        setCurrentFace(face);
      }, 120);
      return () => clearInterval(interval);
    }
  }, [isRolling, result]);

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–π (SVG) –∫—É–±–∏–∫ –∫–∞–∫ —Å—Ç–∞—Ç–∏—á–Ω–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ TIFF
  const renderStaticSvg = (face) => (
    <svg width={size} height={size} viewBox="0 0 100 100" style={{ borderRadius: 8, boxShadow: '0 4px 8px rgba(0,0,0,0.3)', background: '#fff' }}>
      <rect x="5" y="5" width="90" height="90" rx="12" ry="12" fill="#ffffff" stroke="#e0e0e0" strokeWidth="3" />
      {
        // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–ª—è –≥—Ä–∞–Ω–µ–π 1-6
        (() => {
          const dot = (cx, cy) => <circle key={`${cx}-${cy}`} cx={cx} cy={cy} r="6" fill="#333" />;
          const positions = {
            1: [[50,50]],
            2: [[30,30],[70,70]],
            3: [[30,30],[50,50],[70,70]],
            4: [[30,30],[70,30],[30,70],[70,70]],
            5: [[30,30],[70,30],[50,50],[30,70],[70,70]],
            6: [[30,28],[70,28],[30,50],[70,50],[30,72],[70,72]]
          };
          return (positions[face] || []).map(([x,y]) => dot(x,y));
        })()
      }
    </svg>
  );

  return (
    <motion.div
      variants={diceVariants}
      animate={isRolling ? "rolling" : result ? "result" : "idle"}
      style={{ cursor: isRolling ? "wait" : "default" }}
    >
      {(!supportsTiff && result && !isRolling)
        ? renderStaticSvg(result)
        : (
          <img
            src={getDiceImage(currentFace, isRolling)}
            alt={`–ö—É–±–∏–∫ ${currentFace}`}
            width={size}
            height={size}
            style={{
              borderRadius: '8px',
              boxShadow: isRolling ? '0 0 20px rgba(74, 144, 226, 0.6)' : '0 4px 8px rgba(0,0,0,0.3)',
              transition: 'box-shadow 0.3s ease'
            }}
            onError={(e) => {
              const src = e.currentTarget.getAttribute('src') || '';
              // –ï—Å–ª–∏ tiff –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ gif
              if (src.endsWith('-61.tiff')) {
                e.currentTarget.src = `/images/K${currentFace}.gif`;
              }
            }}
          />
        )}
    </motion.div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç DiceRoller
const DiceRoller = ({ 
  onRoll, 
  disabled = false, 
  buttonText = "üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫",
  size = 80,
  showResult = true,
  autoRoll = false // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–æ—Å–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
}) => {
  const [isRolling, setIsRolling] = useState(false);
  const [result, setResult] = useState(null);
  const [hasRolled, setHasRolled] = useState(false);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—Ä–æ—Å–æ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (autoRoll && !hasRolled) {
      handleRoll();
    }
  }, [autoRoll, hasRolled]);

  const handleRoll = async () => {
    if (isRolling || disabled) return;

    setIsRolling(true);
    setResult(null);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    await new Promise(resolve => setTimeout(resolve, 500));

    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if (onRoll && typeof onRoll === 'function') {
      const diceResult = await onRoll();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setResult(diceResult);
      setHasRolled(true);
      // –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ –≤—ã–ø–∞–≤—à–µ–π –≥—Ä–∞–Ω–∏
      setIsRolling(false);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç callback, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const randomResult = Math.floor(Math.random() * 6) + 1;
      setResult(randomResult);
      setHasRolled(true);
      // –ú–ì–ù–û–í–ï–ù–ù–û –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      setIsRolling(false);
    }
  };

  const resetDice = () => {
    setResult(null);
    setHasRolled(false);
    setIsRolling(false);
  };

  return (
    <Box sx={{ 
      display: 'flex', 
      flexDirection: 'column', 
      alignItems: 'center', 
      gap: 2 
    }}>
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É–±–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ */}
      <AnimatePresence mode="wait">
        <AnimatedDice 
          key={`dice-${isRolling}-${result}`}
          isRolling={isRolling} 
          result={result} 
          size={size} 
        />
      </AnimatePresence>

      {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ */}
      {!hasRolled && (
        <Button
          variant="contained"
          size="large"
          onClick={handleRoll}
          disabled={disabled || isRolling}
          startIcon={<CasinoIcon />}
          sx={{ 
            fontSize: '1.1rem', 
            py: 1.5, 
            px: 3,
            minWidth: '180px',
            background: 'linear-gradient(45deg, #4A90E2, #357ABD)',
            '&:hover': {
              background: 'linear-gradient(45deg, #357ABD, #2E5BBA)',
            }
          }}
        >
          {isRolling ? 'üé≤ –ë—Ä–æ—Å–∞—é...' : buttonText}
        </Button>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      {showResult && result && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5, type: "spring" }}
        >
          <Box sx={{ 
            textAlign: 'center',
            p: 2,
            borderRadius: 2,
            background: 'rgba(74, 144, 226, 0.1)',
            border: '2px solid #4A90E2'
          }}>
            <Box sx={{ 
              fontSize: '2rem', 
              fontWeight: 'bold', 
              color: '#4A90E2',
              mb: 1
            }}>
              üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}
            </Box>
            <Button
              variant="outlined"
              size="small"
              onClick={resetDice}
              sx={{ 
                borderColor: '#4A90E2',
                color: '#4A90E2',
                '&:hover': {
                  borderColor: '#357ABD',
                  backgroundColor: 'rgba(74, 144, 226, 0.1)'
                }
              }}
            >
              –ë—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </Box>
        </motion.div>
      )}
    </Box>
  );
};

export default DiceRoller;
