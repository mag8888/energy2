import React, { useState, useEffect, useMemo } from 'react';
import { useGameNavigation } from '../hooks/useGameState';
import socket from '../socket';

const SimpleRoomSetup = ({ roomId, playerData }) => {
  const [players, setPlayers] = useState([]);
  const [roomData, setRoomData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState({ text: '', type: '' });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  const { handleGameStarted } = useGameNavigation(socket, roomId, (gameData) => {
    console.log('üéÆ [SimpleRoomSetup] Game started callback:', gameData);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
    setRoomData(prev => ({ ...prev, status: 'started' }));
  });

  useEffect(() => {
    if (!roomId) return;

    setLoading(true);
    console.log('üîç [SimpleRoomSetup] Component mounted with roomId:', roomId);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersUpdate', (updatedPlayers) => {
      console.log('üë• [SimpleRoomSetup] Players updated:', updatedPlayers);
      setPlayers(updatedPlayers);
      setLoading(false);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomUpdated', (updatedRoom) => {
      console.log('üè† [SimpleRoomSetup] Room updated:', updatedRoom);
      setRoomData(updatedRoom);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    socket.on('canStartGame', (gameData) => {
      console.log('üéÆ [SimpleRoomSetup] Can start game:', gameData);
      setMessage({ text: 'üéâ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤! –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É!', type: 'success' });
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    socket.on('gameStarted', (gameData) => {
      console.log('üéÆ [SimpleRoomSetup] Game started event received:', gameData);
      console.log('üéÆ [SimpleRoomSetup] Current roomId:', roomId);
      
      setMessage({ text: 'üéâ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–µ...', type: 'success' });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
      setRoomData(prev => ({ ...prev, status: 'started' }));
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ö—É–∫ useGameState
      console.log('üöÄ [SimpleRoomSetup] Navigation will be handled by useGameState hook');
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomData', (roomData) => {
      console.log('üè† [SimpleRoomSetup] Room data updated:', roomData);
      setRoomData(roomData);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersList', (playersList) => {
      console.log('üë• [SimpleRoomSetup] Players list updated:', playersList);
      setPlayers(playersList);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
    socket.on('turnChanged', (currentTurn) => {
      console.log('üéØ [SimpleRoomSetup] Turn changed to:', currentTurn);
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    socket.on('timerUpdate', (remainingTime) => {
      console.log('‚è∞ [SimpleRoomSetup] Timer update:', remainingTime);
    });

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('joinRoom', roomId, {
      id: playerData.id,
      username: playerData.username,
      email: playerData.email,
      displayId: playerData.displayId
    });

    return () => {
      socket.off('playersUpdate');
      socket.off('roomUpdated');
      socket.off('canStartGame');
      socket.off('gameStarted');
      socket.off('roomData');
      socket.off('playersList');
      socket.off('turnChanged');
      socket.off('timerUpdate');
    };
  }, [roomId, playerData]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const myReady = useMemo(() => {
    const currentPlayer = players.find(p => p.socketId === socket.id);
    return currentPlayer ? currentPlayer.ready : false;
  }, [players, socket.id]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω)
  const readyPlayers = useMemo(() => {
    const onlinePlayers = players.filter(p => !p.offline);
    return onlinePlayers.filter(p => p.ready);
  }, [players]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—É
  const canStart = useMemo(() => {
    const onlinePlayers = players.filter(p => !p.offline);
    const readyOnlinePlayers = onlinePlayers.filter(p => p.ready);
    
    console.log('üîç [SimpleRoomSetup] Game start conditions:');
    console.log('   - Total players:', players.length);
    console.log('   - Online players:', onlinePlayers.length);
    console.log('   - Ready players:', readyPlayers.length);
    console.log('   - Ready online players:', readyOnlinePlayers.length);
    
    // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞, –∏–∑ –Ω–∏—Ö –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ç–æ–≤—ã—Ö –∏ –æ–Ω–ª–∞–π–Ω
    return readyOnlinePlayers.length >= 2 && onlinePlayers.length >= 2;
  }, [readyPlayers.length, players]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const [starting, setStarting] = useState(false);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const toggleReady = () => {
    const newReadyState = !myReady;
    console.log(`üéØ [SimpleRoomSetup] Toggling ready state to: ${newReadyState}`);
    
    socket.emit('setReady', roomId, newReadyState);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    setMessage({ 
      text: newReadyState ? '‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ—á–µ–Ω–∞!' : '‚ùå –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞!', 
      type: newReadyState ? 'success' : 'info' 
    });
  };

  // –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
  const exitGame = () => {
    console.log('üö™ [SimpleRoomSetup] Exiting game...');
    
    // –ü–æ–∫–∏–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    socket.emit('leaveRoom', roomId);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    window.history.back();
  };

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const startGame = () => {
    if (!canStart || starting) return;
    
    console.log('üöÄ [SimpleRoomSetup] Starting game...');
    console.log('üîç [SimpleRoomSetup] Debug info for game start:');
    console.log('   - roomId:', roomId);
    console.log('   - canStart:', canStart);
    console.log('   - starting:', starting);
    console.log('   - players:', players);
    console.log('   - readyPlayers:', readyPlayers);
    console.log('   - socket.id:', socket.id);
    
    setStarting(true);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
    console.log('üì° [SimpleRoomSetup] Emitting startGame event...');
    console.log('üì° [SimpleRoomSetup] Socket connected:', socket.connected);
    console.log('üì° [SimpleRoomSetup] Socket ID:', socket.id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å callback
    socket.emit('startGame', roomId, (success, error) => {
      if (success) {
        console.log('‚úÖ [SimpleRoomSetup] startGame acknowledged by server');
        setMessage({ 
          text: '‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã!', 
          type: 'success' 
        });
      } else {
        console.error('‚ùå [SimpleRoomSetup] startGame failed:', error);
        setMessage({ 
          text: '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: ' + (error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 
          type: 'error' 
        });
        setStarting(false);
      }
    });
    
    setMessage({ 
      text: 'üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...', 
      type: 'info' 
    });
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç [SimpleRoomSetup] Debug info:', {
    roomId,
    players,
    playerData,
    socketId: socket.id,
    loading,
    myReady
  });

  // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (message.text) {
      const timer = setTimeout(() => setMessage({ text: '', type: '' }), 5000);
      return () => clearTimeout(timer);
    }
  }, [message]);

  if (loading) {
    return (
      <div style={{ 
        maxWidth: '800px', 
        margin: '0 auto', 
        padding: '32px 20px',
        fontFamily: 'Arial, sans-serif'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div
            style={{
              width: '60px',
              height: '60px',
              border: '4px solid',
              borderColor: '#E3F2FD',
              borderTopColor: '#1976D2',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
              margin: '0 auto'
            }}
          />
          <p style={{ marginTop: '16px', color: '#666' }}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç—ã...</p>
          <style>
            {`
              @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
              }
            `}
          </style>
        </div>
      </div>
    );
  }

  return (
    <div style={{ 
      maxWidth: '1200px', 
      margin: '0 auto', 
      padding: '32px 20px',
      fontFamily: 'Arial, sans-serif'
    }}>
      <div style={{ textAlign: 'center', marginBottom: '32px' }}>
        <div style={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center',
          marginBottom: '16px',
          gap: '16px'
        }}>
          <button
            style={{
              background: 'transparent',
              border: '1px solid #E0E0E0',
              color: '#666',
              padding: '8px 16px',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '0.9rem'
            }}
            onMouseEnter={(e) => e.target.style.background = '#F5F5F5'}
            onMouseLeave={(e) => e.target.style.background = 'transparent'}
            onClick={exitGame}
          >
            ‚¨ÖÔ∏è –ù–∞–∑–∞–¥
          </button>
          <h1 style={{ 
            fontSize: '2rem', 
            color: '#1976D2',
            margin: 0
          }}>
            ÔøΩÔøΩ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
            {roomData && roomData.displayName && (
              <span style={{ fontSize: '1.2rem', color: '#666', display: 'block', marginTop: '8px' }}>
                "{roomData.displayName}"
              </span>
            )}
          </h1>
        </div>
        <p style={{ color: '#666', fontSize: '1.1rem', margin: 0 }}>
          {roomData && roomData.displayName ? `–ù–∞–∑–≤–∞–Ω–∏–µ: ${roomData.displayName} | ` : ''}
          ID: {roomId} | –ò–≥—Ä–æ–∫–æ–≤: {players.filter(p => !p.offline).length} (–æ–Ω–ª–∞–π–Ω) / {players.length} (–≤—Å–µ–≥–æ)
        </p>
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {message.text && (
        <div style={{
          background: message.type === 'success' ? '#E8F5E8' : 
                     message.type === 'warning' ? '#FFF3E0' : '#E3F2FD',
          color: message.type === 'success' ? '#2E7D32' : 
                 message.type === 'warning' ? '#E65100' : '#1976D2',
          padding: '12px',
          borderRadius: '4px',
          marginBottom: '24px',
          display: 'flex',
          alignItems: 'center'
        }}>
          <span style={{ fontSize: '1.2rem', marginRight: '8px' }}>
            {message.type === 'success' ? '‚úÖ' : message.type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}
          </span>
          {message.text}
        </div>
      )}

      {/* –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
      <div style={{ 
        background: 'white', 
        padding: '24px', 
        borderRadius: '8px', 
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        marginBottom: '32px'
      }}>
        <div style={{ marginBottom: '24px' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
            <span style={{ fontSize: '1.2rem', color: '#1976D2', marginRight: '8px' }}>‚öôÔ∏è</span>
            <h2 style={{ 
              fontSize: '1.5rem', 
              color: '#1976D2',
              margin: 0
            }}>
              –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤
            </h2>
          </div>

          <div style={{
            width: '100%',
            height: '24px',
            background: '#E0E0E0',
            borderRadius: '12px',
            overflow: 'hidden',
            marginBottom: '16px'
          }}>
            <div style={{
              width: `${(readyPlayers.length / Math.max(players.filter(p => !p.offline).length, 1)) * 100}%`,
              height: '100%',
              background: canStart ? '#4CAF50' : '#FF9800',
              borderRadius: '12px',
              transition: 'width 0.3s ease'
            }} />
          </div>

          <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center'
          }}>
            <p style={{ color: '#666', margin: 0 }}>
              –ì–æ—Ç–æ–≤–æ: {readyPlayers.length} –∏–∑ {players.filter(p => !p.offline).length} (–æ–Ω–ª–∞–π–Ω)
            </p>
            <span style={{
              background: canStart ? '#E8F5E8' : '#FFF3E0',
              color: canStart ? '#2E7D32' : '#E65100',
              padding: '8px 16px',
              borderRadius: '20px',
              fontSize: '1rem',
              fontWeight: 'bold'
            }}>
              {canStart ? 'üéâ –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å!' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...'}
            </span>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
      <div style={{ 
        background: 'white', 
        padding: '24px', 
        borderRadius: '8px', 
        boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        marginBottom: '32px'
      }}>
        <div style={{ marginBottom: '24px' }}>
          <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
            <span style={{ color: '#4CAF50', fontSize: '1.2rem', marginRight: '8px' }}>üë•</span>
            <h2 style={{ 
              fontSize: '1.5rem', 
              color: '#4CAF50',
              margin: 0
            }}>
              –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
            </h2>
          </div>

          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fill, minmax(280px, 1fr))', 
            gap: '16px'
          }}>
            {players.filter(p => !p.offline).map((player) => (
              <div
                key={player.id}
                style={{
                  background: 'white',
                  border: '2px solid',
                  borderColor: player.ready ? '#C8E6C9' : '#E0E0E0',
                  borderRadius: '8px',
                  padding: '16px',
                  background: player.ready ? '#F1F8E9' : 'white'
                }}
              >
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'center',
                  marginBottom: '16px'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                    <div
                      style={{
                        width: '48px',
                        height: '48px',
                        borderRadius: '50%',
                        background: player.ready ? '#4CAF50' : '#9E9E9E',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        color: 'white',
                        fontSize: '1.2rem',
                        fontWeight: 'bold'
                      }}
                    >
                      {player.username ? player.username.charAt(0).toUpperCase() : '?'}
                    </div>
                    <div>
                      <p style={{ 
                        fontWeight: 'bold', 
                        fontSize: '1.1rem',
                        margin: '0 0 4px 0'
                      }}>
                        {player.username}
                      </p>
                      <p style={{ 
                        fontSize: '0.9rem', 
                        color: '#666',
                        margin: 0
                      }}>
                        ID: {player.displayId || player.id}
                      </p>
                    </div>
                  </div>
                  
                  <span style={{
                    background: player.ready ? '#4CAF50' : '#9E9E9E',
                    color: 'white',
                    padding: '8px 12px',
                    borderRadius: '20px',
                    fontSize: '0.9rem',
                    fontWeight: 'bold'
                  }}>
                    {player.ready ? (
                      <span style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                        <span style={{ fontSize: '1rem' }}>‚úÖ</span>
                        –ì–æ—Ç–æ–≤
                      </span>
                    ) : (
                      <span style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>
                        <span style={{ fontSize: '1rem' }}>‚ùå</span>
                        –ù–µ –≥–æ—Ç–æ–≤
                      </span>
                    )}
                  </span>
                </div>

                {/* –≠—Ç–æ –≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
                {player.socketId === socket.id && (
                  <div style={{ marginTop: '16px' }}>
                    <button
                      style={{
                        width: '100%',
                        background: myReady ? '#f44336' : '#4CAF50',
                        color: 'white',
                        border: 'none',
                        padding: '12px',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '1rem',
                        fontWeight: 'bold'
                      }}
                      onClick={toggleReady}
                    >
                      {myReady ? '–û—Ç–º–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å' : '–ì–æ—Ç–æ–≤'}
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ */}
      {canStart && (
        <div style={{ 
          background: 'white', 
          padding: '24px', 
          borderRadius: '8px', 
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
          marginBottom: '32px'
        }}>
          <div style={{ textAlign: 'center' }}>
            <h2 style={{ 
              fontSize: '1.5rem', 
              color: '#4CAF50',
              margin: '0 0 16px 0'
            }}>
              üöÄ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å—Ç–∞—Ä—Ç—É!
            </h2>
            
            <p style={{ 
              textAlign: 'center', 
              color: '#666',
              margin: '0 0 24px 0'
            }}>
              {readyPlayers.length} –∏–∑ {players.filter(p => !p.offline).length} –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤ –≥–æ—Ç–æ–≤—ã
            </p>

            <button
              style={{
                width: '100%',
                maxWidth: '400px',
                background: '#4CAF50',
                color: 'white',
                border: 'none',
                padding: '20px',
                borderRadius: '8px',
                fontSize: '1.3rem',
                fontWeight: 'bold',
                cursor: starting ? 'not-allowed' : 'pointer',
                opacity: starting ? 0.7 : 1
              }}
              onClick={startGame}
              disabled={starting}
            >
              {starting ? '–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...' : 'üéÆ –°–¢–ê–†–¢ –ò–ì–†–´!'}
            </button>

            <p style={{ 
              fontSize: '0.9rem', 
              color: '#999', 
              textAlign: 'center',
              margin: '16px 0 0 0'
            }}>
              üí° –î—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
            </p>
          </div>
        </div>
      )}

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{ 
        background: '#f5f5f5', 
        padding: '16px', 
        borderRadius: '8px', 
        marginBottom: '24px',
        fontSize: '0.9rem',
        color: '#666'
      }}>
        <h3 style={{ margin: '0 0 12px 0', color: '#333' }}>üîç –û—Ç–ª–∞–¥–∫–∞:</h3>
        <p style={{ margin: '4px 0' }}>–ì–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {readyPlayers.length}</p>
        <p style={{ margin: '4px 0' }}>–û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤: {players.filter(p => !p.offline).length}</p>
        <p style={{ margin: '4px 0' }}>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {players.length}</p>
        <p style={{ margin: '4px 0' }}>–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å: {canStart ? '–î–∞' : '–ù–µ—Ç'}</p>
        <p style={{ margin: '4px 0' }}>–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞: {starting ? '–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...' : '–ì–æ—Ç–æ–≤'}</p>
        <p style={{ margin: '4px 0' }}>–°—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã: {roomData?.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ */}
      {roomData && (
        <div style={{ 
          background: 'white', 
          padding: '24px', 
          borderRadius: '8px', 
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}>
          <div style={{ marginBottom: '16px' }}>
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}>
              <span style={{ fontSize: '1.2rem', color: '#9C27B0', marginRight: '8px' }}>‚öôÔ∏è</span>
              <h2 style={{ 
                fontSize: '1.5rem', 
                color: '#9C27B0',
                margin: 0
              }}>
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ
              </h2>
            </div>

            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
              gap: '16px'
            }}>
              <div>
                <p style={{ fontWeight: 'bold', color: '#666', margin: '0 0 8px 0' }}>–ù–∞–∑–≤–∞–Ω–∏–µ:</p>
                <p style={{ fontSize: '1.1rem', margin: 0 }}>
                  {roomData.displayName || `–ö–æ–º–Ω–∞—Ç–∞ ${roomData.roomId}`}
                </p>
              </div>

              <div>
                <p style={{ fontWeight: 'bold', color: '#666', margin: '0 0 8px 0' }}>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤:</p>
                <p style={{ fontSize: '1.1rem', margin: 0 }}>
                  {roomData.maxPlayers || 2}
                </p>
              </div>

              <div>
                <p style={{ fontWeight: 'bold', color: '#666', margin: '0 0 8px 0' }}>–°—Ç–∞—Ç—É—Å:</p>
                <span style={{
                  background: roomData.status === 'waiting' ? '#FFF3E0' : '#E8F5E8',
                  color: roomData.status === 'waiting' ? '#E65100' : '#2E7D32',
                  padding: '8px 16px',
                  borderRadius: '20px',
                  fontSize: '0.9rem',
                  fontWeight: 'bold'
                }}>
                  {roomData.status === 'waiting' ? '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ' : 'üéÆ –ò–≥—Ä–∞'}
                </span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SimpleRoomSetup;
