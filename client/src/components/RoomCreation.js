import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  Card,
  CardContent,
  Alert,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Switch,
  FormControlLabel,
  Chip,
  Grid,
  Divider
} from '@mui/material';
import { 
  Add, 
  Settings, 
  Group, 
  Speed, 
  Chat, 
  Lock,
  Public,
  CheckCircle,
  Error
} from '@mui/icons-material';

const RoomCreation = ({ user, onRoomCreated, onBack }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    maxPlayers: 4,
    gameSpeed: 'normal',
    enableChat: true,
    privateRoom: false,
    password: '',
    category: 'casual'
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState({ type: '', text: '' });
  const [generatedRoomId, setGeneratedRoomId] = useState(null);

  // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
  const colors = {
    primary: '#1976d2',
    primaryDark: '#1565c0',
    primaryLight: '#e3f2fd',
    secondary: '#ff9800',
    secondaryDark: '#f57c00',
    secondaryLight: '#fff3e0',
    background: '#f8f9fa',
    surface: '#ffffff',
    text: '#212121',
    textSecondary: '#757575',
    border: '#e0e0e0',
    error: '#f44336',
    success: '#4caf50',
    warning: '#ff9800'
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  useEffect(() => {
    if (!formData.name) {
      const defaultName = `–ö–æ–º–Ω–∞—Ç–∞ ${user?.username || '–ò–≥—Ä–æ–∫–∞'}`;
      setFormData(prev => ({ ...prev, name: defaultName }));
    }
  }, [user]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (formData.name.length < 3) {
      newErrors.name = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞';
    }

    if (formData.privateRoom && !formData.password) {
      newErrors.password = '–î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å';
    }

    if (formData.password && formData.password.length < 4) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }

    // –ï—Å–ª–∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, –æ—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å
    if (field === 'privateRoom' && !value) {
      setFormData(prev => ({ ...prev, password: '' }));
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  const handleCreateRoom = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    setMessage({ type: '', text: '' });

    try {
      const response = await fetch('/api/rooms/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...formData,
          creatorId: user.userId
        })
      });

      const data = await response.json();

      if (response.ok) {
        setMessage({ type: 'success', text: '–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' });
        setGeneratedRoomId(data.room.roomId);
        
        setTimeout(() => {
          onRoomCreated(data.room);
        }, 2000);
      } else {
        setMessage({ type: 'error', text: data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' });
      }
    } catch (error) {
      setMessage({ type: 'error', text: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' });
    } finally {
      setIsLoading(false);
    }
  };

  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const getSettingsPreview = () => {
    const preview = [];
    
    preview.push(`–ò–≥—Ä–æ–∫–æ–≤: ${formData.maxPlayers}`);
    preview.push(`–°–∫–æ—Ä–æ—Å—Ç—å: ${getSpeedLabel(formData.gameSpeed)}`);
    preview.push(`–ß–∞—Ç: ${formData.enableChat ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}`);
    preview.push(`–¢–∏–ø: ${formData.privateRoom ? '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è' : '–ü—É–±–ª–∏—á–Ω–∞—è'}`);
    preview.push(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${getCategoryLabel(formData.category)}`);
    
    return preview;
  };

  const getSpeedLabel = (speed) => {
    const labels = {
      slow: '–ú–µ–¥–ª–µ–Ω–Ω–∞—è',
      normal: '–û–±—ã—á–Ω–∞—è',
      fast: '–ë—ã—Å—Ç—Ä–∞—è'
    };
    return labels[speed] || speed;
  };

  const getCategoryLabel = (category) => {
    const labels = {
      casual: '–û–±—ã—á–Ω–∞—è',
      competitive: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è',
      training: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è',
      tournament: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è'
    };
    return labels[category] || category;
  };

  return (
    <Box sx={{
      minHeight: '100vh',
      background: `linear-gradient(135deg, ${colors.primary} 0%, ${colors.primaryDark} 100%)`,
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      justifyContent: 'center',
      p: 4
    }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <Paper elevation={8} sx={{
          p: 4,
          width: '100%',
          maxWidth: 600,
          background: colors.surface,
          borderRadius: 3,
          boxShadow: '0 8px 32px rgba(0,0,0,0.1)'
        }}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <Box sx={{ textAlign: 'center', mb: 4 }}>
            <Typography variant="h4" sx={{ 
              color: colors.primary, 
              fontWeight: 'bold',
              mb: 1
            }}>
              üè† –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
            </Typography>
            <Typography variant="body1" sx={{ color: colors.textSecondary }}>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É
            </Typography>
          </Box>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <Card sx={{ mb: 3, bgcolor: colors.primaryLight }}>
            <CardContent>
              <Typography variant="h6" sx={{ color: colors.primaryDark, mb: 1 }}>
                üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {user?.username}
              </Typography>
              <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                ID: {user?.displayId} | Email: {user?.email}
              </Typography>
            </CardContent>
          </Card>

          {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã */}
          <Box component="form" onSubmit={handleCreateRoom}>
            <Grid container spacing={3}>
              {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <Grid item xs={12} md={6}>
                <Typography variant="h6" sx={{ color: colors.primary, mb: 2 }}>
                  üìù –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Typography>
                
                {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã */}
                <TextField
                  fullWidth
                  label="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"
                  value={formData.name}
                  onChange={(e) => handleInputChange('name', e.target.value)}
                  error={!!errors.name}
                  helperText={errors.name}
                  sx={{ mb: 2 }}
                />

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <TextField
                  fullWidth
                  label="–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  multiline
                  rows={3}
                  value={formData.description}
                  onChange={(e) => handleInputChange('description', e.target.value)}
                  sx={{ mb: 2 }}
                />

                {/* –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ */}
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤</InputLabel>
                  <Select
                    value={formData.maxPlayers}
                    label="–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤"
                    onChange={(e) => handleInputChange('maxPlayers', e.target.value)}
                  >
                    {[2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                      <MenuItem key={num} value={num}>
                        {num} –∏–≥—Ä–æ–∫–æ–≤
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è */}
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</InputLabel>
                  <Select
                    value={formData.category}
                    label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                    onChange={(e) => handleInputChange('category', e.target.value)}
                  >
                    <MenuItem value="casual">üéÆ –û–±—ã—á–Ω–∞—è</MenuItem>
                    <MenuItem value="competitive">üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è</MenuItem>
                    <MenuItem value="training">üìö –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è</MenuItem>
                    <MenuItem value="tournament">üèÖ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              {/* –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
              <Grid item xs={12} md={6}>
                <Typography variant="h6" sx={{ color: colors.primary, mb: 2 }}>
                  ‚öôÔ∏è –ò–≥—Ä–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Typography>
                
                {/* –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã */}
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>–°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã</InputLabel>
                  <Select
                    value={formData.gameSpeed}
                    label="–°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã"
                    onChange={(e) => handleInputChange('gameSpeed', e.target.value)}
                  >
                    <MenuItem value="slow">üêå –ú–µ–¥–ª–µ–Ω–Ω–∞—è</MenuItem>
                    <MenuItem value="normal">‚ö° –û–±—ã—á–Ω–∞—è</MenuItem>
                    <MenuItem value="fast">üöÄ –ë—ã—Å—Ç—Ä–∞—è</MenuItem>
                  </Select>
                </FormControl>

                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <FormControlLabel
                  control={
                    <Switch
                      checked={formData.enableChat}
                      onChange={(e) => handleInputChange('enableChat', e.target.checked)}
                      color="primary"
                    />
                  }
                  label="–í–∫–ª—é—á–∏—Ç—å —á–∞—Ç"
                  sx={{ mb: 2 }}
                />

                <FormControlLabel
                  control={
                    <Switch
                      checked={formData.privateRoom}
                      onChange={(e) => handleInputChange('privateRoom', e.target.checked)}
                      color="primary"
                    />
                  }
                  label="–ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞"
                  sx={{ mb: 2 }}
                />

                {/* –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã */}
                {formData.privateRoom && (
                  <TextField
                    fullWidth
                    label="–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã"
                    type="password"
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    error={!!errors.password}
                    helperText={errors.password}
                    sx={{ mb: 2 }}
                  />
                )}
              </Grid>
            </Grid>

            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
            <Box sx={{ mt: 3, p: 2, bgcolor: colors.primaryLight, borderRadius: 2 }}>
              <Typography variant="subtitle1" sx={{ color: colors.primaryDark, mb: 1 }}>
                üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫:
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {getSettingsPreview().map((setting, index) => (
                  <Chip
                    key={index}
                    label={setting}
                    size="small"
                    sx={{ bgcolor: colors.surface, color: colors.text }}
                  />
                ))}
              </Box>
            </Box>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            {message.text && (
              <Alert 
                severity={message.type} 
                sx={{ mt: 3 }}
                icon={message.type === 'success' ? <CheckCircle /> : <Error />}
              >
                {message.text}
                {generatedRoomId && (
                  <Typography variant="body2" sx={{ mt: 1, fontWeight: 'bold' }}>
                    ID –∫–æ–º–Ω–∞—Ç—ã: {generatedRoomId}
                  </Typography>
                )}
              </Alert>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <Box sx={{ mt: 3, display: 'flex', gap: 2, justifyContent: 'center' }}>
              <Button
                variant="outlined"
                onClick={onBack}
                sx={{
                  borderColor: colors.textSecondary,
                  color: colors.textSecondary,
                  px: 4,
                  py: 1.5
                }}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              
              <Button
                type="submit"
                variant="contained"
                disabled={isLoading}
                startIcon={<Add />}
                sx={{
                  bgcolor: colors.primary,
                  color: colors.surface,
                  px: 4,
                  py: 1.5,
                  fontWeight: 'bold',
                  '&:hover': {
                    bgcolor: colors.primaryDark,
                    transform: 'translateY(-1px)',
                    boxShadow: 4
                  },
                  '&:disabled': {
                    bgcolor: colors.border,
                    color: colors.textSecondary
                  },
                  transition: 'all 0.2s ease-in-out'
                }}
              >
                {isLoading ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : 'üöÄ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É'}
              </Button>
            </Box>
          </Box>
        </Paper>
      </motion.div>
    </Box>
  );
};

export default RoomCreation;
