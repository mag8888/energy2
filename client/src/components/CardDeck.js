import React, { useState, useEffect } from 'react';
import { Box, Typography, Paper, IconButton, Tooltip } from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';
import ShuffleIcon from '@mui/icons-material/Shuffle';
import StyleIcon from '@mui/icons-material/Style';

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const styles = `
  @keyframes pulse {
    0% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.7; transform: scale(1.1); }
    100% { opacity: 1; transform: scale(1); }
  }
`;

// –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = styles;
  document.head.appendChild(styleSheet);
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
const CardDeck = ({ 
  deckType, 
  remainingCards, 
  totalCards, 
  onShuffle, 
  isShuffling = false,
  position = 'top' // 'top', 'bottom', 'left', 'right'
}) => {
  const [showTooltip, setShowTooltip] = useState(false);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç–æ–ø–∫–∏
  const getPositionStyles = () => {
    switch (position) {
      case 'top':
        return { top: 20, left: '50%', transform: 'translateX(-50%)' };
      case 'bottom':
        return { bottom: 20, left: '50%', transform: 'translateX(-50%)' };
      case 'left':
        return { left: 20, top: '50%', transform: 'translateY(-50%)' };
      case 'right':
        return { right: 20, top: '50%', transform: 'translateY(-50%)' };
      default:
        return { top: 20, left: '50%', transform: 'translateX(-50%)' };
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–æ–ø–∫–∏ –ø–æ —Ç–∏–ø—É
  const getDeckColor = () => {
    switch (deckType) {
      case 'smallDeal':
        return '#1B5E20'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
      case 'bigDeal':
        return '#BF360C'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
      case 'market':
        return '#0D47A1'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π
      case 'doodad':
        return '#B71C1C'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
      case 'charity':
        return '#880E4F'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-—Ä–æ–∑–æ–≤—ã–π
      default:
        return '#311B92'; // –û—á–µ–Ω—å —Ç–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
  const getDeckName = () => {
    switch (deckType) {
      case 'smallDeal':
        return '–ú–∞–ª—ã–µ –°–¥–µ–ª–∫–∏';
      case 'bigDeal':
        return '–ë–æ–ª—å—à–∏–µ –°–¥–µ–ª–∫–∏';
      case 'market':
        return '–†—ã–Ω–æ–∫';
      case 'doodad':
        return '–†–∞—Å—Ö–æ–¥—ã';
      case 'charity':
        return '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
      default:
        return deckType;
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–æ–ª–æ–¥—ã
  const getDeckIcon = () => {
    switch (deckType) {
      case 'smallDeal':
        return 'üè†';
      case 'bigDeal':
        return 'üè¢';
      case 'market':
        return 'üìà';
      case 'doodad':
        return 'üõí';
      case 'charity':
        return '‚ù§Ô∏è';
      default:
        return 'üé¥';
    }
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å—Ç–æ–ø–∫–µ
  const cardVariants = {
    hidden: { scale: 0.8, opacity: 0 },
    visible: { scale: 1, opacity: 1 },
    exit: { scale: 0.8, opacity: 0 }
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
  const shuffleVariants = {
    initial: { rotate: 0, scale: 1 },
    shuffle: { 
      rotate: [0, -10, 10, -5, 5, 0],
      scale: [1, 1.1, 1, 1.05, 1],
      transition: { duration: 0.6, ease: "easeInOut" }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
  const handleShuffle = () => {
    if (onShuffle && !isShuffling) {
      onShuffle(deckType);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç –º–∞–ª–æ
  const isLowCards = remainingCards <= Math.ceil(totalCards * 0.2);
  const isEmpty = remainingCards === 0;

  return (
    <Box
      sx={{
        position: 'absolute',
        ...getPositionStyles(),
        zIndex: 10
      }}
    >
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–æ–ø–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <motion.div
        variants={shuffleVariants}
        initial="initial"
        animate={isShuffling ? "shuffle" : "initial"}
      >
        <Paper
          elevation={8}
          sx={{
            width: 100,
            height: 140,
            background: `linear-gradient(135deg, ${getDeckColor()} 0%, ${getDeckColor()} 60%, rgba(0,0,0,0.8) 100%)`,
            borderRadius: 3,
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'pointer',
            border: `4px solid ${isLowCards ? '#FFD700' : '#FFFFFF'}`,
            position: 'relative',
            boxShadow: '0 6px 24px rgba(0,0,0,0.8), inset 0 2px 8px rgba(255,255,255,0.1)',
            '&:hover': {
              transform: 'translateY(-5px)',
              boxShadow: '0 10px 35px rgba(0,0,0,0.9), inset 0 2px 8px rgba(255,255,255,0.2)',
              border: `4px solid ${isLowCards ? '#FFEB3B' : '#F0F0F0'}`
            },
            transition: 'all 0.3s ease'
          }}
          onClick={handleShuffle}
          onMouseEnter={() => setShowTooltip(true)}
          onMouseLeave={() => setShowTooltip(false)}
        >
          {/* –ò–∫–æ–Ω–∫–∞ –∫–æ–ª–æ–¥—ã */}
          <Box
            sx={{
              backgroundColor: 'rgba(255,255,255,0.95)',
              borderRadius: '50%',
              width: 50,
              height: 50,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              mb: 1,
              border: '3px solid #000000',
              boxShadow: '0 3px 10px rgba(0,0,0,0.8)'
            }}
          >
            <Typography variant="h4" sx={{ 
              color: getDeckColor(),
              fontWeight: 'bold',
              textShadow: 'none'
            }}>
              {getDeckIcon()}
            </Typography>
          </Box>
          
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã */}
          <Box
            sx={{
              backgroundColor: 'rgba(255,255,255,0.95)',
              borderRadius: 1,
              px: 1,
              py: 0.5,
              mb: 1,
              border: '2px solid #000000'
            }}
          >
            <Typography 
              variant="body2" 
              sx={{ 
                color: '#000000', 
                textAlign: 'center',
                fontWeight: 'bold',
                fontSize: '0.8rem',
                lineHeight: 1.2,
                letterSpacing: '0.5px'
              }}
            >
              {getDeckName()}
            </Typography>
          </Box>
          
          {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç */}
          <Box
            sx={{
              backgroundColor: 'rgba(255,255,255,0.95)',
              borderRadius: '50%',
              width: 40,
              height: 40,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              border: '3px solid #000000',
              boxShadow: '0 2px 8px rgba(0,0,0,0.8)'
            }}
          >
            <Typography 
              variant="h5" 
              sx={{ 
                color: '#000000', 
                fontWeight: 'bold',
                textShadow: 'none'
              }}
            >
              {remainingCards}
            </Typography>
          </Box>
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∏–∑–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç */}
          {isLowCards && !isEmpty && (
            <Box
              sx={{
                position: 'absolute',
                top: -5,
                right: -5,
                width: 20,
                height: 20,
                backgroundColor: '#FFD700',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                animation: 'pulse 2s infinite',
                border: '2px solid #000000',
                boxShadow: '0 2px 8px rgba(0,0,0,0.6)'
              }}
            >
              <Typography variant="caption" sx={{ color: '#000000', fontWeight: 'bold', fontSize: '0.6rem' }}>
                ‚ö†Ô∏è
              </Typography>
            </Box>
          )}
          
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–¥—ã */}
          {isEmpty && (
            <Box
              sx={{
                position: 'absolute',
                top: -5,
                right: -5,
                width: 20,
                height: 20,
                backgroundColor: '#F44336',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                border: '2px solid #000000',
                boxShadow: '0 2px 8px rgba(0,0,0,0.6)'
              }}
            >
              <Typography variant="caption" sx={{ color: '#FFFFFF', fontWeight: 'bold', fontSize: '0.6rem' }}>
                ‚àÖ
              </Typography>
            </Box>
          )}
        </Paper>
      </motion.div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ */}
      {remainingCards === 0 && (
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 0.3 }}
        >
          <IconButton
            onClick={handleShuffle}
            disabled={isShuffling}
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              backgroundColor: 'rgba(0,0,0,0.9)',
              color: '#FFFFFF',
              border: '2px solid #FFFFFF',
              boxShadow: '0 4px 12px rgba(0,0,0,0.8)',
              '&:hover': {
                backgroundColor: 'rgba(0,0,0,1)',
                transform: 'translate(-50%, -50%) scale(1.1)',
                boxShadow: '0 6px 16px rgba(0,0,0,0.9)'
              },
              '&:disabled': {
                opacity: 0.7
              }
            }}
          >
            <ShuffleIcon />
          </IconButton>
        </motion.div>
      )}

      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞—Ä—Ç –≤ —Å—Ç–æ–ø–∫–µ */}
      <AnimatePresence>
        {remainingCards > 1 && (
          <>
            {/* –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ */}
            <motion.div
              variants={cardVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
              style={{
                position: 'absolute',
                top: 2,
                left: 2,
                zIndex: 9
              }}
            >
              <Paper
                elevation={4}
                sx={{
                  width: 80,
                  height: 120,
                  backgroundColor: getDeckColor(),
                  borderRadius: 2,
                  opacity: 0.8
                }}
              />
            </motion.div>
            
            {/* –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–∞ */}
            {remainingCards > 2 && (
              <motion.div
                variants={cardVariants}
                initial="hidden"
                animate="visible"
                exit="exit"
                style={{
                  position: 'absolute',
                  top: 4,
                  left: 4,
                  zIndex: 8
                }}
              >
                <Paper
                  elevation={2}
                  sx={{
                    width: 80,
                    height: 120,
                    backgroundColor: getDeckColor(),
                    borderRadius: 2,
                    opacity: 0.6
                  }}
                />
              </motion.div>
            )}
          </>
        )}
      </AnimatePresence>

      {/* Tooltip —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <Tooltip
        open={showTooltip}
        title={
          <Box>
            <Typography variant="body2">
              <strong>{getDeckName()}</strong>
            </Typography>
            <Typography variant="caption">
              –û—Å—Ç–∞–ª–æ—Å—å –∫–∞—Ä—Ç: {remainingCards} –∏–∑ {totalCards}
            </Typography>
            {isLowCards && (
              <Typography variant="caption" sx={{ color: '#FFD700', display: 'block' }}>
                ‚ö†Ô∏è –ö–∞—Ä—Ç –º–∞–ª–æ! –°–∫–æ—Ä–æ –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞
              </Typography>
            )}
            {isEmpty && (
              <Typography variant="caption" sx={{ color: '#F44336', display: 'block' }}>
                üö´ –ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
              </Typography>
            )}
          </Box>
        }
        placement="top"
        arrow
      >
        <Box />
      </Tooltip>
    </Box>
  );
};

export default CardDeck;
