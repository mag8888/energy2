import React, { useMemo, useState } from 'react';
import { Box, Typography, Avatar } from '@mui/material';
import { motion } from 'framer-motion';
import HomeIcon from '@mui/icons-material/Home';
import BusinessIcon from '@mui/icons-material/Business';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import VolunteerActivismIcon from '@mui/icons-material/VolunteerActivism';
import ChildCareIcon from '@mui/icons-material/ChildCare';
import WorkOutlineIcon from '@mui/icons-material/WorkOutline';
import FlightTakeoffIcon from '@mui/icons-material/FlightTakeoff';
import CasinoIcon from '@mui/icons-material/Casino';
import CardDeck from './CardDeck';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–µ—Ç–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–∏—Å–∫—É
const CELL_CONFIG = {
  // –ú–∞–ª—ã–π –∫—Ä—É–≥ - 24 –∫–ª–µ—Ç–∫–∏ (0-23) - –ö—Ä—ã—Å–∏–Ω—ã–µ –ë–µ–≥–∞
  innerCircle: [
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 0 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'doodad', icon: <ShoppingCartIcon />, color: '#E91E63', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞' }, // 1 üü° –†–æ–∑–æ–≤–∞—è –≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞ (—Ç—Ä–∞—Ç—ã 100-4000$)
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 2 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'charity', icon: <VolunteerActivismIcon />, color: '#FF9800', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' }, // 3 üü† –û—Ä–∞–Ω–∂–µ–≤–∞—è –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚ù§Ô∏è
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 4 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'payday', icon: <AttachMoneyIcon />, color: '#FFD700', name: 'PayDay' }, // 5 üü° –ñ–µ–ª—Ç–∞—è PayDay üí∞
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 6 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'market', icon: <TrendingUpIcon />, color: '#00BCD4', name: '–†—ã–Ω–æ–∫' }, // 7 üîµ –ì–æ–ª—É–±–∞—è —Ä—ã–Ω–æ–∫
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 8 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'doodad', icon: <ShoppingCartIcon />, color: '#E91E63', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞' }, // 9 üü° –†–æ–∑–æ–≤–∞—è –≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞ (—Ç—Ä–∞—Ç—ã 100-4000$)
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 10 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'child', icon: <ChildCareIcon />, color: '#9C27B0', name: '–†–µ–±–µ–Ω–æ–∫' }, // 11 üü£ –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –†–µ–±–µ–Ω–æ–∫ üë∂
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 12 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'payday', icon: <AttachMoneyIcon />, color: '#FFD700', name: 'PayDay' }, // 13 üü° –ñ–µ–ª—Ç–∞—è PayDay üí∞
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 14 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'market', icon: <TrendingUpIcon />, color: '#00BCD4', name: '–†—ã–Ω–æ–∫' }, // 15 üîµ –†—ã–Ω–æ–∫
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 16 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'doodad', icon: <ShoppingCartIcon />, color: '#E91E63', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞' }, // 17 üü° –†–æ–∑–æ–≤–∞—è –≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞ (—Ç—Ä–∞—Ç—ã 100-4000$)
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 18 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'downsized', icon: <WorkOutlineIcon />, color: '#000000', name: '–ü–æ—Ç–µ—Ä—è' }, // 19 ‚ö´ –ß–µ—Ä–Ω–∞—è –ü–æ—Ç–µ—Ä—è üí∏
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 20 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'payday', icon: <AttachMoneyIcon />, color: '#FFD700', name: 'PayDay' }, // 21 üü° –ñ–µ–ª—Ç–∞—è PayDay üí∞
    { type: 'opportunity', icon: <HomeIcon />, color: '#4CAF50', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å' }, // 22 üü¢ –ó–µ–ª–µ–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∞–ª–∞—è/–±–æ–ª—å—à–∞—è
    { type: 'market', icon: <TrendingUpIcon />, color: '#00BCD4', name: '–†—ã–Ω–æ–∫' } // 23 üîµ –†—ã–Ω–æ–∫
  ],
  // –í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç - 50 –∫–ª–µ—Ç–æ–∫ –ë—ã—Å—Ç—Ä—ã–π –ü—É—Ç—å
  outerSquare: [
    { type: 'cashflowDay', icon: <AttachMoneyIcon />, color: '#4CAF50', name: '–î–µ–Ω—å –ü–æ—Ç–æ–∫–∞' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' },
    { type: 'fastTrack', icon: <FlightTakeoffIcon />, color: '#9C27B0', name: 'Fast Track' }
  ]
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª–µ—Ç–∫–∏
const GameCell = React.memo(({ 
  position, 
  type, 
  icon, 
  color, 
  isPlayerHere, 
  playerColor, 
  playerInitial,
  onClick,
  number
}) => {
  return (
    <motion.div
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
      onClick={() => onClick?.(position, type)}
      style={{
        width: 42,
        height: 42,
        borderRadius: 7,
        backgroundColor: color,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        cursor: 'pointer',
        border: '3px solid #FFFFFF',
        boxShadow: '0 3px 8px rgba(0,0,0,0.4)'
      }}
    >
      {isPlayerHere ? (
        <Box
          sx={{
            width: 28,
            height: 28,
            borderRadius: '50%',
            backgroundColor: playerColor,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: 'white',
            fontWeight: 'bold',
            fontSize: '14px'
          }}
        >
          {playerInitial}
        </Box>
      ) : (
        <Box sx={{ color: 'white', fontSize: '22px' }}>
          {icon}
        </Box>
      )}
      
      {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ */}
      {number && (
        <Typography
          variant="caption"
          sx={{
            position: 'absolute',
            top: -10,
            right: -10,
            backgroundColor: '#FFD700',
            color: '#000000',
            borderRadius: '50%',
            width: 22,
            height: 22,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '13px',
            fontWeight: 'bold',
            border: '1px solid #000000'
          }}
        >
          {number}
        </Typography>
      )}
    </motion.div>
  );
});

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
const GameField = ({ 
  players, 
  currentTurn, 
  onCellClick, 
  onRollDice, 
  isMyTurn, 
  diceValue, 
  isRolling 
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
  const [cardDecks, setCardDecks] = useState({
    smallDeal: { remaining: 24, total: 24, isShuffling: false },
    bigDeal: { remaining: 24, total: 24, isShuffling: false },
    market: { remaining: 24, total: 24, isShuffling: false },
    doodad: { remaining: 24, total: 24, isShuffling: false },
    charity: { remaining: 24, total: 24, isShuffling: false }
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–æ–ª–æ–¥—ã
  const handleShuffleDeck = (deckType) => {
    setCardDecks(prev => ({
      ...prev,
      [deckType]: {
        ...prev[deckType],
        isShuffling: true,
        remaining: prev[deckType].total
      }
    }));

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
    setTimeout(() => {
      setCardDecks(prev => ({
        ...prev,
        [deckType]: {
          ...prev[deckType],
          isShuffling: false
        }
      }));
    }, 600);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
  const drawCard = (deckType) => {
    setCardDecks(prev => ({
      ...prev,
      [deckType]: {
        ...prev[deckType],
        remaining: Math.max(0, prev[deckType].remaining - 1)
      }
    }));
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
  const playerPositions = useMemo(() => {
    const positions = {};
    players.forEach(player => {
      if (player.position !== undefined) {
        positions[player.position] = {
          color: player.color || '#9C27B0',
          initial: player.username?.charAt(0) || '–ò',
          id: player.id
        };
      }
    });
    return positions;
  }, [players]);

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫
  const cellPositions = useMemo(() => {
    const positions = [];
    const fieldCenter = 495 / 2;
    const cellSize = 42;
    const cellHalf = cellSize / 2;

    // –í–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥ - –∫–ª–µ—Ç–∫–∏ –ø–æ –∫—Ä—É–≥—É (0-23)
    for (let i = 0; i < 24; i++) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–∞ –∏ –∏–¥–µ–º –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
      const angle = (i * 15 - 90) * (Math.PI / 180); // -90 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–µ—Ä—Ö—É
      const radius = 240;
      const x = Math.cos(angle) * radius;
      const y = Math.sin(angle) * radius;
      
      positions.push({
        position: i,
        x: x + 247.5 - 21,
        y: y + 247.5 - 21,
        ...CELL_CONFIG.innerCircle[i % CELL_CONFIG.innerCircle.length],
        number: i + 1 // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 24
      });
    }
    return positions;
  }, []);

  return (
    <Box
      sx={{
        position: 'relative',
        width: 495, // 550 * 0.9 = 495 - –ø–æ–ª–µ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 10%
        height: 495, // 550 * 0.9 = 495 - –ø–æ–ª–µ —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 10%
        backgroundColor: '#2F1B40',
        borderRadius: '50%',
        border: '4px solid #6E4D92',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'visible'
      }}
    >
      {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ */}
      {isMyTurn && (
        <motion.div
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={onRollDice}
          style={{ 
            position: 'absolute',
            top: -50,
            right: 20,
            cursor: 'pointer',
            zIndex: 30
          }}
        >
          <CasinoIcon sx={{ fontSize: 32, color: '#FFD700' }} />
        </motion.div>
      )}

      {/* –ó–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–æ–≤ */}
      {diceValue > 0 && (
        <Typography 
          variant="h3" 
          sx={{ 
            position: 'absolute',
            top: -50,
            right: 60,
            color: '#FFD700', 
            fontWeight: 'bold',
            zIndex: 30,
            textShadow: '2px 2px 4px rgba(0,0,0,0.5)'
          }}
        >
          {diceValue}
        </Typography>
      )}



      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <Box
        sx={{
          position: 'absolute',
          width: 90,
          height: 90,
          backgroundColor: '#6E4D92',
          borderRadius: '50%',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          color: 'white',
          zIndex: 20
        }}
      >
        <Typography variant="h6" sx={{ fontWeight: 'bold', fontSize: '0.8rem', textAlign: 'center', lineHeight: 1.1 }}>
          –ü–û–¢–û–ö –î–ï–ù–ï–ì
        </Typography>
      </Box>

      {/* –ö–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */}
      {cellPositions.map(({ position, x, y, type, icon, color, number }) => (
        <Box
          key={position}
          sx={{
            position: 'absolute',
            left: x,
            top: y,
            zIndex: 100
          }}
        >
          <GameCell
            position={position}
            type={type}
            icon={icon}
            color={color}
            number={number}
            isPlayerHere={!!playerPositions[position]}
            playerColor={playerPositions[position]?.color}
            playerInitial={playerPositions[position]?.initial}
            onClick={onCellClick}
          />
        </Box>
      ))}

      {/* –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏ */}
      <svg
        style={{
          position: 'absolute',
          width: '100%',
          height: '100%',
          zIndex: 1
        }}
      >
        {/* –õ–∏–Ω–∏–∏ –º–µ–∂–¥—É –≤–Ω–µ—à–Ω–∏–º –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∫—Ä—É–≥–æ–º */}
        {[0, 6, 12, 18].map((startPos) => {
          const startCell = cellPositions[startPos];
          const endCell = cellPositions[startPos + 24];
          
          if (startCell && endCell) {
            return (
              <line
                key={`line-${startPos}`}
                x1={startCell.x + 20}
                y1={startCell.y + 20}
                x2={endCell.x + 20}
                y2={endCell.y + 20}
                stroke="#6E4D92"
                strokeWidth="2"
                strokeDasharray="5,5"
              />
            );
          }
          return null;
        })}
      </svg>

      {/* –°—Ç–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <CardDeck
        deckType="smallDeal"
        remainingCards={cardDecks.smallDeal.remaining}
        totalCards={cardDecks.smallDeal.total}
        onShuffle={handleShuffleDeck}
        isShuffling={cardDecks.smallDeal.isShuffling}
        position="top"
      />
      
      <CardDeck
        deckType="bigDeal"
        remainingCards={cardDecks.bigDeal.remaining}
        totalCards={cardDecks.bigDeal.total}
        onShuffle={handleShuffleDeck}
        isShuffling={cardDecks.bigDeal.isShuffling}
        position="bottom"
      />
      
      <CardDeck
        deckType="market"
        remainingCards={cardDecks.market.remaining}
        totalCards={cardDecks.market.total}
        onShuffle={handleShuffleDeck}
        isShuffling={cardDecks.market.isShuffling}
        position="left"
      />
      
      <CardDeck
        deckType="doodad"
        remainingCards={cardDecks.doodad.remaining}
        totalCards={cardDecks.doodad.total}
        onShuffle={handleShuffleDeck}
        isShuffling={cardDecks.doodad.isShuffling}
        position="right"
      />
    </Box>
  );
};

GameField.displayName = 'GameField';
GameCell.displayName = 'GameCell';

export default GameField;
