import React, { useMemo, useState, useEffect, useCallback } from 'react';
import { Box, Typography, Avatar, Dialog, DialogTitle, DialogContent, DialogActions, Button, Chip } from '@mui/material';
import { motion } from 'framer-motion';
import HomeIcon from '@mui/icons-material/Home';
import BusinessIcon from '@mui/icons-material/Business';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import VolunteerActivismIcon from '@mui/icons-material/VolunteerActivism';
import ChildCareIcon from '@mui/icons-material/ChildCare';
import WorkOutlineIcon from '@mui/icons-material/WorkOutline';
import FlightTakeoffIcon from '@mui/icons-material/FlightTakeoff';
import CasinoIcon from '@mui/icons-material/Casino';
import CardDeck from './CardDeck';
import { getRandomProfession } from '../data/professions';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import SkipNextIcon from '@mui/icons-material/SkipNext';
import HourglassEmptyIcon from '@mui/icons-material/HourglassEmpty';
import { CELL_CONFIG, PLAYER_COLORS } from '../data/gameCells';
import FastTrackCellModal from './FastTrackCellModal';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
const PlayerToken = React.memo(({ 
  player, 
  position, 
  isMoving, 
  onMoveComplete,
  cellPositions 
}) => {
  const [currentPosition, setCurrentPosition] = useState(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const defaultCoords = { x: 350, y: 350 }; // –¶–µ–Ω—Ç—Ä –ø–æ–ª—è
    if (cellPositions && Array.isArray(cellPositions) && position !== undefined) {
      const cell = cellPositions.find(c => c.position === position);
              if (cell) {
          // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ–∏—à–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∫–ª–µ—Ç–∫–∏
          return { x: cell.x + 30, y: cell.y + 8 };
        }
    }
    return defaultCoords;
  });
  
  const [isAnimating, setIsAnimating] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
  const getPositionCoordinates = (pos) => {
    if (!cellPositions || !Array.isArray(cellPositions)) {
      return { x: 350, y: 350 }; // –¶–µ–Ω—Ç—Ä –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    const cell = cellPositions.find(c => c.position === pos);
    if (cell) {
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ñ–∏—à–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      return { x: cell.x + 30, y: cell.y + 8 };
    }
    return { x: 350, y: 350 }; // –¶–µ–Ω—Ç—Ä –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
  useEffect(() => {
    if (isMoving && !isAnimating && position !== undefined) {
      setIsAnimating(true);
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ 0 (–ø–µ—Ä–≤–∞—è –∫–ª–µ—Ç–∫–∞)
      const startPos = getPositionCoordinates(0);
      const endPos = getPositionCoordinates(position);
      
      // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–ª–µ—Ç–∫–∞–º
      const moveStep = (currentStep, totalSteps) => {
        if (currentStep >= totalSteps) {
          setIsAnimating(false);
          onMoveComplete?.();
          return;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ (–¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –∫–ª–µ—Ç–∫–∞–º)
        const currentPos = currentStep;
        const coords = getPositionCoordinates(currentPos);
        setCurrentPosition(coords);
        
        // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —á–µ—Ä–µ–∑ 500–º—Å (–ø–æ–ª —Å–µ–∫—É–Ω–¥—ã)
        setTimeout(() => moveStep(currentStep + 1, totalSteps), 500);
      };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      moveStep(0, Math.max(1, position + 1));
    }
  }, [isMoving, position, isAnimating, cellPositions, onMoveComplete]);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!isMoving && !isAnimating && position !== undefined) {
      const coords = getPositionCoordinates(position);
      setCurrentPosition(coords);
    }
  }, [position, isMoving, isAnimating, cellPositions]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (position !== undefined && cellPositions && Array.isArray(cellPositions)) {
      const coords = getPositionCoordinates(position);
      setCurrentPosition(coords);
    }
  }, [position, cellPositions]);
  
  return (
    <motion.div
      style={{
        position: 'absolute',
        left: currentPosition.x - 12,
        top: currentPosition.y - 12,
        zIndex: 200,
        width: 24,
        height: 24,
        borderRadius: '50%',
        backgroundColor: player.color || PLAYER_COLORS[0],
        border: '2px solid #FFFFFF',
        boxShadow: '0 2px 8px rgba(0,0,0,0.5)',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        color: 'white',
        fontWeight: 'bold',
        fontSize: '12px',
        cursor: 'pointer'
      }}
      animate={{
        scale: isAnimating ? [1, 1.1, 1] : 1,
        rotate: isAnimating ? [0, 5, -5, 0] : 0
      }}
      transition={{
        duration: 0.5,
        repeat: isAnimating ? Infinity : 0
      }}
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.9 }}
    >
      {player.username?.charAt(0)?.toUpperCase() || '–ò'}
    </motion.div>
  );
});

PlayerToken.displayName = 'PlayerToken';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–ª–µ—Ç–∫–∏
const GameCell = React.memo(({ 
  position, 
  type, 
  icon, 
  color,
  name,
  isPlayerHere, 
  playerColor, 
  playerInitial,
  onClick,
  number,
  isInner
}) => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫
  let cellColor = color;
  
  return (
    <motion.div
      whileHover={{ scale: 1.1 }}
      whileTap={{ scale: 0.95 }}
      onClick={() => {
        onClick?.(position, type, name, number);
      }}
      style={{
        width: 42,
        height: 42,
        borderRadius: 7,
        backgroundColor: cellColor,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        cursor: 'pointer',
        border: '3px solid #FFFFFF',
        boxShadow: '0 3px 8px rgba(0,0,0,0.4)'
      }}
    >
      {isPlayerHere ? (
        <Box
          sx={{
            width: 28,
            height: 28,
            borderRadius: '50%',
            backgroundColor: playerColor,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            color: 'white',
            fontWeight: 'bold',
            fontSize: '14px'
          }}
        >
          {playerInitial}
        </Box>
      ) : (
        <Box sx={{ color: 'white', fontSize: '22px' }}>
          {icon}
        </Box>
      )}
      
      {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ */}
      {number && (
        <Typography
          variant="caption"
          sx={{
            position: 'absolute',
            top: -10,
            right: -10,
            backgroundColor: '#FFD700',
            color: '#000000',
            borderRadius: '50%',
            width: 22,
            height: 22,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '13px',
            fontWeight: 'bold',
            border: '1px solid #000000'
          }}
        >
          {number}
        </Typography>
      )}
    </motion.div>
  );
});

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
const GameField = ({ 
  players, 
  currentTurn, 
  onCellClick, 
  onRollDice, 
  isMyTurn,
  diceValue,
  isRolling,
  gamePhase,
  diceAnimation
}) => {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
  // console.log('üéØ [GameField] –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ–ø—Å—ã:', {
  //   players: players?.length || 0,
  //   currentTurn,
  //   isMyTurn,
  //   diceValue,
  //   isRolling,
  //   onRollDice: typeof onRollDice
  // });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
  const [cardDecks, setCardDecks] = useState({
    smallDeal: { remaining: 24, total: 24, isShuffling: false },
    bigDeal: { remaining: 24, total: 24, isShuffling: false },
    market: { remaining: 24, total: 24, isShuffling: false },
    doodad: { remaining: 24, total: 24, isShuffling: false },
    charity: { remaining: 24, total: 24, isShuffling: false }
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–µ—Ç–∫–µ
  const [cellDialog, setCellDialog] = useState({
    open: false,
    cellNumber: '',
    cellName: '',
    cellType: ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª–∞ "–±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞" (Fast Track)
  const [fastTrackModal, setFastTrackModal] = useState({
    open: false,
    cellData: null
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
  const [playerProfession, setPlayerProfession] = useState(null);
  const [playerBalance, setPlayerBalance] = useState(0);
  const [gameStarted, setGameStarted] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤
  const [playerOrder, setPlayerOrder] = useState([]); // –ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const [diceResults, setDiceResults] = useState({}); // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤
  const [turnTimer, setTurnTimer] = useState(120); // 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏—à–µ–∫ –∏–≥—Ä–æ–∫–æ–≤
  const [playerTokens, setPlayerTokens] = useState({});
  const [movingPlayers, setMovingPlayers] = useState(new Set());
  

  
  // –£–±–∏—Ä–∞–µ–º localIsMyTurn, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ isMyTurn –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
  

  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
  // console.log('üöÄ [GameField] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–ø—Å–∞–º–∏:', {
  //   players: players?.length || 0,
  //   currentTurn,
  //   isMyTurn,
  //   diceValue
  // });
  
  // console.log('üìä [GameField] –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', {
  //   playerProfession: playerProfession?.name || 'null',
  //   playerBalance,
  //   gameStarted,
  //   gamePhase,
  //   currentPlayerIndex,
  //   turnTimer,
  //   isMyTurn
  // });

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–æ–ª–æ–¥—ã
  const handleShuffleDeck = (deckType) => {
    setCardDecks(prev => ({
      ...prev,
      [deckType]: {
        ...prev[deckType],
        isShuffling: true,
        remaining: prev[deckType].total
      }
    }));

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏
    setTimeout(() => {
      setCardDecks(prev => ({
        ...prev,
        [deckType]: {
          ...prev[deckType],
          isShuffling: false
        }
      }));
    }, 600);
  };


  
  // –§—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
  const drawCard = (deckType) => {
    setCardDecks(prev => ({
      ...prev,
      [deckType]: {
        ...prev[deckType],
        remaining: Math.max(0, prev[deckType].remaining - 1)
      }
    }));
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã
  // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–º–Ω–∞—Ç—É, –∞ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  // useEffect(() => {
  //   console.log('üîç [GameField] useEffect —Å—Ä–∞–±–æ—Ç–∞–ª:', { gameStarted, playerProfession });
  //   
  //   if (!gameStarted && !playerProfession) {
  //     console.log('‚úÖ [GameField] –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é...');
  //     
  //     try {
  //       // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
  //       const randomProfession = getRandomProfession();
  //       console.log('üéØ [GameField] –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:', randomProfession);
  //       
  //       if (!randomProfession) {
  //         console.error('‚ùå [GameField] getRandomProfession –≤–µ—Ä–Ω—É–ª null/undefined');
  //         return;
  //       }
  //       
  //       setPlayerProfession(randomProfession);
  //       console.log('‚úÖ [GameField] playerProfession —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  //       
  //       // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å: –∑–∞—Ä–ø–ª–∞—Ç–∞ + 15-20% —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π
  //       const savingsPercentage = 15 + Math.random() * 5; // 15-20%
  //       const savings = Math.floor(randomProfession.salary * (savingsPercentage / 100));
  //       const totalBalance = randomProfession.balance + savings;
  //       
  //       console.log('üí∞ [GameField] –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞:', {
  //         salary: randomProfession.salary,
  //         balance: randomProfession.balance,
  //         savingsPercentage,
  //         savings,
  //         totalBalance
  //       });
  //       
  //       setPlayerBalance(totalBalance);
  //       setGameStarted(true);
  //       
  //       // –ü–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
  //       setGamePhase('diceRoll');
  //       
  //       // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–¥
  //       // setLocalIsMyTurn(true); // –£–¥–∞–ª–µ–Ω–æ
  //       setTurnTimer(120);
  //       
  //       console.log('üéØ [GameField] –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∞:', randomProfession.name);
  //       console.log('üí∞ [GameField] –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞:', totalBalance, '(–∑–∞—Ä–ø–ª–∞—Ç–∞:', randomProfession.salary, '+ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è:', savings, ')');
  //       console.log('‚úÖ [GameField] –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', { playerProfession: randomProfession, playerBalance: totalBalance, gameStarted: true });
  //       console.log('üéÆ [GameField] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞, —Ñ–∞–∑–∞: diceRoll');
  //       console.log('‚è∞ [GameField] –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞–ø—É—â–µ–Ω, —Ç–∞–π–º–µ—Ä: 2:00');
  //       
  //     } catch (error) {
  //       console.error('‚ùå [GameField] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:', error);
  //     }
  //   } else {
  //       console.log('‚è≠Ô∏è [GameField] –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:', { gameStarted, playerProfession });
  //   }
  // }, [gameStarted, playerProfession]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ö–æ–¥–æ–≤
  const rollDiceForOrder = useCallback(() => {
    const diceValue = Math.floor(Math.random() * 6) + 1;
    
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    setDiceResults(prev => ({ ...prev, [Date.now()]: diceValue }));
    
    return diceValue;
  }, []);

  const startTurn = useCallback(() => {
    
    setTurnTimer(120); // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 2 –º–∏–Ω—É—Ç—ã
    // setLocalIsMyTurn(true); // –£–¥–∞–ª–µ–Ω–æ
    
    // –°–±—Ä–æ—Å –∫—É–±–∏–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Ö–æ–¥–∞
    // setLocalDiceValue(0); // –£–¥–∞–ª–µ–Ω–æ
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    setCurrentPlayerIndex(prev => (prev + 1) % playerOrder.length);
  }, [currentPlayerIndex, playerOrder.length]);

  const endTurn = useCallback(() => {
    
    // setLocalIsMyTurn(false); // –£–¥–∞–ª–µ–Ω–æ
    
    // –°–±—Ä–æ—Å –∫—É–±–∏–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Ö–æ–¥–∞
    // setLocalDiceValue(0); // –£–¥–∞–ª–µ–Ω–æ
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    const nextPlayerIndex = (currentPlayerIndex + 1) % playerOrder.length;
    setCurrentPlayerIndex(nextPlayerIndex);
    
    // –ó–∞–ø—É—Å–∫ —Ö–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    setTimeout(() => startTurn(), 1000);
  }, [currentPlayerIndex, playerOrder.length, startTurn]);

  const skipTurn = useCallback(() => {
    
    endTurn();
  }, [currentPlayerIndex, endTurn]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞
  const movePlayerToken = useCallback((playerId, diceValue) => {
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ø–∞–º–∞
  // console.log(`üéØ [GameField] –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–∞ ${diceValue} –∫–ª–µ—Ç–æ–∫`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞
    const player = players?.find(p => p.id === playerId);
    if (!player) {
      console.error('‚ùå [GameField] –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω:', playerId);
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    const currentPos = player.position || 0;
    const newPos = Math.min(currentPos + diceValue, 23); // –ú–∞–∫—Å–∏–º—É–º 23 –∫–ª–µ—Ç–∫–∏ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥)
    
    
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏—à–µ–∫
    setPlayerTokens(prev => ({
      ...prev,
      [playerId]: {
        ...prev[playerId],
        position: newPos,
        isMoving: true
      }
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–≤–∏–∂—É—â–∏—Ö—Å—è
    setMovingPlayers(prev => new Set([...prev, playerId]));
    
    // –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    const moveDuration = (newPos - currentPos) * 500 + 1000; // –í—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è + 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    
    const moveTimer = setTimeout(() => {
      setMovingPlayers(prev => {
        const newSet = new Set(prev);
        newSet.delete(playerId);
        return newSet;
      });
      
      setPlayerTokens(prev => ({
        ...prev,
        [playerId]: {
          ...prev[playerId],
          isMoving: false
        }
      }));
      

    }, moveDuration);
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => clearTimeout(moveTimer);
  }, [players]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ –∏ –¥–≤–∏–∂–µ–Ω–∏—è
  const handleDiceRoll = useCallback(() => {
    if (!isMyTurn || !currentTurn) return;
    
    
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ (1-6)
    const diceValue = Math.floor(Math.random() * 6) + 1;
    
    
    // –î–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫—É –∏–≥—Ä–æ–∫–∞
    movePlayerToken(currentTurn, diceValue);
    
    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    onRollDice?.(diceValue);
  }, [isMyTurn, currentTurn, movePlayerToken, onRollDice]);

  // –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞
  useEffect(() => {
    let interval;
    
    if ((gamePhase === 'playing' || gamePhase === 'diceRoll') && isMyTurn && turnTimer > 0) {
      interval = setInterval(() => {
        setTurnTimer(prev => {
          if (prev <= 1) {
      
            endTurn();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [gamePhase, isMyTurn, turnTimer, endTurn]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª–µ—Ç–∫–∏
  const getCellDescription = (cellType) => {
    switch (cellType) {
      case 'opportunity':
        return 'üü¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å - –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤—ã: –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –±–∏–∑–Ω–µ—Å, –∞–∫—Ü–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –º–µ–∂–¥—É –º–∞–ª–æ–π —Å–¥–µ–ª–∫–æ–π (–¥–æ $5,000) –∏–ª–∏ –±–æ–ª—å—à–æ–π —Å–¥–µ–ª–∫–æ–π (–æ—Ç $5,000).';
      case 'doodad':
        return 'üõí –í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞ - –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç $100 –¥–æ $4,000 –Ω–∞ –±—ã—Ç–æ–≤—ã–µ –Ω—É–∂–¥—ã: —á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í –∏ –ø—Ä–æ—á–µ–µ.';
      case 'charity':
        return '‚ù§Ô∏è –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ü–æ–∂–µ—Ä—Ç–≤—É–π—Ç–µ 10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ö–æ–¥–æ–≤. –ú–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.';
      case 'payday':
        return 'üí∞ PayDay - –ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É! –í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ —Å—á–µ—Ç.';
      case 'market':
        return 'üìà –†—ã–Ω–æ–∫ - –ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –±–∏–∑–Ω–µ—Å –∏–ª–∏ –∞–∫—Ü–∏–∏ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ.';
      case 'child':
        return 'üë∂ –†–µ–±–µ–Ω–æ–∫ - –†–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫! –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.';
      case 'downsized':
        return 'üí∏ –ü–æ—Ç–µ—Ä—è - –£–≤–æ–ª—å–Ω–µ–Ω–∏–µ! –û–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ 2 —Ö–æ–¥–∞ –ò–õ–ò 3 —Ä–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞. –ü—Ä–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã - –∫—Ä–µ–¥–∏—Ç –∏–ª–∏ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ.';
      case 'cashflowDay':
        return 'üíµ –î–µ–Ω—å –ü–æ—Ç–æ–∫–∞ - –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ (–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –±–∏–∑–Ω–µ—Å, –∞–∫—Ü–∏–∏).';
      case 'fastTrack':
        return 'üöÄ Fast Track - –ë—ã—Å—Ç—Ä—ã–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ! –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.';
      default:
        return 'üéØ –ò–≥—Ä–æ–≤–∞—è –∫–ª–µ—Ç–∫–∞ - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–µ.';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É
  const handleCellClick = (position, type, name, number) => {
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–ª–µ—Ç–∫–∞ "–±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞" –∏ —É –Ω–µ—ë –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if (type === 'fastTrack' && CELL_CONFIG.outerSquare[position - 25]?.data) {
      setFastTrackModal({
        open: true,
        cellData: CELL_CONFIG.outerSquare[position - 25]
      });
    } else {
      // –û–±—ã—á–Ω–∞—è –∫–ª–µ—Ç–∫–∞
      setCellDialog({
        open: true,
        cellNumber: number,
        cellName: name,
        cellType: type
      });
    }
    onCellClick?.(position, type);
  };

  // –£–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  // const handleProfessionSelect = (profession) => {
  //   setPlayerProfession(profession);
  //   setGameStarted(true);
  //   console.log('–í—ã–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è:', profession);
  // };

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
  const playerPositions = useMemo(() => {
    const positions = {};
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined
    if (players && Array.isArray(players)) {
      players.forEach(player => {
        if (player.position !== undefined) {
          positions[player.position] = {
            color: player.color || '#9C27B0',
            initial: player.username?.charAt(0) || '–ò',
            id: player.id
          };
        }
      });
    }
    
    return positions;
  }, [players]);

  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–µ—Ç–æ–∫ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  const cellPositions = useMemo(() => {
    const positions = [];
    const cellSize = 42;

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥: 24 –∫–ª–µ—Ç–∫–∏ (1-24) –ø–æ –∫—Ä—É–≥—É, —Å—Ç—Ä–æ–≥–æ –≤–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –±–æ–ª—å—à–æ–π –∫–≤–∞–¥—Ä–∞—Ç
    // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: —Ä–∞–¥–∏—É—Å = –ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ –º–∏–Ω—É—Å —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏, —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –Ω–∞ 10%
    const squareSize = 13 * (cellSize + 2); // –†–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã –∫–≤–∞–¥—Ä–∞—Ç–∞ (13√ó13 –∫–ª–µ—Ç–æ–∫)
    const innerRadius = ((squareSize / 2) - (cellSize / 2)) * 0.9; // –†–∞–¥–∏—É—Å –≤–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∫—Ä—É–≥–∞, —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –Ω–∞ 10%
    const innerCenter = 350; // –¶–µ–Ω—Ç—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    
    for (let i = 0; i < 24; i++) {
      // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ –∏ –∏–¥–µ–º –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
      const angle = (i * 15 - 90) * (Math.PI / 180); // -90 —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–µ—Ä—Ö—É
      const x = Math.cos(angle) * innerRadius;
      const y = Math.sin(angle) * innerRadius;
      
      positions.push({
        position: i,
        x: x + innerCenter - cellSize/2,
        y: y + innerCenter - cellSize/2,
        ...CELL_CONFIG.innerCircle[i % CELL_CONFIG.innerCircle.length],
        number: i + 1, // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 24
        isInner: true
      });
    }
    
    // –í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç: 56 –∫–ª–µ—Ç–æ–∫ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É (14 + 14 + 14 + 14)
    // –†–∞–∑–º–µ—â–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É —Ñ–æ–Ω–∞ 700x700
    const cellSpacing = cellSize + 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ (14x14 –∫–ª–µ—Ç–æ–∫)
    const outerSquareWidth = 14 * cellSpacing; // 14 –∫–ª–µ—Ç–æ–∫ –ø–æ —à–∏—Ä–∏–Ω–µ
    const outerSquareHeight = 14 * cellSpacing; // 14 –∫–ª–µ—Ç–æ–∫ –ø–æ –≤—ã—Å–æ—Ç–µ
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç –≤ –ø–æ–ª–µ 700x700
    const marginX = (700 - outerSquareWidth) / 2;
    const marginY = (700 - outerSquareHeight) / 2;
    
    // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (1-14): 14 –∫–ª–µ—Ç–æ–∫ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–ø–æ–¥–Ω—è–ª–∏ –≤–≤–µ—Ä—Ö –Ω–∞ 1 –∫–ª–µ—Ç–∫—É, —Ä–∞—Å—Ç—è–Ω—É–ª–∏ –Ω–∞ 15%, —Å–¥–≤–∏–Ω—É–ª–∏ –≤–ª–µ–≤–æ –Ω–∞ 17px)
    for (let i = 0; i < 14; i++) {
      positions.push({
        position: 24 + i,
        x: marginX + i * (cellSpacing * 1.15) - 42, // –†–∞—Å—Ç—è–Ω—É–ª–∏ –ø–æ —à–∏—Ä–∏–Ω–µ –Ω–∞ 15% –∏ —Å–¥–≤–∏–Ω—É–ª–∏ –≤–ª–µ–≤–æ –Ω–∞ 42px (17+15+10)
        y: marginY - cellSpacing, // –ü–æ–¥–Ω—è–ª–∏ –≤–≤–µ—Ä—Ö –Ω–∞ 1 –∫–ª–µ—Ç–∫—É–ø–∏
        ...CELL_CONFIG.outerSquare[i % CELL_CONFIG.outerSquare.length],
        number: i + 1, // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 14
        isInner: false
      });
    }
    
    // –ù–∏–∂–Ω–∏–π —Ä—è–¥ (15-28): 14 –∫–ª–µ—Ç–æ–∫ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–¥—É–±–ª–∏—Ä—É–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ –≤–Ω–∏–∑ –Ω–∞ ~700px)
    for (let i = 0; i < 14; i++) {
      positions.push({
        position: 38 + i,
        x: marginX + i * (cellSpacing * 1.15) - 42, // –¢–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ –∏ —É –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ä—è–¥–∞
        y: marginY + 700 - (cellSpacing * 2), // –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 700px –Ω–∏–∂–µ, –Ω–æ –ø–æ–¥–Ω—è–ª–∏ –≤–≤–µ—Ä—Ö –Ω–∞ 2 –∫–ª–µ—Ç–∫–∏ (1.5 + 0.5)
        ...CELL_CONFIG.outerSquare[(14 + i) % CELL_CONFIG.outerSquare.length],
        number: 40 - i, // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 40 –¥–æ 27 (—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ)
        isInner: false
      });
    }
    
    // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (40-51): 12 –∫–ª–µ—Ç–æ–∫ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (–∫–æ–ø–∏—è –ø—Ä–∞–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ –ª–µ–≤–æ–º –∫—Ä–∞—é)
    for (let i = 0; i < 12; i++) {
      positions.push({
        position: 52 + i,
        x: marginX - 42, // –ü—Ä—è–º–æ –ø–æ–¥ –∫–ª–µ—Ç–∫—É 1, —Å–¥–≤–∏–Ω—É–ª–∏ –≤–ª–µ–≤–æ –Ω–∞ 42px
        y: marginY + (i * (cellSpacing * 1.15)) + 5, // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ, —É–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –Ω–∞ 15%, —Å–¥–≤–∏–Ω—É–ª–∏ –≤–Ω–∏–∑ –Ω–∞ 5px
        ...CELL_CONFIG.outerSquare[(14 + i) % CELL_CONFIG.outerSquare.length],
        number: 52 - i, // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 52 –¥–æ 41 (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        isInner: false
      });
    }
    
    // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (15-26): 12 –∫–ª–µ—Ç–æ–∫ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (–≤ –æ–±–ª–∞—Å—Ç–∏ –∫—Ä–∞—Å–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞)
    for (let i = 0; i < 12; i++) {
      positions.push({
        position: 66 + i,
        x: marginX + 14 * (cellSpacing * 1.15) - 42 - 42 - 5 - 3, // –°–ø—Ä–∞–≤–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏, —Å–¥–≤–∏–Ω—É–ª–∏ –≤–ª–µ–≤–æ –Ω–∞ 92px (42+42+5+3)
        y: marginY + (i * (cellSpacing * 1.15)) + 5, // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ, —É–≤–µ–ª–∏—á–∏–ª–∏ –≤—ã—Å–æ—Ç—É –Ω–∞ 15%, —Å–¥–≤–∏–Ω—É–ª–∏ –≤–Ω–∏–∑ –Ω–∞ 5px (3+2)
        ...CELL_CONFIG.outerSquare[(14 + i) % CELL_CONFIG.outerSquare.length],
        number: i + 15, // –ù—É–º–µ—Ä–∞—Ü–∏—è –æ—Ç 15 –¥–æ 26
        isInner: false
      });
    }
    
    // –£–±—Ä–∞–ª–∏ –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü, –Ω–∏–∂–Ω–∏–π —Ä—è–¥ –∏ –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    // –û—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥

    return positions;
  }, []);

  return (
    <Box
      sx={{
        position: 'relative',
        width: 700, // –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        height: 700, // –†–∞–∑–º–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'visible',
        background: `
          radial-gradient(ellipse at center, rgba(0,0,0,0) 0%, rgba(0,0,0,0.8) 100%),
          radial-gradient(ellipse at center, rgba(25,25,112,0.3) 0%, rgba(0,0,0,0.9) 100%),
          linear-gradient(45deg, #000428 0%, #004e92 25%, #000428 50%, #004e92 75%, #000428 100%)
        `,
        backgroundSize: '100% 100%, 100% 100%, 200% 200%',
        animation: 'starryNight 20s ease-in-out infinite',
        '&::before': {
          content: '""',
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundImage: `
            radial-gradient(2px 2px at 20px 30px, #eee, transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 90px 40px, #fff, transparent),
            radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 160px 30px, #ddd, transparent),
            radial-gradient(2px 2px at 200px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 250px 40px, #fff, transparent),
            radial-gradient(1px 1px at 290px 80px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 320px 30px, #ddd, transparent),
            radial-gradient(2px 2px at 360px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 410px 40px, #fff, transparent),
            radial-gradient(1px 1px at 450px 80px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 480px 30px, #ddd, transparent),
            radial-gradient(2px 2px at 520px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 570px 40px, #fff, transparent),
            radial-gradient(1px 1px at 610px 80px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 640px 30px, #ddd, transparent),
            radial-gradient(2px 2px at 680px 70px, rgba(255,255,255,0.8), transparent),
            radial-gradient(2px 2px at 20px 650px, #eee, transparent),
            radial-gradient(2px 2px at 60px 690px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 100px 650px, #fff, transparent),
            radial-gradient(1px 1px at 140px 690px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 180px 650px, #ddd, transparent),
            radial-gradient(2px 2px at 220px 690px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 260px 650px, #fff, transparent),
            radial-gradient(1px 1px at 300px 690px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 340px 650px, #ddd, transparent),
            radial-gradient(2px 2px at 380px 690px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 420px 650px, #fff, transparent),
            radial-gradient(1px 1px at 460px 690px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 500px 650px, #ddd, transparent),
            radial-gradient(2px 2px at 540px 690px, rgba(255,255,255,0.8), transparent),
            radial-gradient(1px 1px at 580px 650px, #fff, transparent),
            radial-gradient(1px 1px at 620px 690px, rgba(255,255,255,0.6), transparent),
            radial-gradient(2px 2px at 660px 650px, #ddd, transparent),
            radial-gradient(2px 2px at 700px 690px, rgba(255,255,255,0.6), transparent)
          `,
          backgroundRepeat: 'repeat',
                          backgroundSize: '700px 700px',
          animation: 'twinkle 4s ease-in-out infinite alternate',
          zIndex: 0
        },
        '@keyframes diceRoll': {
          '0%': { transform: 'translate(-50%, -50%) rotate(0deg) scale(1)' },
          '25%': { transform: 'translate(-50%, -50%) rotate(90deg) scale(1.1)' },
          '50%': { transform: 'translate(-50%, -50%) rotate(180deg) scale(0.9)' },
          '75%': { transform: 'translate(-50%, -50%) rotate(270deg) scale(1.1)' },
          '100%': { transform: 'translate(-50%, -50%) rotate(360deg) scale(1)' }
        },
        '@keyframes diceResult': {
          '0%': { transform: 'translate(-50%, -50%) scale(0.5) rotate(0deg)', opacity: 0 },
          '50%': { transform: 'translate(-50%, -50%) scale(1.2) rotate(180deg)', opacity: 0.8 },
          '100%': { transform: 'translate(-50%, -50%) scale(1) rotate(360deg)', opacity: 1 }
        },
        '@keyframes fadeIn': {
          '0%': { opacity: 0, transform: 'translateY(20px)' },
          '100%': { opacity: 1, transform: 'translateY(0)' }
        },
        '@keyframes logoGlow': {
          '0%': {
            opacity: 0.6,
            transform: 'translate(-50%, -50%) scale(1)'
          },
          '100%': {
            opacity: 1,
            transform: 'translate(-50%, -50%) scale(1.1)'
          }
        },
        '@keyframes starryNight': {
          '0%, 100%': { backgroundPosition: '0% 0%, 0% 0%, 0% 0%' },
          '25%': { backgroundPosition: '0% 0%, 0% 0%, 50% 50%' },
          '50%': { backgroundPosition: '0% 0%, 0% 0%, 100% 100%' },
          '75%': { backgroundPosition: '0% 0%, 0% 0%, 50% 50%' }
        },
        '@keyframes twinkle': {
          '0%': { opacity: 0.3 },
          '100%': { opacity: 1 }
        }
      }}
    >

      {/* –°–∏—Å—Ç–µ–º–∞ —Ö–æ–¥–æ–≤ –∏ —Ç–∞–π–º–µ—Ä */}
      {gamePhase === 'diceRoll' && (
        <Box
          sx={{
            position: 'absolute',
            top: -80,
            right: 20,
            backgroundColor: '#6E4D92',
            borderRadius: 2,
            px: 2,
            py: 1,
            border: '2px solid #FFD700',
            zIndex: 30
          }}
        >
          <Typography 
            variant="body2" 
            sx={{ 
              color: '#FFD700',
              fontWeight: 'bold',
              fontSize: '0.9rem',
              mb: 1
            }}
          >
            üé≤ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
          </Typography>
          <Button
            variant="contained"
            size="small"
            onClick={rollDiceForOrder}
            sx={{
              backgroundColor: '#FFD700',
              color: '#000',
              fontWeight: 'bold',
              '&:hover': { backgroundColor: '#FFC107' }
            }}
          >
            –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
          </Button>
        </Box>
      )}

      {/* –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞ */}
      {gamePhase === 'playing' && (
        <Box
          sx={{
            position: 'absolute',
            top: -80,
            right: 20,
            backgroundColor: '#6E4D92',
            borderRadius: 2,
            px: 2,
            py: 1,
            border: '2px solid #FFD700',
            zIndex: 30
          }}
        >
          <Typography 
            variant="body2" 
            sx={{ 
              color: '#FFD700',
              fontWeight: 'bold',
              fontSize: '0.9rem',
              mb: 1
            }}
          >
            ‚è∞ –•–æ–¥ –∏–≥—Ä–æ–∫–∞ {currentPlayerIndex + 1}
          </Typography>
          <Typography
            variant="h6"
            sx={{
              color: turnTimer <= 30 ? '#f44336' : turnTimer <= 60 ? '#ff9800' : '#4caf50',
              fontWeight: 'bold',
              textAlign: 'center',
              textShadow: turnTimer <= 15 ? '0 0 10px rgba(244, 67, 54, 0.5)' : 'none',
              animation: turnTimer <= 15 ? 'pulse 1s infinite' : 'none'
            }}
          >
            {Math.floor(turnTimer / 60)}:{(turnTimer % 60).toString().padStart(2, '0')} || {diceValue > 0 ? diceValue : 'üé≤'}
          </Typography>
          {isMyTurn && (
            <Typography
              variant="body2"
              sx={{
                color: '#4caf50',
                textAlign: 'center',
                fontWeight: 'bold'
              }}
            >
              ‚è∞ –í–∞—à —Ö–æ–¥
            </Typography>
          )}
        </Box>
      )}

      {/* –°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è */}
      {gamePhase === 'waiting' && (
        <Box
          sx={{
            position: 'absolute',
            top: -80,
            right: 20,
            backgroundColor: '#6E4D92',
            borderRadius: 2,
            px: 2,
            py: 1,
            border: '2px solid #FFD700',
            zIndex: 30
          }}
        >
          <Typography 
            variant="body2" 
            sx={{ 
              color: '#FFD700',
              fontWeight: 'bold',
              fontSize: '0.9rem',
              mb: 1
            }}
          >
            ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ || {diceValue > 0 ? diceValue : 'üé≤'}
          </Typography>
          

        </Box>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ –¥–ª—è —Ö–æ–¥–∞ */}
      {gamePhase === 'playing' && isMyTurn && (
        <motion.div
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={onRollDice}
          style={{ 
            position: 'absolute',
            top: -50,
            right: 20,
            cursor: 'pointer',
            zIndex: 30
          }}
        >
          <CasinoIcon sx={{ fontSize: 32, color: '#FFD700' }} />
        </motion.div>
      )}



      {/* –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ */}

              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –ª–æ–≥–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */}
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: 260,
            height: 260,
            zIndex: 50,
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            pointerEvents: 'none'
          }}
        >
        
        {/* –°–≤–µ—Ç–ª–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–¥ –ª–æ–≥–æ—Ç–∏–ø–æ–º */}
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '120%',
            height: '120%',
            background: `
              radial-gradient(ellipse at center, 
                rgba(255, 215, 0, 0.3) 0%, 
                rgba(255, 215, 0, 0.2) 30%, 
                rgba(255, 215, 0, 0.1) 60%, 
                rgba(255, 215, 0, 0.05) 80%, 
                transparent 100%
              )
            `,
            borderRadius: '50%',
            zIndex: 50,
            filter: 'blur(8px)',
            animation: 'logoGlow 3s ease-in-out infinite alternate'
          }}
        />
        
        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–æ - —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
        <motion.div
          style={{
            position: 'relative',
            width: '100%',
            height: '100%',
            zIndex: 51,
            filter: 'drop-shadow(0 4px 8px rgba(0,0,0,0.3))',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: 'rgba(255, 255, 255, 0.01)'
          }}
          whileHover={{ 
            scale: 1.05,
            rotate: [0, -2, 2, 0]
          }}
          animate={{
            y: [0, -5, 0],
            filter: [
              'drop-shadow(0 4px 8px rgba(0,0,0,0.3))',
              'drop-shadow(0 6px 16px rgba(0,0,0,0.4))',
              'drop-shadow(0 4px 8px rgba(0,0,0,0.3))'
            ]
          }}
          transition={{
            scale: { duration: 0.3, ease: "easeInOut" },
            rotate: { duration: 0.6, ease: "easeInOut" },
            y: { duration: 4, repeat: Infinity, ease: "easeInOut" },
            filter: { duration: 4, repeat: Infinity, ease: "easeInOut" }
          }}
        >
          <img 
            src="/images/center-logo.svg" 
            alt="–ü–æ—Ç–æ–∫ –î–µ–Ω–µ–≥ Logo" 
            style={{
              width: '100%',
              height: '100%',
              objectFit: 'contain',
              pointerEvents: 'none',
              display: 'block',
              maxWidth: '100%',
              maxHeight: '100%',
              backgroundColor: 'rgba(255, 255, 255, 0.01)'
            }}
            onError={(e) => {
              console.error('‚ùå [GameField] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ:', e);
              e.target.style.display = 'none';
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback —Ç–µ–∫—Å—Ç
              const fallback = e.target.parentNode.querySelector('.logo-fallback');
              if (fallback) fallback.style.display = 'flex';
            }}
            onLoad={(e) => {
        
              // –°–∫—Ä—ã–≤–∞–µ–º fallback —Ç–µ–∫—Å—Ç
              const fallback = e.target.parentNode.querySelector('.logo-fallback');
              if (fallback) fallback.style.display = 'none';
            }}
          />
          
          {/* Fallback —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ª–æ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è */}
          <Box
            className="logo-fallback"
            sx={{
              display: 'none',
              width: '100%',
              height: '100%',
              alignItems: 'center',
              justifyContent: 'center',
              flexDirection: 'column',
              color: '#6E4D92',
              textAlign: 'center',
              position: 'absolute',
              top: 0,
              left: 0
            }}
          >
            <Typography
              variant="h3"
              sx={{
                fontWeight: 'bold',
                fontSize: '3rem',
                color: '#FFD700',
                textShadow: '0 2px 4px rgba(0,0,0,0.5)',
                mb: 1
              }}
            >
              $
            </Typography>
            <Typography
              variant="h6"
              sx={{
                fontWeight: 'bold',
                color: '#6E4D92',
                textShadow: '0 1px 2px rgba(0,0,0,0.3)'
              }}
            >
              –ü–û–¢–û–ö –î–ï–ù–ï–ì
            </Typography>
          </Box>
        </motion.div>
        
        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç - —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–æ —É–∂–µ –≤ —Ü–µ–Ω—Ç—Ä–µ */}
      </Box>

      {/* –ö–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è */}
      {cellPositions.map(({ position, x, y, type, icon, color, number, isInner }) => (
        <Box
          key={position}
          sx={{
            position: 'absolute',
            left: x,
            top: y,
            zIndex: 100
          }}
        >
          <GameCell
            position={position}
            type={type}
            icon={icon}
            color={color}
            name={type}
            number={number}
            isPlayerHere={false}
            playerColor={null}
            playerInitial={null}
            onClick={handleCellClick}
            isInner={isInner}
          />
        </Box>
      ))}

      {/* –ü—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ —É–±—Ä–∞–Ω—ã */}

      {/* –ö—É–±–∏–∫ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ GameControls */}



      {/* –°—Ç–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ - —Ä–∞–∑–º–µ—â–µ–Ω—ã –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤ —Å–µ—Ç–∫–µ 2x2 */}
      <Box sx={{
        position: 'absolute',
        top: '50%',
        left: '50%',
        transform: 'translate(-50%, -50%)',
        width: 350,
        height: 350,
        display: 'grid',
        gridTemplateColumns: '1fr 1fr',
        gridTemplateRows: '1fr 1fr',
        gap: 8,
        zIndex: 500,
        alignItems: 'center',
        justifyContent: 'center',
        placeItems: 'center'
      }}>
        {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π - Small Deal */}
        <CardDeck
          deckType="smallDeal"
          remainingCards={cardDecks.smallDeal.remaining}
          totalCards={cardDecks.smallDeal.total}
          onShuffle={handleShuffleDeck}
          isShuffling={cardDecks.smallDeal.isShuffling}
          position="top-left"
        />
        
        {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π - Big Deal */}
        <CardDeck
          deckType="bigDeal"
          remainingCards={cardDecks.bigDeal.remaining}
          totalCards={cardDecks.bigDeal.total}
          onShuffle={handleShuffleDeck}
          isShuffling={cardDecks.bigDeal.isShuffling}
          position="top-right"
        />
        
        {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π - Market */}
        <CardDeck
          deckType="market"
          remainingCards={cardDecks.market.remaining}
          totalCards={cardDecks.market.total}
          onShuffle={handleShuffleDeck}
          isShuffling={cardDecks.market.isShuffling}
          position="bottom-left"
        />
        
        {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π - Doodad */}
        <CardDeck
          deckType="doodad"
          remainingCards={cardDecks.doodad.remaining}
          totalCards={cardDecks.doodad.total}
          onShuffle={handleShuffleDeck}
          isShuffling={cardDecks.doodad.isShuffling}
          position="bottom-right"
        />
      </Box>

      {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ */}
      {players && Array.isArray(players) && players.length > 0 ? (
        players.map(player => (
          <PlayerToken
            key={player.id}
            player={player}
            position={player.position || 0}
            isMoving={player.isMoving || false}
            onMoveComplete={() => {
              // –õ–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
              // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
              // setPlayers(prev => prev.map(p => p.id === player.id ? { ...p, position: player.nextPosition } : p));
            }}
            cellPositions={cellPositions || []}
          />
        ))
      ) : (
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            zIndex: 200,
            color: '#FFFFFF',
            fontSize: '1rem',
            opacity: 0.7
          }}
        >
          –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...
        </Box>
      )}


      {/* –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–µ—Ç–∫–µ */}
      <Dialog
        open={cellDialog.open}
        onClose={() => setCellDialog({ ...cellDialog, open: false })}
        maxWidth="md"
        PaperProps={{
          sx: {
            backgroundColor: '#FFFFFF',
            borderRadius: 0,
            boxShadow: '0 20px 60px rgba(0,0,0,0.8)',
            border: '3px solid #6E4D92',
            width: 500,
            height: 500,
            maxWidth: 500,
            maxHeight: 500,
            display: 'flex',
            flexDirection: 'column'
          }
        }}
      >
        <DialogTitle sx={{ 
          backgroundColor: '#6E4D92', 
          color: 'white', 
          textAlign: 'center',
          fontSize: '1.5rem',
          fontWeight: 'bold',
          py: 2
        }}>
          üéØ –ö–ª–µ—Ç–∫–∞ {cellDialog.cellNumber}
        </DialogTitle>
        <DialogContent sx={{ backgroundColor: '#FFFFFF', color: '#333333', py: 3 }}>
          <Box sx={{ textAlign: 'center' }}>
            <Typography variant="h4" sx={{ mb: 3, fontWeight: 'bold', color: '#2F1B40' }}>
              {cellDialog.cellName}
            </Typography>
            <Typography variant="h6" sx={{ mb: 2, color: '#6E4D92', fontWeight: 'bold' }}>
              –¢–∏–ø: {cellDialog.cellType}
            </Typography>
            <Box sx={{ 
              backgroundColor: '#F5F5F5', 
              borderRadius: 2, 
              p: 2, 
              border: '2px solid #E0E0E0',
              mt: 2
            }}>
              <Typography variant="body1" sx={{ color: '#333333', lineHeight: 1.6, fontSize: '1.1rem' }}>
                {getCellDescription(cellDialog.cellType)}
              </Typography>
            </Box>
          </Box>
        </DialogContent>
        <DialogActions sx={{ backgroundColor: '#F5F5F5', justifyContent: 'center', pb: 3, px: 3 }}>
          <Button 
            onClick={() => setCellDialog({ ...cellDialog, open: false })}
            variant="contained"
            size="large"
            sx={{ 
              backgroundColor: '#6E4D92',
              color: 'white',
              fontSize: '1.1rem',
              fontWeight: 'bold',
              px: 4,
              py: 1.5,
              borderRadius: 2,
              '&:hover': { 
                backgroundColor: '#8E6DB2',
                transform: 'translateY(-2px)',
                boxShadow: '0 8px 25px rgba(110,77,146,0.4)'
              },
              transition: 'all 0.3s ease'
            }}
          >
            –ó–ê–ö–†–´–¢–¨
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª "–±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞" (Fast Track) */}
      <FastTrackCellModal
        open={fastTrackModal.open}
        onClose={() => setFastTrackModal({ ...fastTrackModal, open: false })}
        cellData={fastTrackModal.cellData}
      />

      {/* –ö–Ω–æ–ø–∫–∞ "–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫" —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –º–µ–Ω—é GameControls */}

      {/* –ê–Ω–∏–º–∞—Ü–∏—è –∫—É–±–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–º –º–µ–Ω—é GameControls */}

      {/* –£–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
    </Box>
  );
};

GameField.displayName = 'GameField';
GameCell.displayName = 'GameCell';

export default GameField;
