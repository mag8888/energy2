import React from 'react';
import { render, screen, fireEvent, act } from '@testing-library/react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import GameControls from '../components/GameControls';

// –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –¥–ª—è Material-UI
const theme = createTheme();

// –ú–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockOnBankClick = jest.fn();
const mockOnProfessionClick = jest.fn();
const mockOnFinancialFreedomClick = jest.fn();
const mockOnAssetsClick = jest.fn();
const mockOnExitClick = jest.fn();
const mockOnNextPlayer = jest.fn();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const mockPlayers = [
  { id: '1', username: 'Player1', profession: 'Engineer', balance: 5000 },
  { id: '2', username: 'Player2', profession: 'Doctor', balance: 8000 },
  { id: '3', username: 'Player3', profession: 'Teacher', balance: 3000 },
  { id: '4', username: 'Player4', profession: 'Lawyer', balance: 12000 }
];

const mockPlayerProfession = {
  name: 'Engineer',
  salary: 5000,
  savings: 1000,
  expenses: 3000,
  cashFlow: 2000
};

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å —Ç–µ–º–æ–π
const renderWithTheme = (component) => {
  return render(
    <ThemeProvider theme={theme}>
      {component}
    </ThemeProvider>
  );
};

describe('GameControls Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤', () => {
    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
      expect(screen.getByText('Player1')).toBeInTheDocument();
      expect(screen.getByText('Player2')).toBeInTheDocument();
      expect(screen.getByText('Player3')).toBeInTheDocument();
      expect(screen.getByText('Player4')).toBeInTheDocument();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      expect(screen.getByText('üéØ –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤')).toBeInTheDocument();
    });

    test('–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="2"
          isMyTurn={false}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Player2 (—Ç–µ–∫—É—â–∏–π —Ö–æ–¥) –ø–æ–¥—Å–≤–µ—á–µ–Ω
      const player2Element = screen.getByText('Player2').closest('div');
      expect(player2Element).toHaveStyle({
        border: '2px solid #FFD700',
        backgroundColor: 'rgba(255, 215, 0, 0.3)'
      });
    });

    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
      expect(screen.getByText('1')).toBeInTheDocument();
      expect(screen.getByText('2')).toBeInTheDocument();
      expect(screen.getByText('3')).toBeInTheDocument();
      expect(screen.getByText('4')).toBeInTheDocument();
    });
  });

  describe('–¢–∞–π–º–µ—Ä —Ö–æ–¥–∞', () => {
    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (2:00)
      expect(screen.getByText('2:00')).toBeInTheDocument();
    });

    test('–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–∞–π–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏', () => {
      const { rerender } = renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è 2 –º–∏–Ω—É—Ç
      let timerElement = screen.getByText('2:00');
      expect(timerElement).toHaveStyle({ color: '#4caf50' });

      // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è 1 –º–∏–Ω—É—Ç—ã
      rerender(
        <ThemeProvider theme={theme}>
          <GameControls
            players={mockPlayers}
            currentTurn="1"
            isMyTurn={true}
            turnTimer={60}
            diceValue={0}
            playerProfession={mockPlayerProfession}
            playerBalance={5000}
            onBankClick={mockOnBankClick}
            onProfessionClick={mockOnProfessionClick}
            onFinancialFreedomClick={mockOnFinancialFreedomClick}
            onAssetsClick={mockOnAssetsClick}
            onExitClick={mockOnExitClick}
            onNextPlayer={mockOnNextPlayer}
          />
        </ThemeProvider>
      );
      
      timerElement = screen.getByText('1:00');
      expect(timerElement).toHaveStyle({ color: '#ffeb3b' });

      // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è 30 —Å–µ–∫—É–Ω–¥
      rerender(
        <ThemeProvider theme={theme}>
          <GameControls
            players={mockPlayers}
            currentTurn="1"
            isMyTurn={true}
            turnTimer={30}
            diceValue={0}
            playerProfession={mockPlayerProfession}
            playerBalance={5000}
            onBankClick={mockOnBankClick}
            onProfessionClick={mockOnProfessionClick}
            onFinancialFreedomClick={mockOnFinancialFreedomClick}
            onAssetsClick={mockOnAssetsClick}
            onExitClick={mockOnExitClick}
            onNextPlayer={mockOnNextPlayer}
          />
        </ThemeProvider>
      );
      
      timerElement = screen.getByText('0:30');
      expect(timerElement).toHaveStyle({ color: '#f44336' });

      // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è 15 —Å–µ–∫—É–Ω–¥
      rerender(
        <ThemeProvider theme={theme}>
          <GameControls
            players={mockPlayers}
            currentTurn="1"
            isMyTurn={true}
            turnTimer={15}
            diceValue={0}
            playerProfession={mockPlayerProfession}
            playerBalance={5000}
            onBankClick={mockOnBankClick}
            onProfessionClick={mockOnProfessionClick}
            onFinancialFreedomClick={mockOnFinancialFreedomClick}
            onAssetsClick={mockOnAssetsClick}
            onExitClick={mockOnExitClick}
            onNextPlayer={mockOnNextPlayer}
          />
        </ThemeProvider>
      );
      
      timerElement = screen.getByText('0:15');
      expect(timerElement).toHaveStyle({ color: '#f44336' });
    });

    test('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç–∞–π–º–µ—Ä–∞', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={60}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      const progressBar = document.querySelector('[style*="width: 50%"]');
      expect(progressBar).toBeInTheDocument();
    });
  });

  describe('–ö–Ω–æ–ø–∫–∞ "–ü–ï–†–ï–•–û–î –•–û–î–ê"', () => {
    test('–≤—ã–∑—ã–≤–∞–µ—Ç onNextPlayer –ø—Ä–∏ –∫–ª–∏–∫–µ', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      const nextPlayerButton = screen.getByText('–ü–ï–†–ï–•–û–î –•–û–î–ê');
      expect(nextPlayerButton).toBeInTheDocument();

      fireEvent.click(nextPlayerButton);
      expect(mockOnNextPlayer).toHaveBeenCalledTimes(1);
    });
  });

  describe('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É–±–∏–∫–∞', () => {
    test('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–±–∏–∫–∞ –∫–æ–≥–¥–∞ –æ–Ω–æ –±–æ–ª—å—à–µ 0', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={6}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      expect(screen.getByText('6')).toBeInTheDocument();
      expect(screen.getByText('üé≤')).toBeInTheDocument();
    });

    test('–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É–±–∏–∫ –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 0', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="1"
          isMyTurn={true}
          turnTimer={120}
          diceValue={0}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      expect(screen.queryByText('üé≤')).not.toBeInTheDocument();
    });
  });

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', () => {
    test('–≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
      renderWithTheme(
        <GameControls
          players={mockPlayers}
          currentTurn="3"
          isMyTurn={false}
          turnTimer={45}
          diceValue={4}
          playerProfession={mockPlayerProfession}
          playerBalance={5000}
          onBankClick={mockOnBankClick}
          onProfessionClick={mockOnProfessionClick}
          onFinancialFreedomClick={mockOnFinancialFreedomClick}
          onAssetsClick={mockOnAssetsClick}
          onExitClick={mockOnExitClick}
          onNextPlayer={mockOnNextPlayer}
        />
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      expect(screen.getByText('üéØ –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤')).toBeInTheDocument();
      expect(screen.getByText('0:45')).toBeInTheDocument();
      expect(screen.getByText('4')).toBeInTheDocument();
      expect(screen.getByText('Player1')).toBeInTheDocument();
      expect(screen.getByText('Player2')).toBeInTheDocument();
      expect(screen.getByText('Player3')).toBeInTheDocument();
      expect(screen.getByText('Player4')).toBeInTheDocument();
      expect(screen.getByText('–ü–ï–†–ï–•–û–î –•–û–î–ê')).toBeInTheDocument();
      expect(screen.getByText('–ë–ê–ù–ö')).toBeInTheDocument();
    });
  });
});
