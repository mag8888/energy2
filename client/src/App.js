import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';
import SimpleAuth from './components/SimpleAuth';
import SimpleRoomSelection from './components/SimpleRoomSelection';
import RoomSetupWrapper from './components/RoomSetupWrapper';
import GameBoardWrapper from './components/GameBoardWrapper';
import RatingsPage from './components/RatingsPage';
import { useLogout } from './hooks/useLogout';
import './styles/global-fixes.css';
import './websocket-fix.js';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useNavigate
function AppContent() {
  const navigate = useNavigate();
  const [currentUser, setCurrentUser] = useState(null);
  const [currentRoom, setCurrentRoom] = useState(null);
  const { logout } = useLogout();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserRegister = (userData) => {
    console.log('üîÑ [App] User registered:', userData);
    setCurrentUser(userData);
    navigate('/rooms');
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserLogin = (userData) => {
    console.log('üîÑ [App] User logged in:', userData);
    setCurrentUser(userData);
    navigate('/rooms');
  };

  const handleRoomSetup = (roomData) => {
    console.log('üîÑ [App] Room setup completed:', roomData);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentRoom —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const roomInfo = {
      roomId: roomData.roomId || roomData.id,
      displayName: roomData.displayName,
      maxPlayers: roomData.maxPlayers || 2,
      status: roomData.status || 'waiting'
    };
    console.log('üîÑ [App] Setting currentRoom from setup:', roomInfo);
    setCurrentRoom(roomInfo);
    navigate(`/room/${roomInfo.roomId}`);
  };

  const handleRoomSelect = (roomData) => {
    console.log('üîÑ [App] Room selected:', roomData);
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º currentRoom —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    const roomInfo = {
      roomId: roomData.roomId || roomData.id,
      displayName: roomData.displayName,
      maxPlayers: roomData.maxPlayers || 2,
      status: roomData.status || 'waiting'
    };
    console.log('üîÑ [App] Setting currentRoom:', roomInfo);
    setCurrentRoom(roomInfo);
    navigate(`/room/${roomInfo.roomId}`);
  };

  const handleExitGame = () => {
    console.log('üîÑ [App] Exiting game');
    setCurrentRoom(null);
    navigate('/rooms');
  };

  const handleLogout = () => {
    console.log('üîÑ [App] Logging out');
    setCurrentUser(null);
    setCurrentRoom(null);
    logout();
    navigate('/');
  };

  return (
    <div className="App">
      <Routes>
        {/* –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–≤—Ö–æ–¥ */}
        <Route 
          path="/" 
          element={
            currentUser ? (
              <Navigate to="/rooms" replace />
            ) : (
              <SimpleAuth 
                onRegister={handleUserRegister}
                onLogin={handleUserLogin}
              />
            )
          } 
        />

        {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç */}
        <Route 
          path="/rooms" 
          element={
            currentUser ? (
              <SimpleRoomSelection 
                playerData={currentUser}
                onRoomSelect={handleRoomSelect}
                onLogout={handleLogout}
              />
            ) : (
              <Navigate to="/" replace />
            )
          } 
        />

        {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã */}
        <Route 
          path="/room/:roomId" 
          element={
            currentUser && currentRoom ? (
              <RoomSetupWrapper 
                playerData={currentUser}
                roomId={currentRoom.roomId}
                onExitGame={handleExitGame}
              />
            ) : (
              <Navigate to="/" replace />
            )
          } 
        />

        {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä–æ–≤–æ–π –¥–æ—Å–∫–∏ */}
        <Route 
          path="/game/:roomId" 
          element={
            currentUser ? (
              <GameBoardWrapper 
                playerData={currentUser}
                onExitGame={handleExitGame}
              />
            ) : (
              <Navigate to="/" replace />
            )
          } 
        />

        {/* –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ */}
        <Route 
          path="/ratings" 
          element={
            currentUser ? (
              <RatingsPage 
                playerData={currentUser}
                onBack={() => navigate('/rooms')}
              />
            ) : (
              <Navigate to="/" replace />
            )
          } 
        />

        {/* –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </div>
  );
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function App() {
  return (
    <Router>
      <AppContent />
    </Router>
  );
}

export default App;
