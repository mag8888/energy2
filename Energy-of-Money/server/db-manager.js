#!/usr/bin/env node

const GameDatabase = require('./database');

class DatabaseManager {
  constructor() {
    this.db = new GameDatabase();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
  showStats() {
    console.log('\nüìä Database Statistics:');
    console.log('========================');
    
    try {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
      const users = this.db.getAllUsers();
      console.log(`üë• Users: ${users.length}`);
      
      // –ö–æ–º–Ω–∞—Ç—ã
      const rooms = this.db.getAllRooms();
      console.log(`üè† Rooms: ${rooms.length}`);
      
      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
      const activeGames = rooms.filter(r => r.status === 'determining_order' || r.status === 'playing');
      console.log(`üéÆ Active Games: ${activeGames.length}`);
      
      console.log('\nüìã Recent Users:');
      users.slice(0, 5).forEach(user => {
        console.log(`  - ${user.username} (${user.email}) - ${user.createdAt}`);
      });
      
      console.log('\nüè† Recent Rooms:');
      rooms.slice(0, 5).forEach(room => {
        console.log(`  - ${room.displayName} (${room.status}) - ${room.createdAt}`);
      });
      
    } catch (error) {
      console.error('‚ùå Error getting stats:', error.message);
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  clearAll() {
    console.log('\nüóëÔ∏è Clearing all data...');
    
    try {
      this.db.db.exec('DELETE FROM game_moves');
      this.db.db.exec('DELETE FROM games');
      this.db.db.exec('DELETE FROM room_players');
      this.db.db.exec('DELETE FROM rooms');
      this.db.db.exec('DELETE FROM users');
      
      console.log('‚úÖ All data cleared successfully');
    } catch (error) {
      console.error('‚ùå Error clearing data:', error.message);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
  exportData() {
    console.log('\nüì§ Exporting data...');
    
    try {
      const users = this.db.getAllUsers();
      const rooms = this.db.getAllRooms();
      
      const exportData = {
        timestamp: new Date().toISOString(),
        users: users,
        rooms: rooms
      };
      
      const fs = require('fs');
      const exportPath = `./db-export-${Date.now()}.json`;
      fs.writeFileSync(exportPath, JSON.stringify(exportData, null, 2));
      
      console.log(`‚úÖ Data exported to: ${exportPath}`);
      console.log(`üìä Exported ${users.length} users and ${rooms.length} rooms`);
      
    } catch (error) {
      console.error('‚ùå Error exporting data:', error.message);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
  showHelp() {
    console.log(`
üóÑÔ∏è Database Manager - Energy of Money Game

Usage: node db-manager.js [command]

Commands:
  stats     - Show database statistics
  clear     - Clear all data (DANGEROUS!)
  export    - Export all data to JSON file
  help      - Show this help message

Examples:
  node db-manager.js stats
  node db-manager.js export
  node db-manager.js clear
`);
  }

  // –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  run() {
    const command = process.argv[2] || 'stats';
    
    switch (command) {
      case 'stats':
        this.showStats();
        break;
      case 'clear':
        this.clearAll();
        break;
      case 'export':
        this.exportData();
        break;
      case 'help':
      default:
        this.showHelp();
        break;
    }
    
    this.db.close();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
if (require.main === module) {
  const manager = new DatabaseManager();
  manager.run();
}

module.exports = DatabaseManager;
