import React, { useState, useEffect } from 'react';
import { Box, Typography, Avatar, Button } from '@mui/material';
import CasinoIcon from '@mui/icons-material/Casino';
import AttachMoneyIcon from '@mui/icons-material/AttachMoney';
import HomeIcon from '@mui/icons-material/Home';
import GavelIcon from '@mui/icons-material/Gavel';
import LocalCafeIcon from '@mui/icons-material/LocalCafe';
import SpaIcon from '@mui/icons-material/Spa';
import PhoneAndroidIcon from '@mui/icons-material/PhoneAndroid';
import CampaignIcon from '@mui/icons-material/Campaign';
import WarningIcon from '@mui/icons-material/Warning';
import HotelIcon from '@mui/icons-material/Hotel';
import LandscapeIcon from '@mui/icons-material/Landscape';
import RestaurantIcon from '@mui/icons-material/Restaurant';
import FlightIcon from '@mui/icons-material/Flight';
import FlightTakeoffIcon from '@mui/icons-material/FlightTakeoff';
import VolunteerActivismIcon from '@mui/icons-material/VolunteerActivism';
import Snackbar from '@mui/material/Snackbar';
import Alert from '@mui/material/Alert';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
const BOARD_CONFIG = {
  cells: [
    {
      id: 1,
      type: 'money',
      name: '–î–µ–Ω—å–≥–∏',
      description: '–í–∞–º –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–æ—Ö–æ–¥ –æ—Ç –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π',
      icon: <AttachMoneyIcon />,
      color: '#FFD700',
      action: 'income'
    },
    {
      id: 2,
      type: 'dream',
      name: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã',
      description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º —Å —Å–∞–¥–æ–º –∏ –±–∞—Å—Å–µ–π–Ω–æ–º',
      cost: 100000,
      icon: <HomeIcon />,
      color: '#87CEEB',
      action: 'dream'
    },
    {
      id: 3,
      type: 'business',
      name: '–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
      description: '–ö–æ—Ñ–µ–π–Ω—è —Å –≤—ã—Å–æ–∫–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º',
      cost: 100000,
      income: 3000,
      icon: <LocalCafeIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 4,
      type: 'loss',
      name: '–ü–æ—Ç–µ—Ä—è –∞—É–¥–∏—Ç',
      description: '–ù–∞–ª–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
      penalty: -0.5,
      icon: <GavelIcon />,
      color: '#FFB6C1',
      action: 'penalty'
    },
    {
      id: 5,
      type: 'business',
      name: '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–ø–∞',
      description: '–ü—Ä–µ–º–∏—É–º —Å–ø–∞-—Ü–µ–Ω—Ç—Ä',
      cost: 270000,
      income: 5000,
      icon: <SpaIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 6,
      type: 'dream',
      name: '–ü–æ—Å–µ—Ç–∏—Ç—å –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É',
      description: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞ –∫—Ä–∞–π —Å–≤–µ—Ç–∞',
      cost: 150000,
      icon: <FlightIcon />,
      color: '#87CEEB',
      action: 'dream'
    },
    {
      id: 7,
      type: 'business',
      name: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–¥–ø–∏—Å–∫–∞)',
      description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π',
      cost: 420000,
      income: 10000,
      icon: <PhoneAndroidIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 8,
      type: 'charity',
      name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      description: '–ü–æ–º–æ—â—å –Ω—É–∂–¥–∞—é—â–∏–º—Å—è',
      icon: <VolunteerActivismIcon />,
      color: '#FF69B4',
      action: 'charity'
    },
    {
      id: 9,
      type: 'business',
      name: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
      description: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
      cost: 160000,
      income: 4000,
      icon: <CampaignIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 10,
      type: 'loss',
      name: '–ö—Ä–∞–∂–∞ 100% –Ω–∞–ª–∏—á–Ω—ã—Ö',
      description: '–ü–æ—Ç–µ—Ä—è –≤—Å–µ—Ö –Ω–∞–ª–∏—á–Ω—ã—Ö –¥–µ–Ω–µ–≥',
      penalty: -1,
      icon: <WarningIcon />,
      color: '#FFB6C1',
      action: 'penalty'
    },
    {
      id: 11,
      type: 'business',
      name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å/–±—É—Ç–∏–∫-–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞',
      description: '–≠–ª–∏—Ç–Ω–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞',
      cost: 200000,
      income: 5000,
      icon: <HotelIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 12,
      type: 'dream',
      name: '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ –≤—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã –º–∏—Ä–∞',
      description: '–ê–ª—å–ø–∏–Ω–∏—Å—Ç—Å–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
      cost: 500000,
      icon: <LandscapeIcon />,
      color: '#87CEEB',
      action: 'dream'
    },
    {
      id: 13,
      type: 'business',
      name: '–§—Ä–∞–Ω—à–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
      description: '–†–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–µ—Ç–∏',
      cost: 320000,
      income: 8000,
      icon: <RestaurantIcon />,
      color: '#90EE90',
      action: 'business'
    },
    {
      id: 14,
      type: 'money',
      name: '–û–±—ä–µ—Ö–∞—Ç—å 100 —Å—Ç—Ä–∞–Ω',
      description: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É',
      cost: 500000,
      icon: <FlightTakeoffIcon />,
      color: '#FFD700',
      action: 'money'
    }
  ]
};

const GameBoard = ({ roomId, socket, user, onExit }) => {
  const [players, setPlayers] = useState([]);
  const [currentTurn, setCurrentTurn] = useState(null);
  const [timer, setTimer] = useState(0);
  const [modal, setModal] = useState(null);
  const [turnBanner, setTurnBanner] = useState(null);
  const [isRolling, setIsRolling] = useState(false);
  const [displayDice, setDisplayDice] = useState(0);
  const [displayD1, setDisplayD1] = useState(0);
  const [displayD2, setDisplayD2] = useState(0);

  const [toast, setToast] = useState({ open: false, message: '', severity: 'success' });
  const [canEndTurn, setCanEndTurn] = useState(false);
  const [gameStarted, setGameStarted] = useState(false);

  useEffect(() => {
    if (socket) {
      // –°–ª—É—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
      socket.on('game_started', ({ room }) => {
        setGameStarted(true);
        setPlayers(room.players || []);
        setCurrentTurn(room.players?.[0]?.id || null);
        showToast('üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', 'success');
      });

      socket.on('player_updated', ({ player, room }) => {
        setPlayers(room.players || []);
      });

      socket.on('turn_started', ({ playerId, duration }) => {
        setCurrentTurn(playerId);
        setTimer(duration || 120);
        if (playerId === user?.id) {
          setTurnBanner({ text: 'üéØ –í–∞—à —Ö–æ–¥!', color: 'success' });
        } else {
          const player = players.find(p => p.id === playerId);
          setTurnBanner({ text: `üéØ –•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${player?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`, color: 'info' });
        }
      });

      socket.on('dice_rolled', ({ playerId, dice1, dice2, total }) => {
        if (playerId === user?.id) {
          setDisplayD1(dice1);
          setDisplayD2(dice2);
          setDisplayDice(total);
          setIsRolling(false);
          movePlayer(user.id, total);
        }
      });

      socket.on('cell_event', ({ playerId, cellId, event }) => {
        const cell = BOARD_CONFIG.cells.find(c => c.id === cellId);
        if (cell) {
          setModal({ cell, event, playerId });
        }
      });

      socket.on('turn_ended', ({ playerId }) => {
        if (playerId === user?.id) {
          setCanEndTurn(false);
        }
      });
    }

    return () => {
      if (socket) {
        socket.off('game_started');
        socket.off('player_updated');
        socket.off('turn_started');
        socket.off('dice_rolled');
        socket.off('cell_event');
        socket.off('turn_ended');
      }
    };
  }, [socket, user, players]);

  const showToast = (message, severity = 'success') => {
    setToast({ open: true, message, severity });
  };

  const handleRollDice = () => {
    if (!isMyTurn() || isRolling) return;
    
    setIsRolling(true);
    socket.emit('roll_dice', { roomId, playerId: user.id });
  };

  const isMyTurn = () => {
    return currentTurn === user?.id;
  };

  const movePlayer = (playerId, steps) => {
    const player = players.find(p => p.id === playerId);
    if (!player) return;

    let currentPos = player.position || 0;
    
    const moveStep = () => {
      if (steps > 0) {
        currentPos = (currentPos + 1) % BOARD_CONFIG.cells.length;
        steps--;
        setTimeout(moveStep, 500);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–ª–µ—Ç–∫–∏
        socket.emit('player_moved', { roomId, playerId, cellId: currentPos + 1 });
      }
    };

    moveStep();
  };

  const handleEndTurn = () => {
    if (!canEndTurn) return;
    
    socket.emit('end_turn', { roomId, playerId: user.id });
    setCanEndTurn(false);
  };

  const handleCellAction = (cell) => {
    switch (cell.action) {
      case 'business':
        if (cell.cost && cell.cost > (user?.balance || 0)) {
          showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: $${cell.cost}`, 'error');
        } else {
          // –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞
          socket.emit('buy_business', { roomId, playerId: user.id, cellId: cell.id });
        }
        break;
      case 'dream':
        if (cell.cost && cell.cost > (user?.balance || 0)) {
          showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –º–µ—á—Ç—ã: $${cell.cost}`, 'error');
        } else {
          // –ü–æ–∫—É–ø–∫–∞ –º–µ—á—Ç—ã
          socket.emit('buy_dream', { roomId, playerId: user.id, cellId: cell.id });
        }
        break;
      case 'penalty':
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞
        socket.emit('apply_penalty', { roomId, playerId: user.id, cellId: cell.id, penalty: cell.penalty });
        break;
      case 'charity':
        // –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        socket.emit('charity_action', { roomId, playerId: user.id, cellId: cell.id });
        break;
      default:
        break;
    }
    setModal(null);
  };

  const renderCell = (cell, index) => {
    const playerAtCell = players.find(p => (p.position || 0) === index);
    
    return (
      <Box
        key={cell.id}
        sx={{
          position: 'relative',
          width: 120,
          height: 120,
          border: '2px solid #333',
          borderRadius: '8px',
          backgroundColor: cell.color,
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          cursor: 'pointer',
          '&:hover': { opacity: 0.8 },
          p: 1,
          textAlign: 'center'
        }}
        onClick={() => setModal({ cell, event: null, playerId: null })}
      >
        <Box sx={{ fontSize: '24px', mb: 1 }}>
          {cell.icon}
        </Box>
        <Typography variant="caption" sx={{ fontSize: '10px', fontWeight: 'bold' }}>
          {cell.name}
        </Typography>
        
        {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–µ */}
        {playerAtCell && (
          <Box
            sx={{
              position: 'absolute',
              top: -10,
              right: -10,
              width: 20,
              height: 20,
              borderRadius: '50%',
              backgroundColor: '#FF6B6B',
              border: '2px solid white',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '12px',
              fontWeight: 'bold',
              color: 'white'
            }}
          >
            {playerAtCell.username?.charAt(0) || '?'}
          </Box>
        )}
      </Box>
    );
  };

  const renderGameControls = () => (
    <Box sx={{ p: 2, bgcolor: 'background.paper', borderRadius: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
      </Typography>
      
      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
        <Button
          variant="contained"
          startIcon={<CasinoIcon />}
          onClick={handleRollDice}
          disabled={!isMyTurn() || isRolling}
          color="primary"
        >
          {isRolling ? '–ë—Ä–æ—Å–∞—é...' : '–ë—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫'}
        </Button>
        
        <Button
          variant="outlined"
          onClick={handleEndTurn}
          disabled={!canEndTurn}
          color="secondary"
        >
          –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
        </Button>
      </Box>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–±–∏–∫–∞—Ö */}
      {displayDice > 0 && (
        <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
          <Typography variant="body2">–ö—É–±–∏–∫–∏:</Typography>
          <Box sx={{ display: 'flex', gap: 0.5 }}>
            <Box sx={{ width: 30, height: 30, bgcolor: 'white', border: '1px solid #ccc', borderRadius: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              {displayD1}
            </Box>
            <Box sx={{ width: 30, height: 30, bgcolor: 'white', border: '1px solid #ccc', borderRadius: 1, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
              {displayD2}
            </Box>
          </Box>
          <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
            = {displayDice}
          </Typography>
        </Box>
      )}
    </Box>
  );

  const renderPlayers = () => (
    <Box sx={{ p: 2, bgcolor: 'background.paper', borderRadius: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        üë• –ò–≥—Ä–æ–∫–∏
      </Typography>
      
      <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        {players.map((player) => (
          <Box
            key={player.id}
            sx={{
              p: 2,
              border: '2px solid',
              borderColor: player.id === currentTurn ? '#4CAF50' : '#ddd',
              borderRadius: 2,
              bgcolor: player.id === currentTurn ? '#E8F5E8' : 'background.paper',
              minWidth: 150
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
              <Avatar sx={{ mr: 1, bgcolor: player.id === currentTurn ? '#4CAF50' : '#2196F3' }}>
                {player.username?.charAt(0) || '?'}
              </Avatar>
              <Typography variant="body2" sx={{ fontWeight: 'bold' }}>
                {player.username}
                {player.id === currentTurn && ' (–•–æ–¥)'}
              </Typography>
            </Box>
            
            <Typography variant="caption" display="block">
              üí∞ –ë–∞–ª–∞–Ω—Å: ${player.balance?.toLocaleString() || 0}
            </Typography>
            
            <Typography variant="caption" display="block">
              üéØ –ü–æ–∑–∏—Ü–∏—è: {player.position || 0}
            </Typography>
            
            {player.profession && (
              <Typography variant="caption" display="block">
                üíº {player.profession.name}
              </Typography>
            )}
            
            {player.dream && (
              <Typography variant="caption" display="block">
                üí≠ {player.dream.name}
              </Typography>
            )}
          </Box>
        ))}
      </Box>
    </Box>
  );

  if (!gameStarted) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="h5" gutterBottom>
          ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...
        </Typography>
        <Typography variant="body1" color="text.secondary">
          –•–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3, maxWidth: 1400, mx: 'auto' }}>
      <Typography variant="h4" gutterBottom align="center">
        üéÆ Energy of Money - –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
      </Typography>

      {/* –ë–∞–Ω–Ω–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ö–æ–¥–∞ */}
      {turnBanner && (
        <Box
          sx={{
            p: 2,
            bgcolor: `${turnBanner.color}.main`,
            color: 'white',
            borderRadius: 2,
            mb: 2,
            textAlign: 'center'
          }}
        >
          <Typography variant="h6">
            {turnBanner.text}
          </Typography>
          {timer > 0 && (
            <Typography variant="body2">
              ‚è±Ô∏è –í—Ä–µ–º—è: {Math.floor(timer / 60)}:{(timer % 60).toString().padStart(2, '0')}
            </Typography>
          )}
        </Box>
      )}

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π */}
      {renderGameControls()}

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <Box sx={{ mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          üéØ –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        </Typography>
        
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: 'repeat(7, 1fr)',
            gap: 1,
            maxWidth: 'fit-content',
            mx: 'auto'
          }}
        >
          {BOARD_CONFIG.cells.map((cell, index) => renderCell(cell, index))}
        </Box>
      </Box>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö */}
      {renderPlayers()}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–ª–µ—Ç–∫–∏ */}
      {modal && (
        <Box
          sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            bgcolor: 'rgba(0,0,0,0.5)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            zIndex: 1000
          }}
          onClick={() => setModal(null)}
        >
          <Box
            sx={{
              bgcolor: 'background.paper',
              p: 3,
              borderRadius: 2,
              maxWidth: 400,
              textAlign: 'center'
            }}
            onClick={(e) => e.stopPropagation()}
          >
            <Box sx={{ fontSize: '48px', mb: 2, color: modal.cell.color }}>
              {modal.cell.icon}
            </Box>
            
            <Typography variant="h6" gutterBottom>
              {modal.cell.name}
            </Typography>
            
            <Typography variant="body2" sx={{ mb: 2 }}>
              {modal.cell.description}
            </Typography>
            
            {modal.cell.cost && (
              <Typography variant="body2" sx={{ mb: 1, color: 'error.main' }}>
                üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${modal.cell.cost.toLocaleString()}
              </Typography>
            )}
            
            {modal.cell.income && (
              <Typography variant="body2" sx={{ mb: 1, color: 'success.main' }}>
                üíµ –î–æ—Ö–æ–¥: ${modal.cell.income.toLocaleString()}/–º–µ—Å
              </Typography>
            )}
            
            {modal.cell.penalty && (
              <Typography variant="body2" sx={{ mb: 1, color: 'error.main' }}>
                ‚ùå –®—Ç—Ä–∞—Ñ: {modal.cell.penalty > 0 ? '+' : ''}{modal.cell.penalty * 100}%
              </Typography>
            )}
            
            <Button
              variant="contained"
              onClick={() => handleCellAction(modal.cell)}
              sx={{ mt: 2 }}
            >
              {modal.cell.action === 'business' || modal.cell.action === 'dream' ? '–ö—É–ø–∏—Ç—å' : 'OK'}
            </Button>
          </Box>
        </Box>
      )}

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={toast.open}
        autoHideDuration={4000}
        onClose={() => setToast({ ...toast, open: false })}
      >
        <Alert severity={toast.severity} onClose={() => setToast({ ...toast, open: false })}>
          {toast.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default GameBoard;
