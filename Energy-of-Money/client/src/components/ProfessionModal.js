import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  Card,
  CardContent,
  Grid,
  Chip,
  Alert,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Paper,
  Divider,
  IconButton
} from '@mui/material';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  AttachMoney, 
  TrendingUp, 
  CreditCard, 
  CheckCircle, 
  Warning,
  Work as WorkIcon,
  Star as StarIcon,
  EmojiEvents as TrophyIcon,
  Close as CloseIcon,
  ArrowForward as ArrowForwardIcon
} from '@mui/icons-material';

const PROFESSIONS = [
  {
    id: 'engineer',
    name: '–ò–Ω–∂–µ–Ω–µ—Ä',
    salary: 5000,
    expenses: 2000,
    passiveIncome: 0,
    description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ö–æ—Ä–æ—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π',
    icon: '‚öôÔ∏è',
    color: '#2196f3',
    difficulty: '–°—Ä–µ–¥–Ω—è—è',
    growth: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π'
  },
  {
    id: 'doctor',
    name: '–í—Ä–∞—á',
    salary: 8000,
    expenses: 3000,
    passiveIncome: 0,
    description: '–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏',
    icon: 'üë®‚Äç‚öïÔ∏è',
    color: '#f44336',
    difficulty: '–í—ã—Å–æ–∫–∞—è',
    growth: '–ë—ã—Å—Ç—Ä—ã–π'
  },
  {
    id: 'teacher',
    name: '–£—á–∏—Ç–µ–ª—å',
    salary: 3000,
    expenses: 1500,
    passiveIncome: 0,
    description: '–°–∫—Ä–æ–º–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥',
    icon: 'üë©‚Äçüè´',
    color: '#4caf50',
    difficulty: '–ù–∏–∑–∫–∞—è',
    growth: '–ú–µ–¥–ª–µ–Ω–Ω—ã–π'
  },
  {
    id: 'businessman',
    name: '–ë–∏–∑–Ω–µ—Å–º–µ–Ω',
    salary: 12000,
    expenses: 5000,
    passiveIncome: 1000,
    description: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –Ω–æ –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª',
    icon: 'üíº',
    color: '#ff9800',
    difficulty: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è',
    growth: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π'
  },
  {
    id: 'programmer',
    name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç',
    salary: 7000,
    expenses: 2500,
    passiveIncome: 500,
    description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º',
    icon: 'üíª',
    color: '#9c27b0',
    difficulty: '–í—ã—Å–æ–∫–∞—è',
    growth: '–ë—ã—Å—Ç—Ä—ã–π'
  },
  {
    id: 'artist',
    name: '–•—É–¥–æ–∂–Ω–∏–∫',
    salary: 4000,
    expenses: 1800,
    passiveIncome: 200,
    description: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º',
    icon: 'üé®',
    color: '#e91e63',
    difficulty: '–°—Ä–µ–¥–Ω—è—è',
    growth: '–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–π'
  }
];

const DREAMS = [
  {
    id: 'house',
    name: '–î–æ–º –º–µ—á—Ç—ã',
    cost: 500000,
    description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º —Å —Å–∞–¥–æ–º –∏ –±–∞—Å—Å–µ–π–Ω–æ–º',
    icon: 'üè†',
    color: '#4caf50',
    category: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'
  },
  {
    id: 'business',
    name: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å',
    cost: 1000000,
    description: '–ö—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
    icon: 'üè¢',
    color: '#2196f3',
    category: '–ë–∏–∑–Ω–µ—Å'
  },
  {
    id: 'travel',
    name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –º–∏—Ä—É',
    cost: 200000,
    description: '–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω—ã',
    icon: '‚úàÔ∏è',
    color: '#ff9800',
    category: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
  },
  {
    id: 'charity',
    name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    cost: 300000,
    description: '–ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –∏ –¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ',
    icon: '‚ù§Ô∏è',
    color: '#f44336',
    category: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'
  },
  {
    id: 'education',
    name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    cost: 150000,
    description: '–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ª—É—á—à–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö',
    icon: 'üéì',
    color: '#9c27b0',
    category: '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'
  }
];

const ProfessionModal = ({ open, onClose, onSelectProfession, profession, playerBalance, onPayOffCredit }) => {
  const [showPayOffAlert, setShowPayOffAlert] = useState(false);
  const [creditToPayOff, setCreditToPayOff] = useState(null);
  const [activeStep, setActiveStep] = useState(0);
  const [selectedProfession, setSelectedProfession] = useState(null);
  const [selectedDream, setSelectedDream] = useState(null);

  const handleSelectProfession = (prof) => {
    setSelectedProfession(prof);
    setActiveStep(1);
  };

  const handleSelectDream = (dream) => {
    setSelectedDream(dream);
    setActiveStep(2);
  };

  const handleConfirm = () => {
    if (onSelectProfession && selectedProfession && selectedDream) {
      onSelectProfession({
        ...selectedProfession,
        dream: selectedDream
      });
      onClose();
    }
  };

  const handleClose = () => {
    setActiveStep(0);
    setSelectedProfession(null);
    setSelectedDream(null);
    onClose();
  };

  const handlePayOffCredit = (creditType, amount) => {
    setCreditToPayOff({ type: creditType, amount });
    setShowPayOffAlert(true);
  };

  const confirmPayOffCredit = () => {
    if (onPayOffCredit && creditToPayOff) {
      onPayOffCredit(creditToPayOff.type, creditToPayOff.amount);
      setShowPayOffAlert(false);
      setCreditToPayOff(null);
    }
  };

  const canExitToBigCircle = (profession) => {
    return profession && profession.passiveIncome > profession.totalExpenses;
  };

  const formatCurrency = (amount) => {
    return `$${amount?.toLocaleString() || '0'}`;
  };

  const steps = [
    {
      label: '–í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã'
    },
    {
      label: '–í—ã–±–æ—Ä –º–µ—á—Ç—ã',
      description: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ü–µ–ª—å'
    },
    {
      label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
      description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'
    }
  ];

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5,
        ease: "easeOut"
      }
    }
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="lg"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: 4,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          overflow: 'hidden'
        }
      }}
    >
      <DialogTitle sx={{ 
        background: 'rgba(255,255,255,0.95)', 
        backdropFilter: 'blur(20px)',
        borderBottom: '1px solid rgba(255,255,255,0.2)',
        position: 'relative'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
          <Typography variant="h4" sx={{ 
            fontWeight: 700,
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}>
            üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
          </Typography>
          <IconButton onClick={handleClose} sx={{ color: '#667eea' }}>
            <CloseIcon />
          </IconButton>
        </Box>
        
        {/* Stepper */}
        <Box sx={{ mt: 3 }}>
          <Stepper activeStep={activeStep} alternativeLabel>
            {steps.map((step, index) => (
              <Step key={step.label}>
                <StepLabel 
                  sx={{ 
                    '& .MuiStepLabel-label': { 
                      color: index <= activeStep ? 'rgba(255,255,255,0.9)' : 'rgba(255,255,255,0.5)',
                      fontWeight: index <= activeStep ? 600 : 400
                    }
                  }}
                >
                  {step.label}
                </StepLabel>
              </Step>
            ))}
          </Stepper>
        </Box>
      </DialogTitle>

      <DialogContent sx={{ p: 0, background: 'rgba(255,255,255,0.95)', backdropFilter: 'blur(20px)' }}>
        <Box sx={{ p: 4 }}>
          {/* –®–∞–≥ 1: –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
          {activeStep === 0 && (
            <motion.div
              variants={containerVariants}
              initial="hidden"
              animate="visible"
            >
              <Typography variant="h5" sx={{ mb: 4, textAlign: 'center', color: '#667eea', fontWeight: 600 }}>
                üíº –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
              </Typography>
              
              <Grid container spacing={3}>
                {PROFESSIONS.map((prof) => (
                  <Grid item xs={12} sm={6} md={4} key={prof.id}>
                    <motion.div variants={itemVariants}>
                      <Card 
                        elevation={8}
                        sx={{
                          borderRadius: 3,
                          cursor: 'pointer',
                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                          border: `2px solid ${prof.color}`,
                          '&:hover': {
                            transform: 'translateY(-8px) scale(1.02)',
                            boxShadow: `0 20px 40px ${prof.color}40`
                          }
                        }}
                        onClick={() => handleSelectProfession(prof)}
                      >
                        <CardContent sx={{ p: 3, textAlign: 'center' }}>
                          <Typography variant="h1" sx={{ mb: 2 }}>
                            {prof.icon}
                          </Typography>
                          
                          <Typography variant="h6" sx={{ 
                            fontWeight: 700, 
                            color: prof.color,
                            mb: 2
                          }}>
                            {prof.name}
                          </Typography>
                          
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                            {prof.description}
                          </Typography>
                          
                          <Box sx={{ mb: 2 }}>
                            <Chip 
                              label={`–ó–∞—Ä–ø–ª–∞—Ç–∞: ${formatCurrency(prof.salary)}`}
                              size="small"
                              sx={{ 
                                bgcolor: '#4caf50', 
                                color: 'white',
                                fontWeight: 600,
                                mb: 1
                              }}
                            />
                            <Chip 
                              label={`–†–∞—Å—Ö–æ–¥—ã: ${formatCurrency(prof.expenses)}`}
                              size="small"
                              sx={{ 
                                bgcolor: '#f44336', 
                                color: 'white',
                                fontWeight: 600,
                                mb: 1
                              }}
                            />
                            {prof.passiveIncome > 0 && (
                              <Chip 
                                label={`–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${formatCurrency(prof.passiveIncome)}`}
                                size="small"
                                sx={{ 
                                  bgcolor: '#ff9800', 
                                  color: 'white',
                                  fontWeight: 600
                                }}
                              />
                            )}
                          </Box>
                          
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.8rem' }}>
                            <Typography variant="caption" color="text.secondary">
                              –°–ª–æ–∂–Ω–æ—Å—Ç—å: {prof.difficulty}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              –†–æ—Å—Ç: {prof.growth}
                            </Typography>
                          </Box>
                        </CardContent>
                      </Card>
                    </motion.div>
                  </Grid>
                ))}
              </Grid>
            </motion.div>
          )}

          {/* –®–∞–≥ 2: –í—ã–±–æ—Ä –º–µ—á—Ç—ã */}
          {activeStep === 1 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
                <Button
                  variant="outlined"
                  onClick={() => setActiveStep(0)}
                  startIcon={<ArrowForwardIcon sx={{ transform: 'rotate(180deg)' }} />}
                  sx={{ borderRadius: 3 }}
                >
                  –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
                </Button>
                
                <Typography variant="h5" sx={{ color: '#667eea', fontWeight: 600 }}>
                  ‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –º–µ—á—Ç—É
                </Typography>
              </Box>
              
              <Grid container spacing={3}>
                {DREAMS.map((dream) => (
                  <Grid item xs={12} sm={6} md={4} key={dream.id}>
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5 }}
                    >
                      <Card 
                        elevation={8}
                        sx={{
                          borderRadius: 3,
                          cursor: 'pointer',
                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
                          border: `2px solid ${dream.color}`,
                          '&:hover': {
                            transform: 'translateY(-8px) scale(1.02)',
                            boxShadow: `0 20px 40px ${dream.color}40`
                          }
                        }}
                        onClick={() => handleSelectDream(dream)}
                      >
                        <CardContent sx={{ p: 3, textAlign: 'center' }}>
                          <Typography variant="h1" sx={{ mb: 2 }}>
                            {dream.icon}
                          </Typography>
                          
                          <Typography variant="h6" sx={{ 
                            fontWeight: 700, 
                            color: dream.color,
                            mb: 2
                          }}>
                            {dream.name}
                          </Typography>
                          
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                            {dream.description}
                          </Typography>
                          
                          <Chip 
                            label={dream.category}
                            size="small"
                            sx={{ 
                              bgcolor: dream.color, 
                              color: 'white',
                              fontWeight: 600,
                              mb: 2
                            }}
                          />
                          
                          <Typography variant="h6" sx={{ 
                            fontWeight: 700,
                            color: '#667eea'
                          }}>
                            {formatCurrency(dream.cost)}
                          </Typography>
                        </CardContent>
                      </Card>
                    </motion.div>
                  </Grid>
                ))}
              </Grid>
            </motion.div>
          )}

          {/* –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ */}
          {activeStep === 2 && (
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 4 }}>
                <Button
                  variant="outlined"
                  onClick={() => setActiveStep(1)}
                  startIcon={<ArrowForwardIcon sx={{ transform: 'rotate(180deg)' }} />}
                  sx={{ borderRadius: 3 }}
                >
                  –ù–∞–∑–∞–¥ –∫ –º–µ—á—Ç–∞–º
                </Button>
                
                <Typography variant="h5" sx={{ color: '#667eea', fontWeight: 600 }}>
                  ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä
                </Typography>
              </Box>
              
              <Paper elevation={8} sx={{ p: 4, borderRadius: 3, background: 'rgba(102, 126, 234, 0.05)' }}>
                <Grid container spacing={4}>
                  {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è */}
                  <Grid item xs={12} md={6}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" sx={{ mb: 2 }}>
                        {selectedProfession?.icon}
                      </Typography>
                      <Typography variant="h5" sx={{ 
                        fontWeight: 700, 
                        color: selectedProfession?.color,
                        mb: 2
                      }}>
                        {selectedProfession?.name}
                      </Typography>
                      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                        {selectedProfession?.description}
                      </Typography>
                      
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        <Chip 
                          label={`–ó–∞—Ä–ø–ª–∞—Ç–∞: ${formatCurrency(selectedProfession?.salary)}`}
                          sx={{ bgcolor: '#4caf50', color: 'white', fontWeight: 600 }}
                        />
                        <Chip 
                          label={`–†–∞—Å—Ö–æ–¥—ã: ${formatCurrency(selectedProfession?.expenses)}`}
                          sx={{ bgcolor: '#f44336', color: 'white', fontWeight: 600 }}
                        />
                        {selectedProfession?.passiveIncome > 0 && (
                          <Chip 
                            label={`–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${formatCurrency(selectedProfession?.passiveIncome)}`}
                            sx={{ bgcolor: '#ff9800', color: 'white', fontWeight: 600 }}
                          />
                        )}
                      </Box>
                    </Box>
                  </Grid>
                  
                  {/* –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–µ—á—Ç–∞ */}
                  <Grid item xs={12} md={6}>
                    <Box sx={{ textAlign: 'center' }}>
                      <Typography variant="h4" sx={{ mb: 2 }}>
                        {selectedDream?.icon}
                      </Typography>
                      <Typography variant="h5" sx={{ 
                        fontWeight: 700, 
                        color: selectedDream?.color,
                        mb: 2
                      }}>
                        {selectedDream?.name}
                      </Typography>
                      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
                        {selectedDream?.description}
                      </Typography>
                      
                      <Chip 
                        label={selectedDream?.category}
                        sx={{ 
                          bgcolor: selectedDream?.color, 
                          color: 'white',
                          fontWeight: 600,
                          mb: 2
                        }}
                      />
                      
                      <Typography variant="h4" sx={{ 
                        fontWeight: 700,
                        color: '#667eea'
                      }}>
                        {formatCurrency(selectedDream?.cost)}
                      </Typography>
                    </Box>
                  </Grid>
                </Grid>
                
                <Divider sx={{ my: 4 }} />
                
                <Typography variant="body1" sx={{ textAlign: 'center', color: 'text.secondary' }}>
                  üéØ –í–∞—à–∞ —Ü–µ–ª—å: –Ω–∞–∫–æ–ø–∏—Ç—å <strong>{formatCurrency(selectedDream?.cost)}</strong> 
                  —Ä–∞–±–æ—Ç–∞—è <strong>{selectedProfession?.name}</strong>–æ–º
                </Typography>
              </Paper>
            </motion.div>
          )}
        </Box>
      </DialogContent>

      <DialogActions sx={{ 
        p: 3, 
        background: 'rgba(255,255,255,0.95)', 
        backdropFilter: 'blur(20px)',
        borderTop: '1px solid rgba(255,255,255,0.2)'
      }}>
        <Button onClick={handleClose} sx={{ borderRadius: 3 }}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        
        {activeStep === 2 && (
          <Button
            variant="contained"
            onClick={handleConfirm}
            disabled={!selectedProfession || !selectedDream}
            startIcon={<CheckCircle />}
            sx={{
              background: 'linear-gradient(135deg, #4caf50 0%, #66bb6a 100%)',
              borderRadius: 3,
              px: 4,
              py: 1.5,
              fontWeight: 700,
              '&:hover': {
                background: 'linear-gradient(135deg, #45a049 0%, #4caf50 100%)',
                transform: 'translateY(-2px)'
              },
              transition: 'all 0.3s ease'
            }}
          >
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä
          </Button>
        )}
      </DialogActions>

      {/* Alert –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ */}
      {showPayOffAlert && (
        <Alert 
          severity="warning" 
          action={
            <Button color="inherit" size="small" onClick={confirmPayOffCredit}>
              –ü–æ–≥–∞—Å–∏—Ç—å
            </Button>
          }
          sx={{ position: 'fixed', top: 20, right: 20, zIndex: 9999 }}
        >
          –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç {creditToPayOff?.type} –Ω–∞ —Å—É–º–º—É {formatCurrency(creditToPayOff?.amount)}?
        </Alert>
      )}
    </Dialog>
  );
};

export default ProfessionModal;
