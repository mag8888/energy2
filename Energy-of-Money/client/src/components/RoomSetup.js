import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  Container,
  Paper, 
  Grid,
  Alert,
  Snackbar,
  FormControlLabel,
  Switch,
  FormControl,
  Select, 
  MenuItem, 
  Chip,
  Divider,
  Card,
  CardContent,
  Avatar
} from '@mui/material';
import { motion } from 'framer-motion';
import { useParams, useNavigate } from 'react-router-dom';
import socket from '../socket';

const RoomSetup = () => {
  const { roomId } = useParams();
  const navigate = useNavigate();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
  const [roomName, setRoomName] = useState('');
  const [isPublic, setIsPublic] = useState(true);
  const [roomPassword, setRoomPassword] = useState('');
  const [professionType, setProfessionType] = useState('individual'); // 'individual' –∏–ª–∏ 'shared'
  
  // –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –º–µ—á—Ç—ã
  const [selectedProfession, setSelectedProfession] = useState(null);
  const [selectedDream, setSelectedDream] = useState(null);

  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const [isReady, setIsReady] = useState(false);
  const [playerName, setPlayerName] = useState('');
  
  // –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã

  const [players, setPlayers] = useState([]);
  const [canStart, setCanStart] = useState(false);
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
  useEffect(() => {
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞
    const savedPlayerName = localStorage.getItem('energy_of_money_player_name');
    if (savedPlayerName) {
      setPlayerName(savedPlayerName);
      console.log('üíæ [RoomSetup] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:', savedPlayerName);
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ
      const randomName = `–ò–≥—Ä–æ–∫ ${Math.floor(Math.random() * 9000) + 1000}`;
      setPlayerName(randomName);
      console.log('üé≤ [RoomSetup] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è:', randomName);
    }
    
    // –ò–º—è –∫–æ–º–Ω–∞—Ç—ã –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ roomData
    console.log('üè† [RoomSetup] –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.IO —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!roomId) return;

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('joinRoom', roomId, playerName);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomData', (data) => {
      console.log('üè† [RoomSetup] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
      if (data.displayName) {
        setRoomName(data.displayName);
        console.log('üè† [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã:', data.displayName);
      }
      setIsPublic(data.isPublic !== false);
      setRoomPassword(data.password || '');
      setProfessionType(data.professionType || 'individual');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Ö–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (data.hostProfession && data.hostProfession !== 'none') {
        setSelectedProfession(data.hostProfession);
        console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ö–æ—Å—Ç–∞ –∏–∑ roomData:', data.hostProfession);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
      if (data.status === 'determining_order') {
        setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...');
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
        setTimeout(() => {
          navigate(`/room/${roomId}/game`);
        }, 2000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomCreated', (data) => {
      console.log('üè† [RoomSetup] –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
      if (data.displayName) {
        setRoomName(data.displayName);
        console.log('üè† [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:', data.displayName);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é —Ö–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      if (data.hostProfession && data.hostProfession !== 'none') {
        setSelectedProfession(data.hostProfession);
        console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ö–æ—Å—Ç–∞:', data.hostProfession);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersUpdate', (updatedPlayers) => {
      setPlayers(updatedPlayers);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç—å—Å—è
      const readyPlayers = updatedPlayers.filter(p => p.ready);
      setCanStart(readyPlayers.length >= 2);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
      const currentPlayer = updatedPlayers.find(p => p.socketId === socket.id);
      if (currentPlayer) {
        setIsReady(currentPlayer.ready || false);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        if (currentPlayer.profession && currentPlayer.profession !== 'none') {
          setSelectedProfession(currentPlayer.profession);
          console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', currentPlayer.profession);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–µ—á—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        if (currentPlayer.dream && currentPlayer.dream !== 'none') {
          setSelectedDream(currentPlayer.dream);
          console.log('‚≠ê [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–µ—á—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', currentPlayer.dream);
        }
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('roomNotFound', () => {
      setError('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    });

    socket.on('error', (error) => {
      setError(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    socket.on('gameStarted', (data) => {
      console.log('üéÆ [RoomSetup] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞:', data);
      setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
      setTimeout(() => {
        navigate(`/room/${roomId}/game`);
      }, 2000);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
    socket.on('orderDeterminationStarted', (data) => {
      console.log('üé≤ [RoomSetup] –ù–∞—á–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏:', data);
      setSuccess('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
      setTimeout(() => {
        navigate(`/room/${roomId}/game`);
      }, 2000);
    });



    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
    if (roomId) {
      socket.emit('getRoomData', roomId);
      console.log('üè† [RoomSetup] –ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', roomId);
    }

    return () => {
      socket.off('roomData');
      socket.off('roomCreated');
      socket.off('playersUpdate');
      socket.off('roomNotFound');
      socket.off('error');
      socket.off('gameStarted');
      socket.off('orderDeterminationStarted');
    };
  }, [roomId, playerName, roomName, navigate]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handleRoomNameChange = () => {
    if (roomName.trim()) {
      socket.emit('updateRoomName', roomId, roomName.trim());
      setSuccess('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    }
  };

  const handlePublicToggle = () => {
    const newPublicState = !isPublic;
    setIsPublic(newPublicState);
    
    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π, –æ—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å
    if (!newPublicState) {
      setRoomPassword('');
    }
    
    socket.emit('updateRoomPublic', roomId, newPublicState);
    setSuccess(`–ö–æ–º–Ω–∞—Ç–∞ ${newPublicState ? '–æ—Ç–∫—Ä—ã—Ç–∞' : '–∑–∞–∫—Ä—ã—Ç–∞'}!`);
  };

  const handlePasswordChange = () => {
    if (roomPassword.trim()) {
      socket.emit('updateRoomPassword', roomId, roomPassword.trim());
      setSuccess('–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
  };

  const handleProfessionTypeChange = (event) => {
    const newType = event.target.value;
    setProfessionType(newType);
    socket.emit('updateProfessionType', roomId, newType);
    setSuccess(`–¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newType === 'individual' ? '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ' : '–æ–±—â–∏–µ'}!`);
  };



  const handleProfessionSelect = (profession) => {
    setSelectedProfession(profession);
    socket.emit('updateProfession', roomId, profession);
    setSuccess(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞: ${profession.name}!`);
  };

  const handleDreamSelect = (dream) => {
    setSelectedDream(dream);
    socket.emit('updateDream', roomId, dream);
    setSuccess(`–ú–µ—á—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: ${dream.name}!`);
  };

  const handleToggleReady = () => {
    const newReadyState = !isReady;
    setIsReady(newReadyState);
    socket.emit('toggleReady', roomId);
    setSuccess(newReadyState ? '–í—ã –≥–æ—Ç–æ–≤—ã!' : '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–Ω—è—Ç–∞');
  };

  const handleStartGame = () => {
    socket.emit('startGame', roomId);
    setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
  };



  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –º–µ—á—Ç
  const professions = [
    { id: 1, name: '–î–≤–æ—Ä–Ω–∏–∫', salary: 2000, expenses: 200, description: '–£–±–æ—Ä–∫–∞ —É–ª–∏—Ü –∏ –¥–≤–æ—Ä–æ–≤' },
    { id: 2, name: '–ö—É—Ä—å–µ—Ä', salary: 2500, expenses: 300, description: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
    { id: 3, name: '–í–æ–¥–∏—Ç–µ–ª—å', salary: 3000, expenses: 400, description: '–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤' },
    { id: 4, name: '–ü—Ä–æ–¥–∞–≤–µ—Ü', salary: 3500, expenses: 500, description: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
    { id: 5, name: '–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫', salary: 4000, expenses: 600, description: '–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ' }
  ];

  const dreams = [
    { id: 1, name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É', cost: 50000, description: '–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã' },
    { id: 2, name: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º', cost: 200000, description: '–ö—É–ø–∏—Ç—å –¥–æ–º —Å–≤–æ–µ–π –º–µ—á—Ç—ã' },
    { id: 3, name: '–ë–∏–∑–Ω–µ—Å', cost: 100000, description: '–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ–ª–æ' },
    { id: 4, name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', cost: 30000, description: '–ü–æ–ª—É—á–∏—Ç—å –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
    { id: 5, name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', cost: 75000, description: '–ü–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º' }
  ];

  return (
    <Container maxWidth="lg">
      <Box
        sx={{
        minHeight: '100vh',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          py: 4
        }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Paper
            elevation={8}
            sx={{
              p: 4,
              borderRadius: 3,
              background: 'rgba(255, 255, 255, 0.95)',
              backdropFilter: 'blur(10px)',
              border: '1px solid rgba(255, 255, 255, 0.2)'
            }}
          >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Typography
              variant="h3"
              component="h1"
              align="center"
              sx={{
        mb: 4, 
        fontWeight: 'bold', 
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                backgroundClip: 'text',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent'
              }}
            >
              üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Ç–∏–∏
      </Typography>

            <Grid container spacing={4} alignItems="flex-start">
              {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã */}
              <Grid item xs={12} md={6}>
                <Typography variant="h5" sx={{ mb: 3, color: '#333', fontWeight: 'bold' }}>
                  ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
                </Typography>

                {/* –ò–º—è –∫–æ–º–Ω–∞—Ç—ã */}
                    <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                    üè† –ò–º—è –∫–æ–º–Ω–∞—Ç—ã
                      </Typography>
                      <TextField
                        fullWidth
                    value={roomName}
                    onChange={(e) => setRoomName(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã"
                        variant="outlined"
                    sx={{ mb: 1 }}
                      />
                      <Button
                    variant="outlined"
                    onClick={handleRoomNameChange}
                        fullWidth
                    sx={{ borderRadius: 2 }}
                  >
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è
                      </Button>
                    </Box>

                {/* –§–ª–∞–∂–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∞—è/–∑–∞–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞ */}
                    <Box sx={{ mb: 3 }}>
                  <FormControlLabel
                    control={
                      <Switch
                        checked={isPublic}
                        onChange={handlePublicToggle}
                        color="primary"
                      />
                    }
                    label={
                      <Typography variant="h6" sx={{ color: '#333' }}>
                        {isPublic ? 'üåç –û—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞' : 'üîí –ó–∞–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞'}
                      </Typography>
                    }
                  />
                  <Typography variant="body2" sx={{ color: '#666', mt: 1 }}>
                    {isPublic 
                      ? '–õ—é–±–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ' 
                      : '–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏–ª–∏ –ø–∞—Ä–æ–ª—é'
                    }
                  </Typography>
                  
                  {/* –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç) */}
                  {!isPublic && (
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                        üîê –ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã
                      </Typography>
                        <TextField
                          fullWidth
                        value={roomPassword}
                        onChange={(e) => setRoomPassword(e.target.value)}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"
                        variant="outlined"
                        type="password"
                        sx={{ mb: 1 }}
                      />
                        <Button
                          variant="outlined"
                        onClick={handlePasswordChange}
                        fullWidth
                        sx={{ borderRadius: 2 }}
                        disabled={!roomPassword.trim()}
                      >
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                        </Button>
                      <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.8rem' }}>
                        üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                      </Typography>
                      </Box>
                  )}
                    </Box>

                {/* –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π */}
                    <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                    üë• –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
                      </Typography>
                        <FormControl fullWidth>
                          <Select
                      value={professionType}
                      onChange={handleProfessionTypeChange}
                      variant="outlined"
                    >
                      <MenuItem value="individual">
                        üéØ –£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
                              </MenuItem>
                      <MenuItem value="shared">
                        ü§ù –û–¥–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞ –≤—Å–µ—Ö
                      </MenuItem>
          </Select>
        </FormControl>
                  <Typography variant="body2" sx={{ color: '#666', mt: 1 }}>
                    {professionType === 'individual' 
                      ? '–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é' 
                      : '–í—Å–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'
                    }
                  </Typography>
                    </Box>

                {/* –ò–º—è –∏–≥—Ä–æ–∫–∞ */}
        <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                        üë§ –í–∞—à–µ –∏–º—è
          </Typography>
                        <TextField
              fullWidth
                    value={playerName}
                    onChange={(e) => {
                      const newName = e.target.value;
                      setPlayerName(newName);
                      
                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                      if (newName.trim()) {
                        localStorage.setItem('energy_of_money_player_name', newName.trim());
                      }
                    }}
                    onBlur={() => {
                      // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                      if (roomId && playerName.trim()) {
                        socket.emit('updatePlayerName', roomId, playerName.trim());
                        setSuccess('–ò–º—è –∏–≥—Ä–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
                      }
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    variant="outlined"
                    sx={{ mb: 1 }}
                  />

                </Box>
              </Grid>

              {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –º–µ—á—Ç—ã */}
              <Grid item xs={12} md={6}>
                <Typography variant="h5" sx={{ mb: 3, color: '#333', fontWeight: 'bold' }}>
                  üéØ –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                </Typography>

                {/* –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
                <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                    üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
                  </Typography>
                  {selectedProfession && (
                    <Typography variant="body2" sx={{ mb: 2, color: '#4caf50', fontWeight: 'bold' }}>
                      ‚úÖ –í—ã–±—Ä–∞–Ω–∞: {selectedProfession.name}
                    </Typography>
                  )}
                  <Grid container spacing={2}>
                    {professions.map((profession) => (
                      <Grid item xs={12} sm={6} key={profession.id} sx={{ display: 'flex', mb: 2 }}>
                        <Card
                          onClick={() => handleProfessionSelect(profession)}
              sx={{
                            cursor: 'pointer',
                            border: selectedProfession?.id === profession.id ? '2px solid #667eea' : '1px solid #ddd',
                            transition: 'all 0.3s ease',
                            position: 'relative',
                            height: '180px', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                            width: '100%',
                            display: 'flex',
                            flexDirection: 'column',
                            '&:hover': {
                              transform: 'translateY(-2px)',
                              boxShadow: 3
                            }
                          }}
                        >
                          {/* –°–µ—Ä–¥–µ—á–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
                          {selectedProfession?.id === profession.id && (
                            <Box
              sx={{
                                position: 'absolute',
                                top: -8,
                                right: -8,
                                width: 32,
                                height: 32,
                                borderRadius: '50%',
                                backgroundColor: '#ff6b6b',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                zIndex: 1,
                                boxShadow: '0 2px 8px rgba(255, 107, 107, 0.3)',
                                animation: 'pulse 2s infinite'
                              }}
                            >
                              <Typography sx={{ color: 'white', fontSize: '16px', fontWeight: 'bold' }}>
                                ‚ù§Ô∏è
                              </Typography>
                            </Box>
                          )}
                          <CardContent sx={{ p: 2, textAlign: 'center', flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%' }}>
                            <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 1, fontSize: '1.1rem' }}>
                                {profession.name}
                              </Typography>
                              <Typography variant="body2" sx={{ color: '#666', mb: 1, lineHeight: 1.4, flexGrow: 1 }}>
                                {profession.description}
                              </Typography>
                            </Box>
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.8rem', mt: 'auto' }}>
                              <Chip label={`üí∞ ${profession.salary}`} size="small" color="success" />
                              <Chip label={`üí∏ ${profession.expenses}`} size="small" color="error" />
                            </Box>
                          </CardContent>
                        </Card>
                      </Grid>
                    ))}
                  </Grid>
                </Box>

                <Divider sx={{ my: 3 }} />

                {/* –í—ã–±–æ—Ä –º–µ—á—Ç—ã */}
                <Box sx={{ mb: 3 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                    ‚≠ê –ú–µ—á—Ç–∞
                  </Typography>
                  {selectedDream && (
                    <Typography variant="body2" sx={{ mb: 2, color: '#4caf50', fontWeight: 'bold' }}>
                      ‚úÖ –í—ã–±—Ä–∞–Ω–∞: {selectedDream.name}
                    </Typography>
                  )}
                  <Grid container spacing={2}>
                    {dreams.map((dream) => (
                      <Grid item xs={12} sm={6} key={dream.id} sx={{ display: 'flex', mb: 2 }}>
                        <Card
                          onClick={() => handleDreamSelect(dream)}
                          sx={{
                            cursor: 'pointer',
                            border: selectedDream?.id === dream.id ? '2px solid #667eea' : '1px solid #ddd',
                            transition: 'all 0.3s ease',
                            position: 'relative',
                            height: '180px', // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                            width: '100%',
                            display: 'flex',
                            flexDirection: 'column',
                            '&:hover': {
                              transform: 'translateY(-2px)',
                              boxShadow: 3
                            }
                          }}
                        >
                          {/* –°–µ—Ä–¥–µ—á–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—á—Ç—ã */}
                          {selectedDream?.id === dream.id && (
                            <Box
              sx={{
                                position: 'absolute',
                                top: -8,
                                right: -8,
                                width: 32,
                                height: 32,
                                borderRadius: '50%',
                                backgroundColor: '#ff6b6b',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                                zIndex: 1,
                                boxShadow: '0 2px 8px rgba(255, 107, 107, 0.3)',
                                animation: 'pulse 2s infinite'
                              }}
                            >
                              <Typography sx={{ color: 'white', fontSize: '16px', fontWeight: 'bold' }}>
                                ‚ù§Ô∏è
                              </Typography>
          </Box>
                          )}
                          <CardContent sx={{ p: 2, textAlign: 'center', flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between', height: '100%' }}>
                            <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>
                              <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 1, fontSize: '1.1rem' }}>
                                {dream.name}
                              </Typography>
                              <Typography variant="body2" sx={{ color: '#666', mb: 1, lineHeight: 1.4, flexGrow: 1 }}>
                                {dream.description}
                              </Typography>
        </Box>
                            <Chip label={`üéØ ${dream.cost.toLocaleString()}`} size="small" color="primary" sx={{ mt: 'auto' }} />
                          </CardContent>
                        </Card>
                      </Grid>
                    ))}
                  </Grid>
                      </Box>
              </Grid>

              {/* –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –ò–≥—Ä–æ–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
              <Grid item xs={12}>
                <Divider sx={{ my: 3 }} />
                
                {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
        <Box sx={{ mb: 3 }}>
                  <Typography variant="h5" sx={{ mb: 2, color: '#333', fontWeight: 'bold' }}>
                    üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ({players.length})
          </Typography>
                  <Grid container spacing={2}>
                    {players.map((player, index) => (
                      <Grid item xs={12} sm={6} md={4} key={player.id}>
                        <Card sx={{ 
                          border: player.ready ? '2px solid #4caf50' : '1px solid #ddd',
                          background: player.ready ? 'rgba(76, 175, 80, 0.1)' : 'white'
                        }}>
                          <CardContent sx={{ p: 2, textAlign: 'center' }}>
                <Avatar sx={{
                  mx: 'auto',
                  mb: 1,
                              bgcolor: player.ready ? '#4caf50' : '#666',
                  width: 40,
                  height: 40
                }}>
                              {player.username?.[0] || '?'}
                </Avatar>
                            <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 1 }}>
                              {player.username}
                </Typography>
                            {player.profession && (
                              <Chip 
                                label={player.profession.name} 
                                size="small" 
                                color="primary" 
                                sx={{ mb: 1 }}
                              />
                            )}
                            {player.ready && (
                              <Chip 
                                label="‚úÖ –ì–æ—Ç–æ–≤" 
                                size="small" 
                                color="success"
                              />
                            )}
                          </CardContent>
                        </Card>
                      </Grid>
                    ))}
                  </Grid>
        </Box>

                {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
        {/* –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
        <Button
                    variant={isReady ? "contained" : "outlined"}
                    onClick={handleToggleReady}
                    size="large"
          sx={{
                      py: 2,
                      px: 4,
                      borderRadius: 2,
            fontSize: '1.1rem',
                      fontWeight: 'bold',
                      bgcolor: isReady ? '#4caf50' : 'transparent',
                      color: isReady ? 'white' : '#4caf50',
                      borderColor: '#4caf50',
            '&:hover': {
                        bgcolor: isReady ? '#45a049' : 'rgba(76, 175, 80, 0.1)',
            }
          }}
        >
                    {isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : 'üéØ –ì–æ—Ç–æ–≤'}
        </Button>

                  {/* –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ */}
                        <Button
                          variant="contained"
                    onClick={handleStartGame}
                    disabled={!canStart}
                    size="large"
                          sx={{
                            py: 2,
                      px: 4,
                      borderRadius: 2,
                      fontSize: '1.1rem',
                      fontWeight: 'bold',
                      background: canStart 
                        ? 'linear-gradient(135deg, #4caf50 0%, #45a049 100%)'
                        : '#ccc',
                            '&:hover': {
                        background: canStart 
                          ? 'linear-gradient(135deg, #45a049 0%, #388e3c 100%)'
                          : '#ccc',
                      }
                    }}
                  >
                    üöÄ –°–¢–ê–†–¢ –ò–ì–†–´
                        </Button>
                        
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
                  {!canStart && (
                        <Box sx={{
                          p: 2,
                          borderRadius: 2,
                      background: 'rgba(255, 193, 7, 0.1)',
                      border: '1px solid #ffc107'
                    }}>
                      <Typography variant="body2" sx={{ color: '#f57c00' }}>
                        ‚è≥ –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞
                          </Typography>
                        </Box>
                  )}
        </Box>
              </Grid>
            </Grid>
      </Paper>
        </motion.div>
      </Box>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={!!error}
        autoHideDuration={4000}
        onClose={() => setError('')}
      >
        <Alert severity="error" onClose={() => setError('')}>
          {error}
        </Alert>
      </Snackbar>

      <Snackbar
        open={!!success}
        autoHideDuration={3000}
        onClose={() => setSuccess('')}
      >
        <Alert severity="success" onClose={() => setSuccess('')}>
          {success}
        </Alert>
      </Snackbar>

      {/* CSS –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—É–ª—å—Å–∞—Ü–∏–∏ —Å–µ—Ä–¥–µ—á–∫–∞ */}
      <Box sx={{
        '@keyframes pulse': {
          '0%': {
            transform: 'scale(1)',
            opacity: 1
          },
          '50%': {
            transform: 'scale(1.1)',
            opacity: 0.8
          },
          '100%': {
            transform: 'scale(1)',
            opacity: 1
          }
        }
      }} />
    </Container>
  );
};

export default RoomSetup;



