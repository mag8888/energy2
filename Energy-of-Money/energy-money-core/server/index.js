const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö
const PROFESSIONS = [
  { id: 1, name: '–í—Ä–∞—á', icon: 'üë®‚Äç‚öïÔ∏è' },
  { id: 2, name: '–ö—É—Ä—å–µ—Ä', icon: 'üöö' },
  { id: 3, name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', icon: 'üíª' },
  { id: 4, name: '–£—á–∏—Ç–µ–ª—å', icon: 'üë®‚Äçüè´' },
  { id: 5, name: '–ò–Ω–∂–µ–Ω–µ—Ä', icon: '‚öôÔ∏è' },
  { id: 6, name: '–î–∏–∑–∞–π–Ω–µ—Ä', icon: 'üé®' },
  { id: 7, name: '–ú–µ–Ω–µ–¥–∂–µ—Ä', icon: 'üëî' },
  { id: 8, name: '–ü—Ä–æ–¥–∞–≤–µ—Ü', icon: 'üõí' }
];

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç
const PORT = process.env.PORT || 5000;

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –°–æ–∑–¥–∞–µ–º Socket.IO —Å–µ—Ä–≤–µ—Ä
const io = socketIo(server, {
  cors: {
    origin: ["http://localhost:3000", "http://127.0.0.1:3000"],
    methods: ["GET", "POST"]
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
const users = new Map(); // userId -> userData
const usernameToUserId = new Map(); // username -> userId
const rooms = new Map(); // roomId -> roomData

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
const fs = require('fs');
const roomsFilePath = path.join(__dirname, 'rooms.json');
const usersFilePath = path.join(__dirname, 'users.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
const loadRooms = () => {
  try {
    if (fs.existsSync(roomsFilePath)) {
      const data = fs.readFileSync(roomsFilePath, 'utf8');
      const roomsData = JSON.parse(data);
      rooms.clear();
      for (const [roomId, roomData] of Object.entries(roomsData)) {
        rooms.set(roomId, roomData);
      }
      console.log(`üè† [SERVER] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rooms.size} –∫–æ–º–Ω–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞`);
    }
  } catch (error) {
    console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç:', error);
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç –≤ —Ñ–∞–π–ª
const saveRooms = () => {
  try {
    const roomsData = {};
    for (const [roomId, roomData] of rooms.entries()) {
      roomsData[roomId] = roomData;
    }
    fs.writeFileSync(roomsFilePath, JSON.stringify(roomsData, null, 2));
    console.log(`üè† [SERVER] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${rooms.size} –∫–æ–º–Ω–∞—Ç –≤ —Ñ–∞–π–ª`);
  } catch (error) {
    console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç:', error);
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
const loadUsers = () => {
  try {
    if (fs.existsSync(usersFilePath)) {
      const data = fs.readFileSync(usersFilePath, 'utf8');
      const usersData = JSON.parse(data);
      users.clear();
      usernameToUserId.clear();
      
      for (const [userId, userData] of Object.entries(usersData)) {
        users.set(userId, userData);
        usernameToUserId.set(userData.username.toLowerCase(), userId);
      }
      console.log(`üë§ [SERVER] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞`);
    }
  } catch (error) {
    console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ ID
const getProfessionName = (professionId) => {
  const profession = PROFESSIONS.find(p => p.id === professionId);
  return profession ? profession.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è';
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å professionId –≤ profession
const transformPlayersData = (players) => {
  return players.map(player => ({
    ...player,
    profession: player.professionId ? getProfessionName(player.professionId) : null
  }));
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
const saveUsers = () => {
  try {
    const usersData = {};
    for (const [userId, userData] of users.entries()) {
      usersData[userId] = userData;
    }
    console.log(`üë§ [SERVER] –°–æ—Ö—Ä–∞–Ω—è–µ–º ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, Array.from(users.keys()));
    console.log(`üë§ [SERVER] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`, usersData);
    fs.writeFileSync(usersFilePath, JSON.stringify(usersData, null, 2));
    console.log(`üë§ [SERVER] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª`);
  } catch (error) {
    console.error('‚ùå [SERVER] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  }
};

// –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
const breakTimers = new Map(); // roomId -> breakTimer
const BREAK_INTERVAL = 50 * 60 * 1000; // 50 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const BREAK_DURATION = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
const gameStates = new Map(); // roomId -> gameState
const turnTimers = new Map(); // roomId -> turnTimer
const TURN_DURATION = 120; // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ö–æ–¥

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User ID
const generateUserId = () => {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `user_${timestamp}_${randomStr}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
const isUsernameUnique = (username) => {
  return !usernameToUserId.has(username.toLowerCase());
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = (username, email, password, socketId) => {
  const userId = generateUserId();
  const userData = {
    id: userId,
    username: username,
    email: email,
    password: password,
    socketId: socketId,
    createdAt: Date.now(),
    lastSeen: Date.now()
  };
  
  console.log(`üë§ [SERVER] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, { username, email, userId });
  console.log(`üë§ [SERVER] –†–∞–∑–º–µ—Ä users –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`, users.size);
  users.set(userId, userData);
  usernameToUserId.set(username.toLowerCase(), userId);
  console.log(`üë§ [SERVER] –†–∞–∑–º–µ—Ä users –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:`, users.size);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
  saveUsers();
  
  console.log(`üë§ [SERVER] User registered: ${username} (${email}) (ID: ${userId})`);
  return userData;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
const getUserByEmail = (email) => {
  console.log(`üîç [SERVER] Searching for user with email: ${email}`);
  
  for (const [userId, userData] of users.entries()) {
    if (userData.email.toLowerCase() === email.toLowerCase()) {
      console.log(`‚úÖ [SERVER] User found:`, { id: userData.id, username: userData.username, email: userData.email });
      return userData;
    }
  }
  
  console.log(`‚ùå [SERVER] User not found with email: ${email}`);
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
const getUserByUsername = (username) => {
  if (!username || typeof username !== 'string') {
    console.log(`‚ùå [SERVER] Invalid username provided:`, username);
    return null;
  }
  
  const userId = usernameToUserId.get(username.toLowerCase());
  if (userId) {
    return users.get(userId);
  }
  
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUserSocketId = (userId, socketId) => {
  console.log(`üîÑ [SERVER] updateUserSocketId called: userId=${userId}, socketId=${socketId}`);
  const user = users.get(userId);
  if (user) {
    user.socketId = socketId;
    user.lastSeen = Date.now();
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
    saveUsers();
  }
};

// üéÆ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
const initializeGameState = (roomId) => {
  const gameState = {
    players: new Map(),
    currentPlayerIndex: 0,
    playerQueue: [],
    gameStarted: false,
    turnTimeLeft: TURN_DURATION,
    currentPlayerId: null,
    turnTimer: null
  };
  gameStates.set(roomId, gameState);
  return gameState;
};

const getGameState = (roomId) => {
  return gameStates.get(roomId) || initializeGameState(roomId);
};

const addPlayerToGame = (roomId, playerData, professionId) => {
  const gameState = getGameState(roomId);
  const player = {
    id: playerData.id,
    username: playerData.username,
    socketId: playerData.socketId,
    position: 1,
    color: getPlayerColor(playerData.id),
    professionId: professionId,
    balance: 1000, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    ready: false,
    isOnBigCircle: false,
    assets: [],
    children: 0,
    loans: {}
  };
  
  gameState.players.set(player.id, player);
  gameState.playerQueue.push(player.id);
  
  return player;
};

const getPlayerColor = (playerId) => {
  const colors = ['#EF4444', '#3B82F6', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];
  return colors[playerId % colors.length];
};

const startGame = (roomId) => {
  const gameState = getGameState(roomId);
  if (gameState.playerQueue.length < 2) {
    throw new Error('–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞');
  }
  
  gameState.gameStarted = true;
  gameState.currentPlayerIndex = 0;
  gameState.currentPlayerId = gameState.playerQueue[0];
  gameState.turnTimeLeft = TURN_DURATION;
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ö–æ–¥–∞
  startTurnTimer(roomId);
  
  return {
    gameStarted: true,
    playerQueue: gameState.playerQueue,
    currentPlayerId: gameState.currentPlayerId,
    currentPlayerIndex: gameState.currentPlayerIndex
  };
};

const nextTurn = (roomId) => {
  const gameState = getGameState(roomId);
  if (!gameState.gameStarted) return null;
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
  if (gameState.turnTimer) {
    clearInterval(gameState.turnTimer);
  }
  
  gameState.currentPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.playerQueue.length;
  gameState.currentPlayerId = gameState.playerQueue[gameState.currentPlayerIndex];
  gameState.turnTimeLeft = TURN_DURATION;
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
  startTurnTimer(roomId);
  
  return {
    currentPlayerId: gameState.currentPlayerId,
    currentPlayerIndex: gameState.currentPlayerIndex,
    turnTimeLeft: gameState.turnTimeLeft
  };
};

const startTurnTimer = (roomId) => {
  const gameState = getGameState(roomId);
  
  gameState.turnTimer = setInterval(() => {
    gameState.turnTimeLeft--;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    io.to(roomId).emit('turnTimeUpdate', {
      turnTimeLeft: gameState.turnTimeLeft
    });
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
    if (gameState.turnTimeLeft <= 0) {
      const nextTurnData = nextTurn(roomId);
      io.to(roomId).emit('turnChanged', nextTurnData);
    }
  }, 1000);
};

const movePlayer = (roomId, playerId, diceValue) => {
  const gameState = getGameState(roomId);
  const player = gameState.players.get(playerId);
  if (!player) return null;
  
  const newPosition = player.position + diceValue;
  
  // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
  if (!player.isOnBigCircle && newPosition > 24) {
    player.isOnBigCircle = true;
    player.position = newPosition - 24;
  } else if (player.isOnBigCircle) {
    player.position = newPosition > 52 ? newPosition - 52 : newPosition;
  } else {
    player.position = newPosition > 24 ? newPosition - 24 : newPosition;
  }
  
  return {
    playerId,
    newPosition: player.position,
    isOnBigCircle: player.isOnBigCircle
  };
};

const updatePlayerBalance = (roomId, playerId, amount) => {
  const gameState = getGameState(roomId);
  const player = gameState.players.get(playerId);
  if (player) {
    player.balance = Math.max(0, player.balance + amount);
    return player.balance;
  }
  return null;
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
const startBreakSystem = (roomId) => {
  console.log(`‚è∞ [SERVER] Starting break system for room: ${roomId}`);
  
  const room = rooms.get(roomId);
  if (!room) {
    console.log(`‚ùå [SERVER] Room not found for break system: ${roomId}`);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  room.gameStartTime = Date.now();
  room.gameEndTime = room.gameStartTime + (room.gameDuration * 60 * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
  room.nextBreakTime = room.gameStartTime + BREAK_INTERVAL;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞
  if (room.nextBreakTime >= room.gameEndTime) {
    console.log(`‚è∞ [SERVER] Game duration too short for breaks, skipping break system for room: ${roomId}`);
    return;
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
  const breakTimer = setTimeout(() => {
    startBreak(roomId);
  }, BREAK_INTERVAL);
  
  breakTimers.set(roomId, breakTimer);
  
  console.log(`‚è∞ [SERVER] Break system started for room ${roomId}. Next break at: ${new Date(room.nextBreakTime).toLocaleString()}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
const startBreak = (roomId) => {
  console.log(`‚òï [SERVER] Starting break for room: ${roomId}`);
  
  const room = rooms.get(roomId);
  if (!room) {
    console.log(`‚ùå [SERVER] Room not found for break: ${roomId}`);
    return;
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Ä—ã–≤–∞
  room.isOnBreak = true;
  room.breakStartTime = Date.now();
  room.breakEndTime = room.breakStartTime + BREAK_DURATION;
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞
  io.to(roomId).emit('breakStarted', {
    breakEndTime: room.breakEndTime,
    duration: BREAK_DURATION
  });
  
  console.log(`‚òï [SERVER] Break started for room ${roomId}. End time: ${new Date(room.breakEndTime).toLocaleString()}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
  const breakEndTimer = setTimeout(() => {
    endBreak(roomId);
  }, BREAK_DURATION);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  if (room.breakEndTime > room.gameEndTime) {
    console.log(`‚è∞ [SERVER] Break would exceed game end time, adjusting break duration for room: ${roomId}`);
    const adjustedDuration = room.gameEndTime - room.breakStartTime;
    clearTimeout(breakEndTimer);
    setTimeout(() => {
      endBreak(roomId);
    }, adjustedDuration);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
  breakTimers.set(`${roomId}_breakEnd`, breakEndTimer);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
const endBreak = (roomId) => {
  console.log(`üéÆ [SERVER] Ending break for room: ${roomId}`);
  
  const room = rooms.get(roomId);
  if (!room) {
    console.log(`‚ùå [SERVER] Room not found for break end: ${roomId}`);
    return;
  }
  
  // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Ä—ã–≤–∞
  room.isOnBreak = false;
  room.breakStartTime = null;
  room.breakEndTime = null;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
  const now = Date.now();
  room.nextBreakTime = now + BREAK_INTERVAL;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  if (room.nextBreakTime > room.gameEndTime) {
    console.log(`‚è∞ [SERVER] Next break would exceed game end time, stopping break system for room: ${roomId}`);
    stopBreakSystem(roomId);
    return;
  }
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
  io.to(roomId).emit('breakEnded', {
    nextBreakTime: room.nextBreakTime
  });
  
  console.log(`üéÆ [SERVER] Break ended for room ${roomId}. Next break at: ${new Date(room.nextBreakTime).toLocaleString()}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
  const nextBreakTimer = setTimeout(() => {
    startBreak(roomId);
  }, BREAK_INTERVAL);
  
  breakTimers.set(roomId, nextBreakTimer);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
const stopBreakSystem = (roomId) => {
  console.log(`‚èπÔ∏è [SERVER] Stopping break system for room: ${roomId}`);
  
  // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
  const breakTimer = breakTimers.get(roomId);
  if (breakTimer) {
    clearTimeout(breakTimer);
    breakTimers.delete(roomId);
  }
  
  const breakEndTimer = breakTimers.get(`${roomId}_breakEnd`);
  if (breakEndTimer) {
    clearTimeout(breakEndTimer);
    breakTimers.delete(`${roomId}_breakEnd`);
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
  const room = rooms.get(roomId);
  if (room) {
    room.isOnBreak = false;
    room.breakStartTime = null;
    room.breakEndTime = null;
    room.nextBreakTime = null;
  }
  
  console.log(`‚èπÔ∏è [SERVER] Break system stopped for room: ${roomId}`);
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
const createDefaultRoom = () => {
  const roomId = 'lobby';
  rooms.set(roomId, {
    roomId: roomId,
    displayName: '–õ–æ–±–±–∏',
    maxPlayers: 1,
    gameDuration: 180, // 3 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    currentPlayers: [],
    status: 'waiting',
    password: '',
    hostId: null,
    createdAt: Date.now()
  });
  console.log(`üè† [SERVER] Default room created: ${roomId}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
const getRoomsList = () => {
  const roomsList = Array.from(rooms.values()).map(room => {
    // –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ö–æ—Å—Ç–∞ –ø–æ hostId
    let hostUsername = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (room.hostId) {
      console.log(`üîç [SERVER] Looking for host username for room ${room.roomId}, hostId: ${room.hostId}`);
      console.log(`üîç [SERVER] Available users:`, Array.from(users.values()).map(u => ({ username: u.username, socketId: u.socketId })));
      console.log(`üîç [SERVER] Room currentPlayers:`, room.currentPlayers.map(p => ({ username: p.username, socketId: p.socketId })));
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      for (const [userId, userData] of users.entries()) {
        if (userData.socketId === room.hostId) {
          hostUsername = userData.username;
          console.log(`‚úÖ [SERVER] Found host username in users: ${hostUsername}`);
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ users, –∏—â–µ–º –≤ currentPlayers –∫–æ–º–Ω–∞—Ç—ã
      if (hostUsername === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        const hostPlayer = room.currentPlayers.find(p => p.socketId === room.hostId);
        if (hostPlayer) {
          hostUsername = hostPlayer.username;
          console.log(`‚úÖ [SERVER] Found host username in currentPlayers: ${hostUsername}`);
        } else {
          console.log(`‚ùå [SERVER] Host player not found in currentPlayers for room ${room.roomId}`);
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id (–µ—Å–ª–∏ hostId —ç—Ç–æ userId, –∞ –Ω–µ socketId)
          for (const [userId, userData] of users.entries()) {
            if (userId === room.hostId) {
              hostUsername = userData.username;
              console.log(`‚úÖ [SERVER] Found host username by userId: ${hostUsername}`);
              break;
            }
          }
        }
      }
    }
    
    return {
      id: room.roomId,
      roomId: room.roomId,
      displayName: room.displayName,
      maxPlayers: room.maxPlayers,
      gameDuration: room.gameDuration || 180, // –í—Ä–µ–º—è –∏–≥—Ä—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
      currentPlayers: room.currentPlayers,
      status: room.status,
      hostId: room.hostId,
      hostUsername: hostUsername, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
      password: room.password,
      createdAt: room.createdAt // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    };
  })
  .sort((a, b) => b.createdAt - a.createdAt); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–æ)
  
  console.log(`üìä [SERVER] getRoomsList: ${roomsList.length} rooms`);
  return roomsList;
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç)
if (rooms.size === 0) {
createDefaultRoom();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
const checkRoomStatus = (roomId) => {
  const room = rooms.get(roomId);
  if (!room) {
    console.log(`‚ùå [SERVER] –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return null;
  }
  
  console.log(`üè† [SERVER] –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`);
  console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${room.displayName}`);
  console.log(`   - –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤: ${room.maxPlayers}`);
  console.log(`   - –¢–µ–∫—É—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: ${room.currentPlayers.length}`);
  console.log(`   - –°—Ç–∞—Ç—É—Å: ${room.status}`);
  console.log(`   - –ò–≥—Ä–æ–∫–∏:`, room.currentPlayers.map(p => ({ username: p.username, socketId: p.socketId, ready: p.ready })));
  
  return room;
};

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üîå [SERVER] New client connected: ${socket.id}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.emit('roomsList', getRoomsList());
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('authenticateUser', (username, email, password, callback) => {
    console.log(`üîê [SERVER] authenticateUser event received from socket ${socket.id}`);
    
    try {
      if (!email || !email.trim()) {
        callback({ success: false, error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        return;
      }
      
      const trimmedEmail = email.trim();
      const trimmedPassword = password ? password.trim() : '';
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const existingUser = getUserByEmail(trimmedEmail);
      
      if (existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        console.log(`üîÑ [SERVER] Updating socketId for existing user: ${existingUser.username}`);
        updateUserSocketId(existingUser.id, socket.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (existingUser.password && existingUser.password !== trimmedPassword) {
          callback({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
          return;
        }
        
        callback({ 
          success: true, 
          isLogin: true,
          userData: {
            id: existingUser.id,
            username: existingUser.username,
            email: existingUser.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User logged in: ${existingUser.username}`);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ
        if (!username || !username.trim()) {
          callback({ success: false, error: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
          return;
        }
        
        const trimmedUsername = username.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        if (!isUsernameUnique(trimmedUsername)) {
          callback({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
          return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = registerUser(trimmedUsername, trimmedEmail, trimmedPassword, socket.id);
        
        callback({ 
          success: true, 
          isLogin: false,
          userData: {
            id: userData.id,
            username: userData.username,
            email: userData.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User registered successfully: ${trimmedUsername}`);
      }
    } catch (error) {
      console.error(`‚ùå [SERVER] Error in authenticateUser:`, error);
      callback({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
  socket.on('checkUsernameUnique', (username, callback) => {
    try {
      const isUnique = isUsernameUnique(username);
      callback({ unique: isUnique });
      console.log(`üîç [SERVER] Username uniqueness check for "${username}": ${isUnique ? 'unique' : 'already exists'}`);
    } catch (error) {
      console.error(`‚ùå [SERVER] Error checking username uniqueness:`, error);
      callback({ unique: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏' });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  socket.on('checkUserExists', (email, callback) => {
    try {
      console.log(`üîç [SERVER] Checking if user exists with email: ${email}`);
      const existingUser = getUserByEmail(email);
      const exists = existingUser !== null;
      console.log(`üîç [SERVER] User exists: ${exists}`);
      callback({ exists });
    } catch (error) {
      console.error(`‚ùå [SERVER] Error checking user existence:`, error);
      callback({ exists: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
  socket.on('getRoomsList', () => {
    console.log('üè† [SERVER] getRoomsList requested by socket:', socket.id);
    const roomsList = getRoomsList();
    socket.emit('roomsList', roomsList);
    console.log('üè† [SERVER] Sent rooms list:', roomsList.length, 'rooms');
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
  socket.on('getRooms', () => {
    console.log('üè† [SERVER] getRooms requested by socket:', socket.id);
    const roomsList = getRoomsList();
    socket.emit('roomsList', roomsList);
    console.log('üè† [SERVER] Sent rooms list:', roomsList.length, 'rooms');
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  socket.on('checkRoomStatus', (roomId) => {
    console.log(`üîç [SERVER] checkRoomStatus requested for room: ${roomId}`);
    console.log(`üîç [SERVER] Socket ID: ${socket.id}`);
    console.log(`üîç [SERVER] Available rooms:`, Array.from(rooms.keys()));
    
    const room = checkRoomStatus(roomId);
    const roomFound = !!room;
    console.log(`üîç [SERVER] Room found:`, roomFound ? 'YES' : 'NO');
    
    socket.emit('roomStatus', { roomId, room, roomFound });
    console.log(`üîç [SERVER] roomStatus event sent to socket: ${socket.id}`);
    
    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    if (room && room.currentPlayers) {
      socket.emit('playersUpdate', transformPlayersData(room.currentPlayers));
      console.log(`üîç [SERVER] playersUpdate event sent to socket: ${socket.id}`);
    }
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  socket.on('createRoom', (roomData) => {
    console.log('üè† [SERVER] createRoom requested:', roomData);
    
    try {
      const { name, password, professionType, profession, maxPlayers, gameDuration, sharedProfession } = roomData;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
      const uniqueRoomId = `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω–æ
      if (!name || !name.trim()) {
        socket.emit('roomCreationError', { 
          success: false, 
          error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!' 
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (1-10)
      if (maxPlayers < 1 || maxPlayers > 10) {
        socket.emit('roomCreationError', { 
          success: false, 
          error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!' 
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã (60-360 –º–∏–Ω—É—Ç)
      const validGameDuration = gameDuration && gameDuration >= 60 && gameDuration <= 360 ? gameDuration : 180;
      if (gameDuration && (gameDuration < 60 || gameDuration > 360)) {
        socket.emit('roomCreationError', { 
          success: false, 
          error: '–í—Ä–µ–º—è –∏–≥—Ä—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 6 —á–∞—Å–æ–≤!' 
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
      const newRoom = {
        roomId: uniqueRoomId,
        displayName: name.trim(),
        maxPlayers: maxPlayers || 2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 (–¥–∏–∞–ø–∞–∑–æ–Ω 1-10)
        gameDuration: validGameDuration, // –í—Ä–µ–º—è –∏–≥—Ä—ã –≤ –º–∏–Ω—É—Ç–∞—Ö
        currentPlayers: [],
        status: 'waiting',
        password: password || '',
        hostId: socket.id,
        createdAt: Date.now(),
        professionType: professionType || 'individual',
        hostProfession: profession || null,
        sharedProfession: sharedProfession || null // –û–±—â–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫
      rooms.set(uniqueRoomId, newRoom);
      
      console.log('üè† [SERVER] Room created:', {
        roomId: uniqueRoomId,
        name: name,
        hostId: socket.id
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º socketId
      let hostUser = null;
      for (const [userId, userData] of users.entries()) {
        if (userData.socketId === socket.id) {
          hostUser = userData;
          break;
        }
      }
      
      if (hostUser) {
        console.log('‚úÖ [SERVER] Host user found:', { username: hostUser.username, email: hostUser.email });
      } else {
        console.log('‚ùå [SERVER] Host user not found for socketId:', socket.id);
        console.log('üìä [SERVER] Available users:', Array.from(users.values()).map(u => ({ username: u.username, socketId: u.socketId })));
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomCreated', { 
        success: true, 
        roomId: uniqueRoomId,
        room: newRoom
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–∞–π–ª
      saveRooms();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
      console.log('üè† [SERVER] Updated rooms list sent to all clients');
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error creating room:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomCreationError', { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' 
      });
    }
  });
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('joinRoom', (roomId, playerData) => {
    console.log('üîó [SERVER] joinRoom requested:', { roomId, playerData });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('joinRoomError', { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const existingPlayer = room.currentPlayers.find(p => p.socketId === socket.id);
      if (existingPlayer) {
        console.log('üîó [SERVER] Player already in room:', { roomId, username: existingPlayer.username });
        socket.emit('roomJoined', { success: true, roomId });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
      if (room.currentPlayers.length >= room.maxPlayers) {
        socket.emit('joinRoomError', { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
        return;
      }
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
      socket.join(roomId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
      const player = {
        id: socket.id,
        username: playerData?.username || '–ò–≥—Ä–æ–∫', // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ–±—ä–µ–∫—Ç–∞
        socketId: socket.id,
        ready: false,
        joinedAt: Date.now()
      };
      
      room.currentPlayers.push(player);
      
      console.log('üîó [SERVER] Player joined room:', {
        roomId,
        username: player.username,
        totalPlayers: room.currentPlayers.length
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomJoined', { success: true, roomId });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç—É
      io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–∞–π–ª
      saveRooms();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
      console.log('üè† [SERVER] Room state after player join:', {
        roomId: room.roomId,
        displayName: room.displayName,
        hostId: room.hostId,
        currentPlayers: room.currentPlayers.map(p => ({ username: p.username, socketId: p.socketId }))
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error joining room:', error);
      socket.emit('joinRoomError', { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  socket.on('playerReady', (data) => {
    const { roomId, playerId, professionId } = data;
    console.log('üéØ [SERVER] Player ready requested:', { roomId, playerId, professionId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const player = room.currentPlayers.find(p => p.socketId === socket.id);
      if (player) {
        player.ready = true;
        player.professionId = professionId;
        console.log('üéØ [SERVER] Player marked as ready:', player.username, 'profession:', professionId);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
        addPlayerToGame(roomId, player, professionId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
        const allReady = room.currentPlayers.every(p => p.ready);
        if (allReady && room.currentPlayers.length >= 2) {
          console.log('üéÆ [SERVER] All players ready, game can start');
          io.to(roomId).emit('allPlayersReady');
        }
      }
    } catch (error) {
      console.error('‚ùå [SERVER] Error setting player ready:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞' });
    }
  });

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  socket.on('startGame', (data) => {
    const { roomId } = data;
    console.log('üéÆ [SERVER] Start game requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
      const allReady = room.currentPlayers.every(p => p.ready);
      if (!allReady) {
        socket.emit('error', { message: '–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã' });
        return;
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
      const gameData = startGame(roomId);
      console.log('üéÆ [SERVER] Game started:', gameData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      io.to(roomId).emit('gameStarted', gameData);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error starting game:', error);
      socket.emit('error', { message: error.message });
    }
  });

  // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
  socket.on('playerRolledDice', (data) => {
    const { roomId, playerId, diceValue } = data;
    console.log('üé≤ [SERVER] Player rolled dice:', { roomId, playerId, diceValue });
    
    try {
      const gameState = getGameState(roomId);
      if (!gameState.gameStarted) {
        socket.emit('error', { message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      if (gameState.currentPlayerId !== playerId) {
        socket.emit('error', { message: '–ù–µ –≤–∞—à —Ö–æ–¥' });
        return;
      }
      
      // –î–≤–∏–≥–∞–µ–º –∏–≥—Ä–æ–∫–∞
      const moveData = movePlayer(roomId, playerId, diceValue);
      console.log('üéÆ [SERVER] Player moved:', moveData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      io.to(roomId).emit('playerMoved', {
        ...moveData,
        diceValue
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error rolling dice:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞' });
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
  socket.on('playerEndTurn', (data) => {
    const { roomId, playerId } = data;
    console.log('‚è≠Ô∏è [SERVER] Player ended turn:', { roomId, playerId });
    
    try {
      const gameState = getGameState(roomId);
      if (!gameState.gameStarted) {
        socket.emit('error', { message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ö–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      if (gameState.currentPlayerId !== playerId) {
        socket.emit('error', { message: '–ù–µ –≤–∞—à —Ö–æ–¥' });
        return;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
      const turnData = nextTurn(roomId);
      console.log('üîÑ [SERVER] Turn changed:', turnData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Ö–æ–¥–∞ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      io.to(roomId).emit('turnChanged', turnData);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error ending turn:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞' });
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞ (–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
  socket.on('endTurn', (data) => {
    const { roomId } = data;
    console.log('‚è≠Ô∏è [SERVER] End turn requested:', { roomId, socketId: socket.id });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ socketId
      const player = room.currentPlayers.find(p => p.socketId === socket.id);
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ' });
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞
      socket.emit('playerEndTurn', { roomId, playerId: player.id });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error in endTurn:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞' });
    }
  });

  // –î–µ–π—Å—Ç–≤–∏–µ –∏–≥—Ä–æ–∫–∞ (–ø–æ–∫—É–ø–∫–∞, –ø—Ä–æ–¥–∞–∂–∞ –∏ —Ç.–¥.)
  socket.on('playerAction', (data) => {
    const { roomId, playerId, actionType, actionData } = data;
    console.log('üéØ [SERVER] Player action:', { roomId, playerId, actionType, actionData });
    
    try {
      const gameState = getGameState(roomId);
      if (!gameState.gameStarted) {
        socket.emit('error', { message: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å' });
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
      switch (actionType) {
        case 'buyAsset':
          // –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–∞
          break;
        case 'sellAsset':
          // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–∞
          break;
        case 'payExpense':
          // –õ–æ–≥–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤
          break;
        case 'receiveIncome':
          // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
          break;
        default:
          socket.emit('error', { message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è' });
          return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
      io.to(roomId).emit('playerActionCompleted', {
        playerId,
        actionType,
        actionData
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error processing player action:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è' });
    }
  });

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  socket.on('startGame', (roomId) => {
    console.log('üöÄ [SERVER] Start game requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã
      if (room.hostId !== socket.id) {
        socket.emit('error', { message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
      const readyPlayers = room.currentPlayers.filter(p => p.ready);
      if (readyPlayers.length < 2) {
        socket.emit('error', { message: '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞' });
        return;
      }
      
      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ "playing"
      room.status = 'playing';
      console.log('üöÄ [SERVER] Game started in room:', { roomId, status: room.status });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
      startBreakSystem(roomId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('gameStarted', {
        success: true,
        roomId: roomId,
        status: room.status,
        players: room.currentPlayers
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error starting game:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  socket.on('getGameState', (roomId) => {
    console.log('üéÆ [SERVER] getGameState requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      socket.emit('gameState', {
        roomId: roomId,
        status: room.status,
        players: room.currentPlayers,
        gamePhase: room.status === 'playing' ? 'playing' : 'waiting'
      });
      
      console.log('üéÆ [SERVER] Game state sent:', { roomId, status: room.status });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error getting game state:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã' });
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
  socket.on('endGame', (roomId) => {
    console.log('üèÅ [SERVER] End game requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã
      if (room.hostId !== socket.id) {
        socket.emit('error', { message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É' });
        return;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
      stopBreakSystem(roomId);
      
      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ "finished"
      room.status = 'finished';
      console.log('üèÅ [SERVER] Game ended in room:', { roomId, status: room.status });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('gameEnded', {
        success: true,
        roomId: roomId,
        status: room.status
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error ending game:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  socket.on('getRoomData', (roomId) => {
    console.log('üè† [SERVER] getRoomData requested:', { roomId });
    console.log('üè† [SERVER] –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç:', rooms.size);
    console.log('üè† [SERVER] –ö–ª—é—á–∏ –∫–æ–º–Ω–∞—Ç:', Array.from(rooms.keys()));
    
    try {
      const room = rooms.get(roomId);
      console.log('üè† [SERVER] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:', room);
      
      if (!room) {
        console.log('‚ùå [SERVER] –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Map');
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ö–æ—Å—Ç–∞
      let hostUsername = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      if (room.hostId) {
        console.log(`üîç [SERVER] getRoomData: Looking for host username, hostId: ${room.hostId}`);
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        for (const [userId, userData] of users.entries()) {
          if (userData.socketId === room.hostId) {
            hostUsername = userData.username;
            console.log(`‚úÖ [SERVER] getRoomData: Found host username in users: ${hostUsername}`);
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ users, –∏—â–µ–º –≤ currentPlayers –∫–æ–º–Ω–∞—Ç—ã
        if (hostUsername === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
          const hostPlayer = room.currentPlayers.find(p => p.socketId === room.hostId);
          if (hostPlayer) {
            hostUsername = hostPlayer.username;
            console.log(`‚úÖ [SERVER] getRoomData: Found host username in currentPlayers: ${hostUsername}`);
          } else {
            console.log(`‚ùå [SERVER] getRoomData: Host player not found in currentPlayers`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id (–µ—Å–ª–∏ hostId —ç—Ç–æ userId, –∞ –Ω–µ socketId)
            for (const [userId, userData] of users.entries()) {
              if (userId === room.hostId) {
                hostUsername = userData.username;
                console.log(`‚úÖ [SERVER] getRoomData: Found host username by userId: ${hostUsername}`);
                break;
              }
            }
          }
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
      socket.emit('roomData', {
        roomId: room.roomId,
        displayName: room.displayName,
        maxPlayers: room.maxPlayers,
        currentPlayers: room.currentPlayers,
        status: room.status,
        hostId: room.hostId,
        hostUsername: hostUsername,
        password: room.password,
        isPublic: room.password === '', // –ö–æ–º–Ω–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è
        professionType: room.professionType || 'individual',
        hostProfession: room.hostProfession || null,
        createdAt: room.createdAt
      });
      
      console.log('üè† [SERVER] Room data sent:', { roomId, displayName: room.displayName });
      
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      socket.emit('playersUpdate', transformPlayersData(room.currentPlayers));
      console.log('üë• [SERVER] Players update sent after roomData:', room.currentPlayers.length, 'players');
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error getting room data:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã' });
    }
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.on('restoreRoomState', (roomId) => {
    console.log('üîÑ [SERVER] restoreRoomState requested:', { roomId, socketId: socket.id });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        console.log('‚ùå [SERVER] Room not found for restore:', roomId);
        socket.emit('restoreRoomStateError', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const existingPlayer = room.currentPlayers.find(p => p.socketId === socket.id);
      if (existingPlayer) {
        console.log('‚úÖ [SERVER] Player found in room, restoring state:', { 
          roomId, 
          username: existingPlayer.username,
          socketId: socket.id 
        });
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.join(roomId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        socket.emit('roomData', {
          roomId: room.roomId,
          displayName: room.displayName,
          maxPlayers: room.maxPlayers,
          currentPlayers: room.currentPlayers,
          status: room.status,
          hostId: room.hostId,
          hostUsername: existingPlayer.username, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          password: room.password,
          isPublic: room.password === '',
          professionType: room.professionType || 'individual',
          hostProfession: room.hostProfession || null,
          createdAt: room.createdAt
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
        socket.emit('roomStateRestored', { 
          roomId, 
          username: existingPlayer.username 
        });
        
        console.log('‚úÖ [SERVER] Room state restored for player:', existingPlayer.username);
      } else {
        console.log('‚ö†Ô∏è [SERVER] Player not found in room, cannot restore state:', { roomId, socketId: socket.id });
        socket.emit('restoreRoomStateError', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ' });
      }
    } catch (error) {
      console.error('‚ùå [SERVER] Error restoring room state:', error);
      socket.emit('restoreRoomStateError', { message: '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è' });
    }
  });

  // üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  socket.on('bankTransfer', (data) => {
    try {
      const { roomId, playerId, recipient, amount } = data;
      console.log('üè¶ [SERVER] Bank transfer request:', { roomId, playerId, recipient, amount });
      
      const room = rooms.get(roomId);
      if (!room) {
        console.log('‚ùå [SERVER] Room not found for bank transfer:', roomId);
        return;
      }
      
      const player = room.currentPlayers.find(p => p.id === playerId);
      if (!player) {
        console.log('‚ùå [SERVER] Player not found for bank transfer:', playerId);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      if (player.balance < amount) {
        socket.emit('bankTransferError', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        return;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
      player.balance -= amount;
      
      // –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Ç–æ–π –∂–µ –∫–æ–º–Ω–∞—Ç–µ
      const recipientPlayer = room.currentPlayers.find(p => p.username === recipient);
      if (recipientPlayer) {
        recipientPlayer.balance += amount;
        console.log('‚úÖ [SERVER] Transfer completed between players:', { 
          from: player.username, 
          to: recipient, 
          amount 
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
      socket.emit('bankTransferSuccess', { 
        message: `–ü–µ—Ä–µ–≤–æ–¥ $${amount} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
        newBalance: player.balance 
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error in bank transfer:', error);
      socket.emit('bankTransferError', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞' });
    }
  });

  socket.on('creditPayment', (data) => {
    try {
      const { roomId, playerId, creditType, amount } = data;
      console.log('üè¶ [SERVER] Credit payment request:', { roomId, playerId, creditType, amount });
      
      const room = rooms.get(roomId);
      if (!room) {
        console.log('‚ùå [SERVER] Room not found for credit payment:', roomId);
        return;
      }
      
      const player = room.currentPlayers.find(p => p.id === playerId);
      if (!player) {
        console.log('‚ùå [SERVER] Player not found for credit payment:', playerId);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      if (player.balance < amount) {
        socket.emit('creditPaymentError', { message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
      if (!player.credits || !player.credits[creditType] || player.credits[creditType] < amount) {
        socket.emit('creditPaymentError', { message: '–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–∞' });
        return;
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞
      player.balance -= amount;
      player.credits[creditType] -= amount;
      
      // –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (player.credits[creditType] <= 0) {
        delete player.credits[creditType];
      }
      
      console.log('‚úÖ [SERVER] Credit payment completed:', { 
        player: player.username, 
        creditType, 
        amount,
        remainingCredit: player.credits[creditType] || 0
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
      socket.emit('creditPaymentSuccess', { 
        message: `–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ $${amount} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`,
        newBalance: player.balance,
        remainingCredits: player.credits
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error in credit payment:', error);
      socket.emit('creditPaymentError', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞' });
    }
  });

  socket.on('getTransactionHistory', (data) => {
    try {
      const { roomId, playerId } = data;
      console.log('üè¶ [SERVER] Transaction history request:', { roomId, playerId });
      
      const room = rooms.get(roomId);
      if (!room) {
        console.log('‚ùå [SERVER] Room not found for transaction history:', roomId);
        return;
      }
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const transactions = [
        {
          id: 1,
          from: 'MAG',
          to: '–ê–ª–µ–∫—Å–µ–π',
          amount: 100,
          type: 'transfer',
          timestamp: '2024-01-15 14:30',
          status: 'completed'
        },
        {
          id: 2,
          from: '–ú–∞—Ä–∏—è',
          to: 'MAG',
          amount: 50,
          type: 'transfer',
          timestamp: '2024-01-15 13:45',
          status: 'completed'
        }
      ];
      
      socket.emit('transactionHistory', transactions);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error getting transaction history:', error);
      socket.emit('transactionHistoryError', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('disconnect', () => {
    console.log(`üîå [SERVER] Client disconnected: ${socket.id}`);
    
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    rooms.forEach((room, roomId) => {
      const playerIndex = room.currentPlayers.findIndex(p => p.socketId === socket.id);
      if (playerIndex !== -1) {
        const removedPlayer = room.currentPlayers[playerIndex];
        room.currentPlayers.splice(playerIndex, 1);
        console.log('üîå [SERVER] Player removed from room:', { 
          roomId, 
          username: removedPlayer.username,
          socketId: socket.id 
        });
        
        // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫ –±—ã–ª —Ö–æ—Å—Ç–æ–º, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
        if (room.hostId === socket.id) {
          console.log(`üîå [SERVER] Host disconnected, stopping break system for room: ${roomId}`);
          stopBreakSystem(roomId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('playersUpdate', transformPlayersData(room.currentPlayers));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–∞–π–ª
        saveRooms();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        const roomsList = getRoomsList();
        io.emit('roomsList', roomsList);
      }
    });
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.get('/api/rooms', (req, res) => {
  const roomsList = getRoomsList();
  res.json(roomsList);
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
loadUsers();
loadRooms();

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–Ω–∞—Ç)
if (rooms.size === 0) {
  createDefaultRoom();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`üöÄ Energy of Money Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üåê HTTP: http://localhost:${PORT}`);
  console.log(`üì° WebSocket: ws://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üè† API –∫–æ–º–Ω–∞—Ç: http://localhost:${PORT}/api/rooms`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down server...');
  saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
  saveRooms(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Shutting down server...');
  saveUsers(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
  saveRooms(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º
  process.exit(0);
});