const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç
const PORT = process.env.PORT || 5000;

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –°–æ–∑–¥–∞–µ–º Socket.IO —Å–µ—Ä–≤–µ—Ä
const io = socketIo(server, {
  cors: {
    origin: ["http://localhost:3000", "http://127.0.0.1:3000"],
    methods: ["GET", "POST"]
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
const users = new Map(); // userId -> userData
const usernameToUserId = new Map(); // username -> userId
const rooms = new Map(); // roomId -> roomData

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User ID
const generateUserId = () => {
  const timestamp = Date.now().toString(36);
  const randomStr = Math.random().toString(36).substring(2, 8);
  return `user_${timestamp}_${randomStr}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
const isUsernameUnique = (username) => {
  return !usernameToUserId.has(username.toLowerCase());
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const registerUser = (username, email, password, socketId) => {
  const userId = generateUserId();
  const userData = {
    id: userId,
    username: username,
    email: email,
    password: password,
    socketId: socketId,
    createdAt: Date.now(),
    lastSeen: Date.now()
  };
  
  users.set(userId, userData);
  usernameToUserId.set(username.toLowerCase(), userId);
  
  console.log(`üë§ [SERVER] User registered: ${username} (${email}) (ID: ${userId})`);
  return userData;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
const getUserByEmail = (email) => {
  console.log(`üîç [SERVER] Searching for user with email: ${email}`);
  
  for (const [userId, userData] of users.entries()) {
    if (userData.email.toLowerCase() === email.toLowerCase()) {
      console.log(`‚úÖ [SERVER] User found:`, { id: userData.id, username: userData.username, email: userData.email });
      return userData;
    }
  }
  
  console.log(`‚ùå [SERVER] User not found with email: ${email}`);
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
const getUserByUsername = (username) => {
  if (!username || typeof username !== 'string') {
    console.log(`‚ùå [SERVER] Invalid username provided:`, username);
    return null;
  }
  
  const userId = usernameToUserId.get(username.toLowerCase());
  if (userId) {
    return users.get(userId);
  }
  
  return null;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è socketId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const updateUserSocketId = (userId, socketId) => {
  console.log(`üîÑ [SERVER] updateUserSocketId called: userId=${userId}, socketId=${socketId}`);
  const user = users.get(userId);
  if (user) {
    user.socketId = socketId;
    user.lastSeen = Date.now();
    users.set(userId, user);
    console.log(`‚úÖ [SERVER] Updated socketId for user ${user.username}: ${socketId}`);
  } else {
    console.log(`‚ùå [SERVER] User not found for userId: ${userId}`);
  }
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
const createDefaultRoom = () => {
  const roomId = 'lobby';
  rooms.set(roomId, {
    roomId: roomId,
    displayName: '–õ–æ–±–±–∏',
    maxPlayers: 1,
    currentPlayers: [],
    status: 'waiting',
    password: '',
    hostId: null,
    createdAt: Date.now()
  });
  console.log(`üè† [SERVER] Default room created: ${roomId}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
const getRoomsList = () => {
  const roomsList = Array.from(rooms.values()).map(room => {
    // –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ö–æ—Å—Ç–∞ –ø–æ hostId
    let hostUsername = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    if (room.hostId) {
      console.log(`üîç [SERVER] Looking for host username for room ${room.roomId}, hostId: ${room.hostId}`);
      console.log(`üîç [SERVER] Available users:`, Array.from(users.values()).map(u => ({ username: u.username, socketId: u.socketId })));
      console.log(`üîç [SERVER] Room currentPlayers:`, room.currentPlayers.map(p => ({ username: p.username, socketId: p.socketId })));
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      for (const [userId, userData] of users.entries()) {
        if (userData.socketId === room.hostId) {
          hostUsername = userData.username;
          console.log(`‚úÖ [SERVER] Found host username in users: ${hostUsername}`);
          break;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ users, –∏—â–µ–º –≤ currentPlayers –∫–æ–º–Ω–∞—Ç—ã
      if (hostUsername === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        const hostPlayer = room.currentPlayers.find(p => p.socketId === room.hostId);
        if (hostPlayer) {
          hostUsername = hostPlayer.username;
          console.log(`‚úÖ [SERVER] Found host username in currentPlayers: ${hostUsername}`);
        } else {
          console.log(`‚ùå [SERVER] Host player not found in currentPlayers for room ${room.roomId}`);
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id (–µ—Å–ª–∏ hostId —ç—Ç–æ userId, –∞ –Ω–µ socketId)
          for (const [userId, userData] of users.entries()) {
            if (userId === room.hostId) {
              hostUsername = userData.username;
              console.log(`‚úÖ [SERVER] Found host username by userId: ${hostUsername}`);
              break;
            }
          }
        }
      }
    }
    
    return {
      id: room.roomId,
      roomId: room.roomId,
      displayName: room.displayName,
      maxPlayers: room.maxPlayers,
      currentPlayers: room.currentPlayers,
      status: room.status,
      hostId: room.hostId,
      hostUsername: hostUsername, // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ö–æ—Å—Ç–∞
      password: room.password,
      createdAt: room.createdAt // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    };
  })
  .sort((a, b) => b.createdAt - a.createdAt); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–æ)
  
  console.log(`üìä [SERVER] getRoomsList: ${roomsList.length} rooms`);
  return roomsList;
};

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
createDefaultRoom();

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log(`üîå [SERVER] New client connected: ${socket.id}`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.emit('roomsList', getRoomsList());
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  socket.on('authenticateUser', (username, email, password, callback) => {
    console.log(`üîê [SERVER] authenticateUser event received from socket ${socket.id}`);
    
    try {
      if (!email || !email.trim()) {
        callback({ success: false, error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        return;
      }
      
      const trimmedEmail = email.trim();
      const trimmedPassword = password ? password.trim() : '';
      
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const existingUser = getUserByEmail(trimmedEmail);
      
      if (existingUser) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        console.log(`üîÑ [SERVER] Updating socketId for existing user: ${existingUser.username}`);
        updateUserSocketId(existingUser.id, socket.id);
        
        callback({ 
          success: true, 
          isLogin: true,
          userData: {
            id: existingUser.id,
            username: existingUser.username,
            email: existingUser.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User logged in: ${existingUser.username}`);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ
        if (!username || !username.trim()) {
          callback({ success: false, error: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
          return;
        }
        
        const trimmedUsername = username.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        if (!isUsernameUnique(trimmedUsername)) {
          callback({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
          return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = registerUser(trimmedUsername, trimmedEmail, trimmedPassword, socket.id);
        
        callback({ 
          success: true, 
          isLogin: false,
          userData: {
            id: userData.id,
            username: userData.username,
            email: userData.email
          }
        });
        
        console.log(`‚úÖ [SERVER] User registered successfully: ${trimmedUsername}`);
      }
    } catch (error) {
      console.error(`‚ùå [SERVER] Error in authenticateUser:`, error);
      callback({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
  socket.on('checkUsernameUnique', (username, callback) => {
    try {
      const isUnique = isUsernameUnique(username);
      callback({ unique: isUnique });
      console.log(`üîç [SERVER] Username uniqueness check for "${username}": ${isUnique ? 'unique' : 'already exists'}`);
    } catch (error) {
      console.error(`‚ùå [SERVER] Error checking username uniqueness:`, error);
      callback({ unique: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏' });
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  socket.on('checkUserExists', (email, callback) => {
    try {
      console.log(`üîç [SERVER] Checking if user exists with email: ${email}`);
      const existingUser = getUserByEmail(email);
      const exists = existingUser !== null;
      console.log(`üîç [SERVER] User exists: ${exists}`);
      callback({ exists });
    } catch (error) {
      console.error(`‚ùå [SERVER] Error checking user existence:`, error);
      callback({ exists: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
  socket.on('getRoomsList', () => {
    console.log('üè† [SERVER] getRoomsList requested by socket:', socket.id);
    const roomsList = getRoomsList();
    socket.emit('roomsList', roomsList);
    console.log('üè† [SERVER] Sent rooms list:', roomsList.length, 'rooms');
  });
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
  socket.on('getRooms', () => {
    console.log('üè† [SERVER] getRooms requested by socket:', socket.id);
    const roomsList = getRoomsList();
    socket.emit('roomsList', roomsList);
    console.log('üè† [SERVER] Sent rooms list:', roomsList.length, 'rooms');
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  socket.on('createRoom', (roomData) => {
    console.log('üè† [SERVER] createRoom requested:', roomData);
    
    try {
      const { name, password, professionType, profession, maxPlayers } = roomData;
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–æ–º–Ω–∞—Ç—ã
      const uniqueRoomId = `room_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω–æ
      if (!name || !name.trim()) {
        socket.emit('roomCreationError', { 
          success: false, 
          error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!' 
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ (1-10)
      if (maxPlayers < 1 || maxPlayers > 10) {
        socket.emit('roomCreationError', { 
          success: false, 
          error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!' 
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
      const newRoom = {
        roomId: uniqueRoomId,
        displayName: name.trim(),
        maxPlayers: maxPlayers || 2, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 (–¥–∏–∞–ø–∞–∑–æ–Ω 1-10)
        currentPlayers: [],
        status: 'waiting',
        password: password || '',
        hostId: socket.id,
        createdAt: Date.now(),
        professionType: professionType || 'individual',
        hostProfession: profession || null
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫
      rooms.set(uniqueRoomId, newRoom);
      
      console.log('üè† [SERVER] Room created:', {
        roomId: uniqueRoomId,
        name: name,
        hostId: socket.id
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º socketId
      let hostUser = null;
      for (const [userId, userData] of users.entries()) {
        if (userData.socketId === socket.id) {
          hostUser = userData;
          break;
        }
      }
      
      if (hostUser) {
        console.log('‚úÖ [SERVER] Host user found:', { username: hostUser.username, email: hostUser.email });
      } else {
        console.log('‚ùå [SERVER] Host user not found for socketId:', socket.id);
        console.log('üìä [SERVER] Available users:', Array.from(users.values()).map(u => ({ username: u.username, socketId: u.socketId })));
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomCreated', { 
        success: true, 
        roomId: uniqueRoomId,
        room: newRoom
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
      console.log('üè† [SERVER] Updated rooms list sent to all clients');
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error creating room:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomCreationError', { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã' 
      });
    }
  });
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  socket.on('joinRoom', (roomId, playerData) => {
    console.log('üîó [SERVER] joinRoom requested:', { roomId, playerData });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('joinRoomError', { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const existingPlayer = room.currentPlayers.find(p => p.socketId === socket.id);
      if (existingPlayer) {
        console.log('üîó [SERVER] Player already in room:', { roomId, username: existingPlayer.username });
        socket.emit('roomJoined', { success: true, roomId });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
      if (room.currentPlayers.length >= room.maxPlayers) {
        socket.emit('joinRoomError', { success: false, error: '–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
        return;
      }
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
      socket.join(roomId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
      const player = {
        id: socket.id,
        username: playerData?.username || '–ò–≥—Ä–æ–∫', // –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ–±—ä–µ–∫—Ç–∞
        socketId: socket.id,
        ready: false,
        joinedAt: Date.now()
      };
      
      room.currentPlayers.push(player);
      
      console.log('üîó [SERVER] Player joined room:', {
        roomId,
        username: player.username,
        totalPlayers: room.currentPlayers.length
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ emit
      socket.emit('roomJoined', { success: true, roomId });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç—É
      io.to(roomId).emit('playersUpdate', room.currentPlayers);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
      console.log('üè† [SERVER] Room state after player join:', {
        roomId: room.roomId,
        displayName: room.displayName,
        hostId: room.hostId,
        currentPlayers: room.currentPlayers.map(p => ({ username: p.username, socketId: p.socketId }))
      });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error joining room:', error);
      socket.emit('joinRoomError', { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }
  });
  
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  socket.on('playerReady', (roomId, playerId) => {
    console.log('üéØ [SERVER] Player ready requested:', { roomId, playerId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
      const player = room.currentPlayers.find(p => p.socketId === socket.id);
      if (player) {
        player.ready = true;
        console.log('üéØ [SERVER] Player marked as ready:', { roomId, username: player.username });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç—É
        io.to(roomId).emit('playersUpdate', room.currentPlayers);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
        const roomsList = getRoomsList();
        io.emit('roomsList', roomsList);
      }
    } catch (error) {
      console.error('‚ùå [SERVER] Error setting player ready:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏' });
    }
  });

  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  socket.on('startGame', (roomId) => {
    console.log('üöÄ [SERVER] Start game requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º –∫–æ–º–Ω–∞—Ç—ã
      if (room.hostId !== socket.id) {
        socket.emit('error', { message: '–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É' });
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
      const readyPlayers = room.currentPlayers.filter(p => p.ready);
      if (readyPlayers.length < 2) {
        socket.emit('error', { message: '–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞' });
        return;
      }
      
      // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ "playing"
      room.status = 'playing';
      console.log('üöÄ [SERVER] Game started in room:', { roomId, status: room.status });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('gameStarted', {
        success: true,
        roomId: roomId,
        status: room.status,
        players: room.currentPlayers
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –≤—Å–µ–º
      const roomsList = getRoomsList();
      io.emit('roomsList', roomsList);
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error starting game:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  socket.on('getGameState', (roomId) => {
    console.log('üéÆ [SERVER] getGameState requested:', { roomId });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
      socket.emit('gameState', {
        roomId: roomId,
        status: room.status,
        players: room.currentPlayers,
        gamePhase: room.status === 'playing' ? 'playing' : 'waiting'
      });
      
      console.log('üéÆ [SERVER] Game state sent:', { roomId, status: room.status });
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error getting game state:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  socket.on('getRoomData', (roomId) => {
    console.log('üè† [SERVER] getRoomData requested:', { roomId });
    console.log('üè† [SERVER] –í—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç:', rooms.size);
    console.log('üè† [SERVER] –ö–ª—é—á–∏ –∫–æ–º–Ω–∞—Ç:', Array.from(rooms.keys()));
    
    try {
      const room = rooms.get(roomId);
      console.log('üè† [SERVER] –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞:', room);
      
      if (!room) {
        console.log('‚ùå [SERVER] –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Map');
        socket.emit('error', { message: '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ö–æ—Å—Ç–∞
      let hostUsername = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      if (room.hostId) {
        console.log(`üîç [SERVER] getRoomData: Looking for host username, hostId: ${room.hostId}`);
        
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ socketId –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        for (const [userId, userData] of users.entries()) {
          if (userData.socketId === room.hostId) {
            hostUsername = userData.username;
            console.log(`‚úÖ [SERVER] getRoomData: Found host username in users: ${hostUsername}`);
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ users, –∏—â–µ–º –≤ currentPlayers –∫–æ–º–Ω–∞—Ç—ã
        if (hostUsername === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
          const hostPlayer = room.currentPlayers.find(p => p.socketId === room.hostId);
          if (hostPlayer) {
            hostUsername = hostPlayer.username;
            console.log(`‚úÖ [SERVER] getRoomData: Found host username in currentPlayers: ${hostUsername}`);
          } else {
            console.log(`‚ùå [SERVER] getRoomData: Host player not found in currentPlayers`);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ id (–µ—Å–ª–∏ hostId —ç—Ç–æ userId, –∞ –Ω–µ socketId)
            for (const [userId, userData] of users.entries()) {
              if (userId === room.hostId) {
                hostUsername = userData.username;
                console.log(`‚úÖ [SERVER] getRoomData: Found host username by userId: ${hostUsername}`);
                break;
              }
            }
          }
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç—É
      socket.emit('roomData', {
        roomId: room.roomId,
        displayName: room.displayName,
        maxPlayers: room.maxPlayers,
        currentPlayers: room.currentPlayers,
        status: room.status,
        hostId: room.hostId,
        hostUsername: hostUsername,
        password: room.password,
        isPublic: room.password === '', // –ö–æ–º–Ω–∞—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è
        professionType: room.professionType || 'individual',
        hostProfession: room.hostProfession || null,
        createdAt: room.createdAt
      });
      
      console.log('üè† [SERVER] Room data sent:', { roomId, displayName: room.displayName });
      
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
      socket.emit('playersUpdate', room.currentPlayers);
      console.log('üë• [SERVER] Players update sent after roomData:', room.currentPlayers.length, 'players');
      
    } catch (error) {
      console.error('‚ùå [SERVER] Error getting room data:', error);
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã' });
    }
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.on('restoreRoomState', (roomId) => {
    console.log('üîÑ [SERVER] restoreRoomState requested:', { roomId, socketId: socket.id });
    
    try {
      const room = rooms.get(roomId);
      if (!room) {
        console.log('‚ùå [SERVER] Room not found for restore:', roomId);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const existingPlayer = room.currentPlayers.find(p => p.socketId === socket.id);
      if (existingPlayer) {
        console.log('‚úÖ [SERVER] Player found in room, restoring state:', { 
          roomId, 
          username: existingPlayer.username,
          socketId: socket.id 
        });
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ
        socket.join(roomId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        socket.emit('roomData', {
          roomId: room.roomId,
          displayName: room.displayName,
          maxPlayers: room.maxPlayers,
          currentPlayers: room.currentPlayers,
          status: room.status,
          hostId: room.hostId,
          hostUsername: existingPlayer.username, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          password: room.password,
          isPublic: room.password === '',
          professionType: room.professionType || 'individual',
          hostProfession: room.hostProfession || null,
          createdAt: room.createdAt
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('playersUpdate', room.currentPlayers);
        
        console.log('‚úÖ [SERVER] Room state restored for player:', existingPlayer.username);
      } else {
        console.log('‚ö†Ô∏è [SERVER] Player not found in room, cannot restore state:', { roomId, socketId: socket.id });
      }
    } catch (error) {
      console.error('‚ùå [SERVER] Error restoring room state:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  socket.on('disconnect', () => {
    console.log(`üîå [SERVER] Client disconnected: ${socket.id}`);
    
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    rooms.forEach((room, roomId) => {
      const playerIndex = room.currentPlayers.findIndex(p => p.socketId === socket.id);
      if (playerIndex !== -1) {
        const removedPlayer = room.currentPlayers[playerIndex];
        room.currentPlayers.splice(playerIndex, 1);
        console.log('üîå [SERVER] Player removed from room:', { 
          roomId, 
          username: removedPlayer.username,
          socketId: socket.id 
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        io.to(roomId).emit('playersUpdate', room.currentPlayers);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        const roomsList = getRoomsList();
        io.emit('roomsList', roomsList);
      }
    });
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.get('/api/rooms', (req, res) => {
  const roomsList = getRoomsList();
  res.json(roomsList);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`üöÄ Energy of Money Server –∑–∞–ø—É—â–µ–Ω!`);
  console.log(`üåê HTTP: http://localhost:${PORT}`);
  console.log(`üì° WebSocket: ws://localhost:${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üè† API –∫–æ–º–Ω–∞—Ç: http://localhost:${PORT}/api/rooms`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down server...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Shutting down server...');
  process.exit(0);
});