// üéÆ GameLogic - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–≥—Ä—ã
import React, { useState, useCallback } from 'react';
import { PROFESSIONS } from '../data/professions';

export class GameLogic {
  constructor() {
    this.players = new Map();
    this.currentPlayerIndex = 0;
    this.playerQueue = [];
    this.gameStarted = false;
    this.turnTimeLeft = 120;
    this.currentPlayerId = null;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π
  initializePlayer(playerData, professionId) {
    // –ï—Å–ª–∏ professionId –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if (!professionId) {
      return {
        id: playerData.id,
        username: playerData.username,
        socketId: playerData.socketId,
        position: 1, // –ù–∞—á–∏–Ω–∞—é—Ç —Å 1-–π –∫–ª–µ—Ç–∫–∏
        color: this.getPlayerColor(playerData.id),
        profession: null, // –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        balance: 0,
        salary: 0,
        passiveIncome: 0,
        totalExpenses: 0,
        cashFlow: 0,
        ready: false,
        isOnBigCircle: false, // –ù–∞—á–∏–Ω–∞—é—Ç –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ
        assets: [],
        children: 0,
        loans: {
          auto: 0,
          education: 0,
          housing: 0,
          cards: 0
        }
      };
    }

    const profession = PROFESSIONS.find(p => p.id === professionId);
    if (!profession) {
      throw new Error(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å ID ${professionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    return {
      id: playerData.id,
      username: playerData.username,
      socketId: playerData.socketId,
      position: 1, // –ù–∞—á–∏–Ω–∞—é—Ç —Å 1-–π –∫–ª–µ—Ç–∫–∏
      color: this.getPlayerColor(playerData.id),
      profession: profession,
      balance: profession.balance,
      salary: profession.salary,
      passiveIncome: profession.passiveIncome,
      totalExpenses: profession.totalExpenses,
      cashFlow: profession.cashFlow,
      ready: false,
      isOnBigCircle: false, // –ù–∞—á–∏–Ω–∞—é—Ç –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ
      assets: [],
      children: 0,
      loans: {
        auto: profession.creditAuto || 0,
        education: profession.creditEducation || 0,
        housing: profession.creditHousing || 0,
        cards: profession.creditCards || 0
      }
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
  getPlayerColor(playerId) {
    const colors = ['#EF4444', '#3B82F6', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];
    return colors[playerId % colors.length];
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
  addPlayer(playerData, professionId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
    if (this.players.has(playerData.id)) {
      console.log('üéÆ [GameLogic] –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', playerData.username);
      return this.players.get(playerData.id);
    }
    
    const player = this.initializePlayer(playerData, professionId);
    this.players.set(player.id, player);
    this.playerQueue.push(player.id);
    console.log('üéÆ [GameLogic] –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–≥—Ä–æ–∫:', player.username);
    return player;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
  removePlayer(playerId) {
    this.players.delete(playerId);
    this.playerQueue = this.playerQueue.filter(id => id !== playerId);
    
    // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –±—ã–ª —Ç–µ–∫—É—â–∏–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    if (this.currentPlayerId === playerId) {
      this.nextTurn();
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  clearAllPlayers() {
    this.players.clear();
    this.playerQueue = [];
    this.currentPlayerId = null;
    this.currentPlayerIndex = 0;
    console.log('üéÆ [GameLogic] –í—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  startGame() {
    console.log('üéÆ [GameLogic] startGame –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üéÆ [GameLogic] playerQueue:', this.playerQueue);
    console.log('üéÆ [GameLogic] players.size:', this.players.size);
    
    if (this.playerQueue.length < 2) {
      throw new Error('–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞');
    }
    
    this.gameStarted = true;
    this.currentPlayerIndex = 0;
    this.currentPlayerId = this.playerQueue[0];
    this.turnTimeLeft = 120;
    
    console.log('üéÆ [GameLogic] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞:', {
      currentPlayerId: this.currentPlayerId,
      currentPlayerIndex: this.currentPlayerIndex,
      playerQueue: this.playerQueue
    });
    
    return {
      gameStarted: true,
      playerQueue: this.playerQueue,
      currentPlayerId: this.currentPlayerId,
      currentPlayerIndex: this.currentPlayerIndex
    };
  }

  // –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
  nextTurn() {
    if (!this.gameStarted) return null;
    
    this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.playerQueue.length;
    this.currentPlayerId = this.playerQueue[this.currentPlayerIndex];
    this.turnTimeLeft = 120;
    
    return {
      currentPlayerId: this.currentPlayerId,
      currentPlayerIndex: this.currentPlayerIndex,
      turnTimeLeft: this.turnTimeLeft
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  getCurrentPlayer() {
    console.log('üéÆ [GameLogic] getCurrentPlayer –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üéÆ [GameLogic] currentPlayerId:', this.currentPlayerId);
    console.log('üéÆ [GameLogic] players.size:', this.players.size);
    
    const currentPlayer = this.players.get(this.currentPlayerId);
    console.log('üéÆ [GameLogic] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫:', currentPlayer);
    
    return currentPlayer;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
  updatePlayerBalance(playerId, amount) {
    const player = this.players.get(playerId);
    if (player) {
      player.balance = Math.max(0, player.balance + amount);
      return player.balance;
    }
    return null;
  }

  // –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  movePlayer(playerId, diceValue) {
    const player = this.players.get(playerId);
    if (!player) return null;
    
    const newPosition = player.position + diceValue;
    
    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
    if (!player.isOnBigCircle && newPosition > 24) {
      player.isOnBigCircle = true;
      player.position = newPosition - 24; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–æ–ª—å—à–æ–π –∫—Ä—É–≥
    } else if (player.isOnBigCircle) {
      player.position = newPosition > 52 ? newPosition - 52 : newPosition;
    } else {
      player.position = newPosition > 24 ? newPosition - 24 : newPosition;
    }
    
    return {
      playerId,
      newPosition: player.position,
      isOnBigCircle: player.isOnBigCircle
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  getAllPlayers() {
    console.log('üéÆ [GameLogic] getAllPlayers –≤—ã–∑–≤–∞–Ω–∞');
    console.log('üéÆ [GameLogic] players.size:', this.players.size);
    console.log('üéÆ [GameLogic] players.keys():', Array.from(this.players.keys()));
    
    const allPlayers = Array.from(this.players.values());
    console.log('üéÆ [GameLogic] –í—Å–µ –∏–≥—Ä–æ–∫–∏:', allPlayers);
    
    return allPlayers;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  getGameState() {
    return {
      players: this.getAllPlayers(),
      currentPlayerId: this.currentPlayerId,
      currentPlayerIndex: this.currentPlayerIndex,
      playerQueue: this.playerQueue,
      gameStarted: this.gameStarted,
      turnTimeLeft: this.turnTimeLeft
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–µ–∫—É—â–∏–º
  isCurrentPlayer(playerId) {
    return this.currentPlayerId === playerId;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
  getPlayerIndex(playerId) {
    return this.playerQueue.indexOf(playerId);
  }
}

// üéØ –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
export const useGameLogic = () => {
  const [gameLogic] = useState(() => new GameLogic());
  const [gameState, setGameState] = useState(gameLogic.getGameState());

  const updateGameState = useCallback(() => {
    setGameState(gameLogic.getGameState());
  }, [gameLogic]);

  const addPlayer = useCallback((playerData, professionId) => {
    const player = gameLogic.addPlayer(playerData, professionId);
    updateGameState();
    return player;
  }, [gameLogic, updateGameState]);

  const removePlayer = useCallback((playerId) => {
    gameLogic.removePlayer(playerId);
    updateGameState();
  }, [gameLogic, updateGameState]);

  const startGame = useCallback(() => {
    const result = gameLogic.startGame();
    updateGameState();
    return result;
  }, [gameLogic, updateGameState]);

  const nextTurn = useCallback(() => {
    const result = gameLogic.nextTurn();
    updateGameState();
    return result;
  }, [gameLogic, updateGameState]);

  const movePlayer = useCallback((playerId, diceValue) => {
    const result = gameLogic.movePlayer(playerId, diceValue);
    updateGameState();
    return result;
  }, [gameLogic, updateGameState]);

  const updatePlayerBalance = useCallback((playerId, amount) => {
    const result = gameLogic.updatePlayerBalance(playerId, amount);
    updateGameState();
    return result;
  }, [gameLogic, updateGameState]);

  const clearAllPlayers = useCallback(() => {
    gameLogic.clearAllPlayers();
    updateGameState();
  }, [gameLogic, updateGameState]);

  return {
    gameState,
    addPlayer,
    removePlayer,
    clearAllPlayers,
    startGame,
    nextTurn,
    movePlayer,
    updatePlayerBalance,
    getCurrentPlayer: () => gameLogic.getCurrentPlayer(),
    isCurrentPlayer: (playerId) => gameLogic.isCurrentPlayer(playerId),
    getAllPlayers: () => gameLogic.getAllPlayers()
  };
};
