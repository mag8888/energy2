import React, { useState, useEffect } from 'react';
import { Box, Typography, Button, IconButton, LinearProgress, Avatar, Chip, Snackbar, Alert, Modal, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Select, MenuItem, FormControl, InputLabel, List, ListItem, ListItemText, Divider } from '@mui/material';
import { motion } from 'framer-motion';
import { 
  Casino, 
  Timer, 
  Settings, 
  Help, 
  ExitToApp,
  PlayArrow,
  Pause,
  Refresh,
  VolumeUp,
  Fullscreen,
  AccountBalance,
  Inventory,
  Group
} from '@mui/icons-material';

const OriginalGameBoard = ({ roomId, playerData, onExit }) => {
  console.log('üéÆ [OriginalGameBoard] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', { roomId, playerData });
  console.log('üéÆ [OriginalGameBoard] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  
  // CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);
  
  const [originalBoard] = useState(() => {
    // –°–æ–∑–¥–∞–µ–º 76 –∫–ª–µ—Ç–æ–∫: 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö + 52 –≤–Ω–µ—à–Ω–∏—Ö
    const cells = [];
    
    // 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
    const innerCells = [
      { id: 1, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 2, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 3, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 4, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è', description: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞ (10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è)' },
      { id: 5, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 6, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 7, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 8, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 9, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 10, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 11, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 12, type: 'child', name: '–†–µ–±–µ–Ω–æ–∫', color: '#A855F7', icon: 'üë∂', description: '–†–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã' },
      { id: 13, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 14, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 15, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 16, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 17, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 18, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 19, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 20, type: 'loss', name: '–ü–æ—Ç–µ—Ä—è', color: '#18181B', icon: 'üí∏', description: '–ü–æ—Ç–µ—Ä—è –¥–µ–Ω–µ–≥ (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ) - –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ 2 —Ö–æ–¥–∞ –∏–ª–∏ 3 —Ä–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞' },
      { id: 21, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 22, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 23, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 24, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    cells.push(...innerCells);
    
    // 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
    const outerCells = [
      { id: 25, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 26, type: 'dream', name: '–î–æ–º –º–µ—á—Ç—ã', color: '#EC4899', icon: 'üè†', description: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã –¥–ª—è —Å–µ–º—å–∏', cost: 100000, income: 0 },
      { id: 27, type: 'business', name: '–ö–æ—Ñ–µ–π–Ω—è', color: '#10B981', icon: '‚òï', description: '–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞', cost: 100000, income: 3000 },
      { id: 28, type: 'loss', name: '–ê—É–¥–∏—Ç', color: '#EF4444', icon: 'üìã', description: '–ê—É–¥–∏—Ç - –ø–æ—Ç–µ—Ä—è 50% –∞–∫—Ç–∏–≤–æ–≤', cost: 0, income: 0 },
      { id: 29, type: 'business', name: '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è', color: '#10B981', icon: 'üíÜ', description: '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–ø–∞', cost: 270000, income: 5000 },
      { id: 30, type: 'dream', name: '–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞', color: '#EC4899', icon: 'üßä', description: '–ü–æ—Å–µ—Ç–∏—Ç—å –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥—É', cost: 150000, income: 0 },
      { id: 31, type: 'business', name: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', color: '#10B981', icon: 'üì±', description: '–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ–¥–ø–∏—Å–∫–∞)', cost: 420000, income: 10000 },
      { id: 32, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è', description: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', cost: 0, income: 0 },
      { id: 33, type: 'business', name: '–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#3B82F6', icon: 'üìä', description: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', cost: 160000, income: 4000 },
      { id: 34, type: 'loss', name: '–ö—Ä–∞–∂–∞', color: '#EF4444', icon: 'ü¶π', description: '–ö—Ä–∞–∂–∞ 100% –Ω–∞–ª–∏—á–Ω—ã—Ö', cost: 0, income: 0 },
      { id: 35, type: 'business', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', color: '#3B82F6', icon: 'üè®', description: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å/–±—É—Ç–∏–∫-–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', cost: 200000, income: 5000 },
      { id: 36, type: 'dream', name: '–í—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã', color: '#EC4899', icon: 'üèîÔ∏è', description: '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ –≤—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã –º–∏—Ä–∞', cost: 500000, income: 0 },
      { id: 37, type: 'business', name: '–§—Ä–∞–Ω—à–∏–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', color: '#3B82F6', icon: 'üçΩÔ∏è', description: '–§—Ä–∞–Ω—à–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', cost: 320000, income: 8000 },
      { id: 38, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 39, type: 'business', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', color: '#3B82F6', icon: 'üè®', description: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å/–±—É—Ç–∏–∫-–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', cost: 200000, income: 4000 },
      { id: 40, type: 'dream', name: '–ö–Ω–∏–≥–∞-–±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä', color: '#EC4899', icon: 'üìö', description: '–°—Ç–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–º –∫–Ω–∏–≥–∏-–±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä–∞', cost: 300000, income: 0 },
      { id: 41, type: 'business', name: '–ô–æ–≥–∞-—Ü–µ–Ω—Ç—Ä', color: '#3B82F6', icon: 'üßò', description: '–ô–æ–≥–∞- –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä', cost: 170000, income: 4500 },
      { id: 42, type: 'loss', name: '–†–∞–∑–≤–æ–¥', color: '#EF4444', icon: 'üíî', description: '–†–∞–∑–≤–æ–¥ - –ø–æ—Ç–µ—Ä—è 50% –∞–∫—Ç–∏–≤–æ–≤', cost: 0, income: 0 },
      { id: 43, type: 'business', name: '–ê–≤—Ç–æ–º–æ–π–∫–∏', color: '#3B82F6', icon: 'üöó', description: '–°–µ—Ç—å –∞–≤—Ç–æ–º–æ–µ–∫ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', cost: 120000, income: 3000 },
      { id: 44, type: 'dream', name: '–Ø—Ö—Ç–∞ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', color: '#F59E0B', icon: '‚õµ', description: '–ñ–∏—Ç—å –≥–æ–¥ –Ω–∞ —è—Ö—Ç–µ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', cost: 300000, income: 0 },
      { id: 45, type: 'business', name: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', color: '#3B82F6', icon: 'üíá', description: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã/–±–∞—Ä–±–µ—Ä—à–æ–ø', cost: 500000, income: 15000 },
      { id: 46, type: 'dream', name: '–§–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', color: '#F59E0B', icon: 'üé≠', description: '–°–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤', cost: 300000, income: 0 },
      { id: 47, type: 'business', name: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω', color: '#3B82F6', icon: 'üõçÔ∏è', description: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã', cost: 110000, income: 3000 },
      { id: 48, type: 'dream', name: '–ú–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', color: '#F59E0B', icon: 'üé™', description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', cost: 200000, income: 0 },
      { id: 49, type: 'loss', name: '–ü–æ–∂–∞—Ä', color: '#EF4444', icon: 'üî•', description: '–ü–æ–∂–∞—Ä (–≤—ã —Ç–µ—Ä—è–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å –º–∏–Ω –¥–æ—Ö–æ–¥–æ–º)', cost: 0, income: 0 },
      { id: 50, type: 'dream', name: '–†–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', color: '#F59E0B', icon: 'üèïÔ∏è', description: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', cost: 500000, income: 0 },
      { id: 51, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 52, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#F59E0B', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 200000, income: 0 },
      { id: 53, type: 'business', name: '–≠–∫–æ-—Ä–∞–Ω—á–æ', color: '#3B82F6', icon: 'üåø', description: '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å (—ç–∫–æ-—Ä–∞–Ω—á–æ)', cost: 1000000, income: 20000 },
      { id: 54, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#F59E0B', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 300000, income: 0 },
      { id: 55, type: 'business', name: '–ë–∏—Ä–∂–∞', color: '#3B82F6', icon: 'üìà', description: '–ë–∏—Ä–∂–∞ (–†–∞–∑–æ–≤–æ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 500 000$ –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 5 –∏–ª–∏ 6 –Ω–∞ –∫—É–±–∏–∫–µ)', cost: 50000, income: 500000 },
      { id: 56, type: 'dream', name: '–ß–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç', color: '#F59E0B', icon: '‚úàÔ∏è', description: '–ö—É–ø–∏—Ç—å —á–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç', cost: 1000000, income: 0 },
      { id: 57, type: 'business', name: 'NFT-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', color: '#3B82F6', icon: 'üé®', description: 'NFT-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', cost: 400000, income: 12000 },
      { id: 58, type: 'dream', name: '–ú–∏—Ä–æ–≤–æ–π –ª–∏–¥–µ—Ä', color: '#F59E0B', icon: 'üëë', description: '–°—Ç–∞—Ç—å –º–∏—Ä–æ–≤—ã–º –ª–∏–¥–µ—Ä–æ–º –º–Ω–µ–Ω–∏–π', cost: 1000000, income: 0 },
      { id: 59, type: 'business', name: '–®–∫–æ–ª–∞ —è–∑—ã–∫–æ–≤', color: '#3B82F6', icon: 'üåç', description: '–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤', cost: 20000, income: 3000 },
      { id: 60, type: 'dream', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤', color: '#F59E0B', icon: 'üèéÔ∏è', description: '–ö—É–ø–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤', cost: 1000000, income: 0 },
      { id: 61, type: 'business', name: '–®–∫–æ–ª–∞ –±—É–¥—É—â–µ–≥–æ', color: '#3B82F6', icon: 'üéì', description: '–°–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É –±—É–¥—É—â–µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–π', cost: 300000, income: 10000 },
      { id: 62, type: 'dream', name: '–§–∏–ª—å–º', color: '#F59E0B', icon: 'üé¨', description: '–°–Ω—è—Ç—å –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π —Ñ–∏–ª—å–º', cost: 500000, income: 0 },
      { id: 63, type: 'loss', name: '–†–µ–π–¥–µ—Ä—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç', color: '#EF4444', icon: 'ü¶à', description: '–†–µ–π–¥–µ—Ä—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç (–í—ã —Ç–µ—Ä—è–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å –∫—Ä—É–ø–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º)', cost: 0, income: 0 },
      { id: 64, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#F59E0B', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 200000, income: 0 },
      { id: 65, type: 'business', name: '–ê–≤—Ç–æ–º–æ–π–∫–∏', color: '#3B82F6', icon: 'üöó', description: '–°–µ—Ç—å –∞–≤—Ç–æ–º–æ–µ–∫ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', cost: 120000, income: 3500 },
      { id: 66, type: 'dream', name: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è —è—Ö—Ç–∞', color: '#F59E0B', icon: '‚õµ', description: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è –Ø—Ö—Ç–∞', cost: 300000, income: 0 },
      { id: 67, type: 'business', name: '–§—Ä–∞–Ω—à–∏–∑–∞ "–ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥"', color: '#3B82F6', icon: 'üí∏', description: '–§—Ä–∞–Ω—à–∏–∑–∞ "–ø–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥"', cost: 100000, income: 10000 },
      { id: 68, type: 'loss', name: '–°–∞–Ω–∫—Ü–∏–∏', color: '#EF4444', icon: 'üö´', description: '–°–∞–Ω–∫—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ —Å—á–µ—Ç–∞', cost: 0, income: 0 },
      { id: 69, type: 'business', name: '–ü–µ–∫–∞—Ä–Ω—è', color: '#3B82F6', icon: 'ü•ñ', description: '–ü–µ–∫–∞—Ä–Ω—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', cost: 300000, income: 7000 },
      { id: 70, type: 'dream', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', color: '#F59E0B', icon: 'ü§ù', description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', cost: 200000, income: 0 },
      { id: 71, type: 'business', name: '–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', color: '#3B82F6', icon: 'üíª', description: '–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', cost: 200000, income: 5000 },
      { id: 72, type: 'dream', name: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å', color: '#F59E0B', icon: 'üöÄ', description: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å', cost: 250000, income: 0 },
      { id: 73, type: 'business', name: '–§–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏', color: '#3B82F6', icon: 'üí™', description: '–°–µ—Ç—å —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–π', cost: 750000, income: 20000 },
      { id: 74, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', color: '#F59E0B', icon: 'üåç', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', cost: 300000, income: 0 },
      { id: 75, type: 'business', name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', color: '#3B82F6', icon: 'üè¢', description: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', cost: 500000, income: 10000 },
      { id: 76, type: 'dream', name: '–ú–µ—á—Ç–∞', color: '#F59E0B', icon: '‚≠ê', description: '–ü—Ä–∏–¥—É–º–∞–π —Å–≤–æ—é –º–µ—á—Ç—É', cost: 0, income: 0 }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    cells.push(...outerCells);
    
    return cells;
  });

  const [diceValue, setDiceValue] = useState(1);
  const [isRolling, setIsRolling] = useState(false);
  const [timerProgress, setTimerProgress] = useState(75);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ñ–∏—à–µ–∫
  const [players, setPlayers] = useState([
    { id: 1, name: 'MAG', position: 1, color: '#EF4444', profession: '–ò–Ω–∂–µ–Ω–µ—Ä' },
    { id: 2, name: '–ê–ª–µ–∫—Å–µ–π', position: 1, color: '#3B82F6', profession: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
    { id: 3, name: '–ú–∞—Ä–∏—è', position: 1, color: '#10B981', profession: '–î–∏–∑–∞–π–Ω–µ—Ä' },
    { id: 4, name: '–î–º–∏—Ç—Ä–∏–π', position: 1, color: '#F59E0B', profession: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' }
  ]);
  
  const [currentPlayer, setCurrentPlayer] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const [isMoving, setIsMoving] = useState(false); // –§–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
  const [movingPlayerId, setMovingPlayerId] = useState(null); // ID –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showPlayerModal, setShowPlayerModal] = useState(false);
  const [showBankModal, setShowBankModal] = useState(false);
  const [showAssetsModal, setShowAssetsModal] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [toast, setToast] = useState({
    open: false,
    message: '',
    severity: 'info'
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const [bankBalance, setBankBalance] = useState(2500);
  const [transferAmount, setTransferAmount] = useState('');
  const [selectedRecipient, setSelectedRecipient] = useState('');
  const [transferHistory, setTransferHistory] = useState([
    { id: 1, from: 'MAG', to: '–ê–ª–µ–∫—Å–µ–π', amount: 100, date: '2024-01-15', time: '14:30' },
    { id: 2, from: '–ú–∞—Ä–∏—è', to: 'MAG', amount: 50, date: '2024-01-15', time: '13:45' },
    { id: 3, from: '–ê–ª–µ–∫—Å–µ–π', to: '–î–º–∏—Ç—Ä–∏–π', amount: 200, date: '2024-01-15', time: '12:20' }
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
  const [assets, setAssets] = useState([
    { id: 1, type: 'house', name: '–î–æ–º', icon: 'üè†', value: 150000, cost: 150000, income: 2000, color: '#10B981', description: '–ö—Ä–∞—Å–∏–≤—ã–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ' },
    { id: 2, type: 'stocks', name: '–ê–∫—Ü–∏–∏', icon: 'üìà', value: 25000, cost: 25000, income: 500, color: '#3B82F6', description: '–ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π' },
    { id: 3, type: 'business', name: '–ë–∏–∑–Ω–µ—Å', icon: 'üíé', value: 80000, cost: 80000, income: 3000, color: '#8B5CF6', description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å' },
    { id: 4, type: 'car', name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', icon: 'üöó', value: 45000, cost: 45000, income: 0, color: '#F59E0B', description: '–ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å' },
    { id: 5, type: 'gold', name: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á', value: 35000, cost: 35000, income: 200, color: '#EAB308', description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–æ–ª–æ—Ç–æ' },
    { id: 6, type: 'crypto', name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', icon: '‚Çø', value: 18000, cost: 18000, income: 800, color: '#EF4444', description: '–ü–æ—Ä—Ç—Ñ–µ–ª—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç' },
    { id: 7, type: 'bonds', name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', icon: 'üìã', value: 12000, cost: 12000, income: 300, color: '#06B6D4', description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏' }
  ]);

  const totalCells = originalBoard.length;

  // –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const rollDice = () => {
    if (isRolling) return;
    
    setIsRolling(true);
    const rollInterval = setInterval(() => {
      setDiceValue(Math.floor(Math.random() * 6) + 1);
    }, 100);

    setTimeout(() => {
      clearInterval(rollInterval);
      const finalValue = Math.floor(Math.random() * 6) + 1;
      setDiceValue(finalValue);
      setIsRolling(false);
      
      // –î–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      movePlayer(finalValue);
    }, 1000);
  };
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const openPlayerModal = (player) => {
    setSelectedPlayer(player);
    setShowPlayerModal(true);
  };
  
  const openBankModal = () => {
    setShowBankModal(true);
  };
  
  const openAssetsModal = () => {
    setShowAssetsModal(true);
  };
  
  const closeModals = () => {
    setShowPlayerModal(false);
    setShowBankModal(false);
    setShowAssetsModal(false);
    setSelectedPlayer(null);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const movePlayer = (steps) => {
    const updatedPlayers = [...players];
    const player = updatedPlayers[currentPlayer];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è –∏ ID –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    setIsMoving(true);
    setMovingPlayerId(player.id);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    const startPosition = player.position;
    let currentPosition = startPosition;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ
    const moveStep = () => {
      if (currentPosition < startPosition + steps) {
        currentPosition++;
        if (currentPosition > 24) {
          currentPosition = 1; // –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        player.position = currentPosition;
        setPlayers([...updatedPlayers]);
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        setTimeout(moveStep, 200); // 200ms –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      } else {
        // –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        const nextPlayer = (currentPlayer + 1) % players.length;
        setCurrentPlayer(nextPlayer);
        setIsMoving(false); // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è
        setMovingPlayerId(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
      }
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    moveStep();
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  const handlePlayerTurn = (playerIndex) => {
    if (playerIndex === currentPlayer) {
      console.log(`üéØ [OriginalGameBoard] –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${players[playerIndex].name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω`);
      return;
    }
    
    console.log(`üéØ [OriginalGameBoard] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–∫–∞ ${players[playerIndex].name}`);
    setCurrentPlayer(playerIndex);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setToast({
      open: true,
      message: `üéØ –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${players[playerIndex].name}`,
      severity: 'info'
    });
  };

  const handlePlayerProfile = (playerIndex) => {
    const player = players[playerIndex];
    if (player) {
      console.log(`üë§ [OriginalGameBoard] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ ${player.name}`);
      openPlayerModal(player);
    }
  };

    const handlePlayerStats = (playerIndex) => {
    const player = players[playerIndex];
    if (player) {
      console.log(`üìä [OriginalGameBoard] –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ ${player.name}`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      setToast({
        open: true,
        message: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${player.name}`,
        severity: 'info'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const handleTransfer = () => {
    if (!transferAmount || !selectedRecipient) {
      setToast({
        open: true,
        message: '‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
        severity: 'error'
      });
      return;
    }

    const amount = parseFloat(transferAmount);
    if (isNaN(amount) || amount <= 0) {
      setToast({
        open: true,
        message: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
        severity: 'error'
      });
      return;
    }

    if (amount > bankBalance) {
      setToast({
        open: true,
        message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ',
        severity: 'error'
      });
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const currentPlayerName = players[currentPlayer]?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const newTransfer = {
      id: Date.now(),
      from: currentPlayerName,
      to: selectedRecipient,
      amount: amount,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    setTransferHistory(prev => [newTransfer, ...prev]);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    setBankBalance(prev => prev - amount);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setTransferAmount('');
    setSelectedRecipient('');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    setToast({
      open: true,
      message: `‚úÖ –ü–µ—Ä–µ–≤–æ–¥ $${amount} –∏–≥—Ä–æ–∫—É ${selectedRecipient} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      severity: 'success'
    });

    console.log(`üè¶ [OriginalGameBoard] –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${currentPlayerName} ‚Üí ${selectedRecipient} $${amount}`);
  };

  const resetTransferForm = () => {
    setTransferAmount('');
    setSelectedRecipient('');
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–∞–º–∏
  const getTotalAssetsValue = () => {
    return assets.reduce((total, asset) => total + asset.value, 0);
  };

  const getTotalAssetsIncome = () => {
    return assets.reduce((total, asset) => total + asset.income, 0);
  };

  return (
    <Box sx={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 50%, #334155 100%)',
      padding: '20px',
      display: 'flex',
      gap: '30px'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <Box sx={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center'
      }}>
        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Box sx={{ textAlign: 'center', mb: 2 }}>
          <Typography variant="body2" sx={{ 
            color: '#ff4444',
            fontWeight: 'bold',
            fontFamily: 'monospace',
            fontSize: '0.8rem',
            mb: 1
          }}>
            üêõ DEBUG: OriginalGameBoard.js (3 —Ç–æ–ø –∞–∫—Ç–∏–≤–∞ + —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø + –ø—Ä–æ—Ñ–∏–ª–∏ + –±–∞–Ω–∫)
          </Typography>
        </Box>
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <Typography variant="h3" sx={{ 
            color: 'white', 
            mb: 2, 
            fontWeight: 'bold',
            textAlign: 'center',
            background: 'linear-gradient(45deg, #8B5CF6, #06B6D4)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}>
            –≠–Ω–µ—Ä–≥–∏—è –î–µ–Ω–µ–≥
          </Typography>
        </motion.div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ –∏ –∫—É–±–∏–∫ */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          gap: 3,
          mb: 3,
          p: 2,
          background: 'rgba(255, 255, 255, 0.1)',
          borderRadius: '15px',
          backdropFilter: 'blur(10px)'
        }}>
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Avatar sx={{ 
              bgcolor: players[currentPlayer]?.color,
              width: 40,
              height: 40
            }}>
              {players[currentPlayer]?.name.charAt(0)}
            </Avatar>
            <Box>
              <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                {players[currentPlayer]?.name}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                {players[currentPlayer]?.profession}
              </Typography>
            </Box>
          </Box>
          
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Typography variant="h6" sx={{ color: 'white' }}>
              –ö—É–±–∏–∫: {diceValue}
            </Typography>
            <Button
              variant="contained"
              onClick={rollDice}
              disabled={isRolling || isMoving}
              sx={{
                background: isRolling || isMoving 
                  ? 'linear-gradient(45deg, #9CA3AF, #6B7280)' 
                  : 'linear-gradient(45deg, #8B5CF6, #06B6D4)',
                color: 'white',
                fontWeight: 'bold',
                px: 3,
                py: 1,
                borderRadius: '25px',
                '&:hover': {
                  background: isRolling || isMoving 
                    ? 'linear-gradient(45deg, #9CA3AF, #6B7280)' 
                    : 'linear-gradient(45deg, #7C3AED, #0891B2)'
                }
              }}
            >
              {isRolling ? '–ë—Ä–æ—Å–∞—é...' : isMoving ? '–§–∏—à–∫–∞ –¥–≤–∏–∂–µ—Ç—Å—è...' : '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}
            </Button>
          </Box>
        </Box>

        {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
        <Box sx={{
          position: 'relative',
          width: '800px',
          height: '800px',
          background: 'rgba(255, 255, 255, 0.05)',
          borderRadius: '30px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(20px)',
          boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
          overflow: 'hidden'
        }}>
          





          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–æ - –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω —Å —Ä–∞–¥—É–∂–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
          <Box
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              width: '240px',
              height: '240px',
              zIndex: 10,
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              gap: 2
            }}
          >
            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä—É–≥ —Å —Ä–∞–¥—É–∂–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
            <Box
              sx={{
                width: '200px',
                height: '200px',
                background: 'conic-gradient(from 0deg, #3B82F6, #10B981, #F59E0B, #EF4444, #8B5CF6, #3B82F6)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 0 60px rgba(59, 130, 246, 0.6)',
                border: '4px solid rgba(255, 255, 255, 0.3)',
                position: 'relative',
                '&:hover': {
                  transform: 'scale(1.05)',
                  transition: 'all 0.3s ease',
                  boxShadow: '0 0 80px rgba(59, 130, 246, 0.8)'
                }
              }}
            >
              
              {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å —Å–∏–º–≤–æ–ª–∞–º–∏ */}
              <Box
                sx={{
                  position: 'absolute',
                  width: '120px',
                  height: '120px',
                  display: 'grid',
                  gridTemplateColumns: '1fr 1fr',
                  gridTemplateRows: '1fr 1fr',
                  gap: '8px',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
              >
                {/* –ú–æ–ª–Ω–∏—è (‚ö°) - –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π */}
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '2rem',
                    background: 'linear-gradient(135deg, #3B82F6, #10B981)',
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                    color: 'white',
                    textShadow: '0 0 10px rgba(59, 130, 246, 0.8)'
                  }}
                >
                  ‚ö°
                </Box>
                
                {/* –ê—Ç–æ–º (‚öõÔ∏è) - –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π */}
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '2rem',
                    background: 'linear-gradient(135deg, #10B981, #F59E0B)',
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                    color: 'white',
                    textShadow: '0 0 10px rgba(16, 185, 129, 0.8)'
                  }}
                >
                  ‚öõÔ∏è
                </Box>
                
                {/* –î–æ–ª–ª–∞—Ä ($) - –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π */}
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '2.5rem',
                    fontWeight: 'bold',
                    background: 'linear-gradient(135deg, #F59E0B, #EF4444)',
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                    color: 'white',
                    textShadow: '0 0 10px rgba(245, 158, 11, 0.8)'
                  }}
                >
                  $
                </Box>
                
                {/* –î–µ–Ω–µ–∂–Ω—ã–π –º–µ—à–æ–∫ (üí∞) - –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π */}
                <Box
                  sx={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '2rem',
                    background: 'linear-gradient(135deg, #EF4444, #8B5CF6)',
                    borderRadius: '8px',
                    width: '100%',
                    height: '100%',
                    color: 'white',
                    textShadow: '0 0 10px rgba(239, 68, 68, 0.8)'
                  }}
                >
                  üí∞
                </Box>
              </Box>
            </Box>
            
            {/* –¢–µ–∫—Å—Ç "ENERGY OF MONEY" —Å —Ä–∞–¥—É–∂–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
            <Box sx={{ textAlign: 'center' }}>
              <Typography
                variant="h4"
                sx={{
                  fontWeight: 'bold',
                  background: 'linear-gradient(135deg, #3B82F6, #10B981)',
                  backgroundClip: 'text',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  textShadow: '0 0 20px rgba(59, 130, 246, 0.5)',
                  lineHeight: 1.2
                }}
              >
                ENERGY OF
              </Typography>
              <Typography
                variant="h4"
                sx={{
                  fontWeight: 'bold',
                  background: 'linear-gradient(135deg, #10B981, #EF4444)',
                  backgroundClip: 'text',
                  WebkitBackgroundClip: 'text',
                  WebkitTextFillColor: 'transparent',
                  textShadow: '0 0 20px rgba(16, 185, 129, 0.5)',
                  lineHeight: 1.2
                }}
              >
                MONEY
              </Typography>
            </Box>
          </Box>

          {/* 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫—Ä—É–≥—É */}
          {originalBoard.slice(0, 24).map((cell, i) => {
            const angle = (i * 360) / 24;
            const radius = 172.5; // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 150px –¥–æ 172.5px
            const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
            const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
            
            return (
              <motion.div
                key={cell.id}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: i * 0.05, duration: 0.4 }}
              >
                <Box
                  sx={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                    width: '46px', // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 40px –¥–æ 46px
                    height: '46px', // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 40px –¥–æ 46px
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '14px', // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–ª–µ—Ç–æ–∫
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '14px', // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–ª–µ—Ç–æ–∫
                    fontWeight: 'bold',
                    color: 'white',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    border: '2px solid rgba(255, 255, 255, 0.3)',
                    boxShadow: '0 8px 25px rgba(0,0,0,0.3)',
                    zIndex: 1,
                    '&:hover': {
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px) scale(1.3)`,
                      boxShadow: '0 15px 35px rgba(0,0,0,0.4)',
                      zIndex: 3
                    }
                  }}
                  title={cell.description}
                >
                  {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                  <Typography variant="h6" sx={{ fontSize: '20px' }}>
                    {cell.icon}
                  </Typography>
                  
                  {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                  <Typography
                    sx={{
                      position: 'absolute',
                      top: '2px',
                      left: '4px',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                      zIndex: 2
                    }}
                  >
                    {cell.id}
                  </Typography>
                </Box>
              </motion.div>
            );
          })}

          {/* 4 —É–≥–ª–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –º–∞–ª—ã–º –∏ –±–æ–ª—å—à–∏–º –∫—Ä—É–≥–æ–º */}
          {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.8 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-200px, -200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(16, 185, 129, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-200px, -200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(16, 185, 129, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üí∞
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
            </Box>
          </motion.div>

          {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.9 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(200px, -200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(59, 130, 246, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(200px, -200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(59, 130, 246, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üíº
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –†—ã–Ω–æ–∫ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.0 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(200px, 200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #F59E0B 0%, #D97706 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(245, 158, 11, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(200px, 200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(245, 158, 11, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üìà
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†—ã–Ω–æ–∫
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –†–∞—Å—Ö–æ–¥—ã */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.1 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-200px, 200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(239, 68, 68, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-200px, 200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(239, 68, 68, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üí∏
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†–∞—Å—Ö–æ–¥—ã
              </Typography>
            </Box>
          </motion.div>

                    {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫—Ä—É–≥–µ */}
          {(() => {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            const playersByPosition = {};
            players.forEach(player => {
              if (!playersByPosition[player.position]) {
                playersByPosition[player.position] = [];
              }
              playersByPosition[player.position].push(player);
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–∏—à–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            const playerTokens = players.map((player, playerIndex) => {
              const cellIndex = player.position - 1; // –ü–æ–∑–∏—Ü–∏—è 1-24, –∏–Ω–¥–µ–∫—Å 0-23
              const angle = (cellIndex * 360) / 24;
              const radius = 172.5; // –†–∞–¥–∏—É—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
              const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
              const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏—à–∫–∏, –µ—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤
              const playersOnSameCell = playersByPosition[player.position];
              const playerIndexInCell = playersOnSameCell.indexOf(player);
              const totalPlayersOnCell = playersOnSameCell.length;
              
              // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
              let offsetX = 0;
              let offsetY = 0;
              
              if (totalPlayersOnCell > 1) {
                // –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –ø–æ –∫—Ä—É–≥—É
                const offsetRadius = 8; // –†–∞–¥–∏—É—Å —Å–º–µ—â–µ–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
                const offsetAngle = (playerIndexInCell * 360) / totalPlayersOnCell;
                offsetX = Math.cos((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
                offsetY = Math.sin((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
              }
              
              return (
                <motion.div
                  key={player.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ 
                    scale: movingPlayerId === player.id ? 1.1 : 1, 
                    opacity: 1,
                    x: x + offsetX,
                    y: y + offsetY
                  }}
                  transition={{ 
                    delay: 1.2 + playerIndex * 0.1, 
                    duration: 0.6,
                    x: { duration: isMoving ? 0.2 : 0.6, ease: "easeInOut" },
                    y: { duration: isMoving ? 0.2 : 0.6, ease: "easeInOut" },
                    scale: { duration: 0.3, ease: "easeInOut" }
                  }}
                  style={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    width: '32px',
                    height: '32px',
                    zIndex: 4
                  }}
                >
                  <Box
                    sx={{
                      width: '100%',
                      height: '100%',
                      background: `linear-gradient(135deg, ${player.color} 0%, ${player.color}DD 100%)`,
                      borderRadius: '50%',
                      border: movingPlayerId === player.id ? '4px solid #FFD700' : '3px solid white',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '14px',
                      fontWeight: 'bold',
                      color: 'white',
                      boxShadow: movingPlayerId === player.id 
                        ? '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' 
                        : '0 4px 15px rgba(0,0,0,0.4), 0 0 10px rgba(255,255,255,0.3)',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      animation: movingPlayerId === player.id ? 'pulse 1s infinite' : 'none',
                      '@keyframes pulse': {
                        '0%': { boxShadow: '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' },
                        '50%': { boxShadow: '0 0 30px rgba(255, 215, 0, 1), 0 4px 15px rgba(0,0,0,0.4)' },
                        '100%': { boxShadow: '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' }
                      },
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 8px 25px rgba(0,0,0,0.5), 0 0 20px rgba(255,255,255,0.4)'
                      }
                    }}
                    title={`${player.name} - ${player.profession} (–ø–æ–∑–∏—Ü–∏—è: ${player.position})`}
                  >
                    {player.name.charAt(0)}
                  </Box>
                </motion.div>
              );
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö
            const cellCounters = Object.entries(playersByPosition).map(([position, playersOnCell]) => {
              if (playersOnCell.length > 1) {
                const cellIndex = parseInt(position) - 1;
                const angle = (cellIndex * 360) / 24;
                const radius = 172.5;
                const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
                const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
                
                return (
                  <Box
                    key={`counter-${position}`}
                    sx={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                      width: '20px',
                      height: '20px',
                      background: 'rgba(0, 0, 0, 0.8)',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      color: 'white',
                      border: '2px solid white',
                      zIndex: 5,
                      boxShadow: '0 2px 8px rgba(0,0,0,0.5)'
                    }}
                  >
                    {playersOnCell.length}
                  </Box>
                );
              }
              return null;
            });
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ñ–∏—à–∫–∏, –∏ —Å—á–µ—Ç—á–∏–∫–∏
            return [...playerTokens, ...cellCounters];
          })()}

          {/* 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ 700x700 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
          {(() => {
            const outerCells = originalBoard.slice(24);
            const cells = [];
            
            // –†–∞–∑–º–µ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
            const outerSquareSize = 700;
            const cellSize = 40; // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 35px –¥–æ 40px
            
            // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
            // –ö–ª–µ—Ç–∫–∏ 25-38 (–∏–Ω–¥–µ–∫—Å—ã 0-13)
            for (let i = 0; i < 14; i++) {
              const cell = outerCells[i];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13; // –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 24) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '50px',
                      left: `${x}px`,
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.description}
                  >
                    {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                    <Typography variant="h6" sx={{ fontSize: '16px', mb: 0.5 }}>
                      {cell.icon}
                    </Typography>
                    
                    {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                    <Typography
                      sx={{
                        position: 'absolute',
                        top: '2px',
                        left: '4px',
                        fontSize: '8px',
                        fontWeight: 'bold',
                        color: 'white',
                        textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                        zIndex: 2
                      }}
                    >
                      {cell.id - 24}
                    </Typography>
                  </Box>
                </motion.div>
              );
            }
            
            // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
            // –ö–ª–µ—Ç–∫–∏ 15-26 (–∏–Ω–¥–µ–∫—Å—ã 14-25)
            for (let i = 0; i < 12; i++) {
              const cellIndex = 14 + i;
              const cell = outerCells[cellIndex];
              const spacing = 11; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
              const y = 50 + (i + 1) * (cellSize + spacing);
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 38) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: `${y}px`,
                      right: '50px',
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.description}
                  >
                    {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                    <Typography variant="h6" sx={{ fontSize: '16px', mb: 0.5 }}>
                      {cell.icon}
                    </Typography>
                    
                    {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                    <Typography
                      sx={{
                        position: 'absolute',
                        top: '2px',
                        left: '4px',
                        fontSize: '8px',
                        fontWeight: 'bold',
                        color: 'white',
                        textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                        zIndex: 2
                      }}
                    >
                      {cell.id - 24}
                    </Typography>
                  </Box>
                </motion.div>
              );
            }
            
            // –ù–∏–∂–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
            // –ö–ª–µ—Ç–∫–∏ 27-40 (–∏–Ω–¥–µ–∫—Å—ã 26-39) - —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
            for (let i = 0; i < 14; i++) {
              const cellIndex = 39 - i; // –ò–¥–µ–º —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ: 39, 38, 37, ..., 26
              const cell = outerCells[cellIndex];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13; // –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 50) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      bottom: '50px',
                      left: `${x}px`,
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.description}
                  >
                    {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                    <Typography variant="h6" sx={{ fontSize: '16px', mb: 0.5 }}>
                      {cell.icon}
                    </Typography>
                    
                    {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                    <Typography
                      sx={{
                        position: 'absolute',
                        top: '2px',
                        left: '4px',
                        fontSize: '8px',
                        fontWeight: 'bold',
                        color: 'white',
                        textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                        zIndex: 2
                      }}
                    >
                      {cell.id - 24}
                    </Typography>
                  </Box>
                </motion.div>
              );
            }
            
            // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
            // –ö–ª–µ—Ç–∫–∏ 41-52 (–∏–Ω–¥–µ–∫—Å—ã 40-51) - —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            for (let i = 0; i < 12; i++) {
              const cellIndex = 51 - i; // –ò–¥–µ–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö: 51, 50, 49, ..., 40
              const cell = outerCells[cellIndex];
              const spacing = 11; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
              const y = 50 + (i + 1) * (cellSize + spacing);
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 64) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: `${y}px`,
                      left: '50px',
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.description}
                  >
                    {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                    <Typography variant="h6" sx={{ fontSize: '16px', mb: 0.5 }}>
                      {cell.icon}
                    </Typography>
                    
                    {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                    <Typography
                      sx={{
                        position: 'absolute',
                        top: '2px',
                        left: '4px',
                        fontSize: '8px',
                        fontWeight: 'bold',
                        color: 'white',
                        textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                        zIndex: 2
                      }}
                    >
                      {cell.id - 24}
                    </Typography>
                  </Box>
                </motion.div>
              );
            }
            
            return cells;
          })()}

          {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ 700x700 */}
          <Box
            sx={{
              position: 'absolute',
              top: '50px',
              left: '50px',
              width: '700px',
              height: '700px',
              border: '2px dashed rgba(139, 92, 246, 0.6)',
              borderRadius: '0',
              pointerEvents: 'none',
              zIndex: 0
            }}
          />
        </Box>
      </Box>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
      <Box sx={{
        width: '320px',
        display: 'flex',
        flexDirection: 'column',
        gap: '20px',
        padding: '20px'
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
        <Typography variant="h5" sx={{ 
          color: 'white', 
          textAlign: 'center',
          mb: 2,
          fontWeight: 'bold'
        }}>
          üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
        </Typography>

        {/* 1. –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.1 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Group /> –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              <Button
                variant="text"
                fullWidth
                onClick={() => handlePlayerTurn(0)}
                sx={{
                  p: 1,
                  background: currentPlayer === 0 ? '#8B5CF6' : 'transparent',
                  color: 'white',
                  borderRadius: '8px',
                  textTransform: 'none',
                  fontSize: '0.9rem',
                  fontWeight: 'bold',
                  border: currentPlayer === 0 ? 'none' : '1px solid rgba(255,255,255,0.3)',
                  '&:hover': {
                    background: currentPlayer === 0 ? '#7C3AED' : 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                1. MAG {currentPlayer === 0 ? '(–•–æ–¥)' : ''}
              </Button>
              <Button
                variant="text"
                fullWidth
                onClick={() => handlePlayerTurn(1)}
                sx={{
                  p: 1,
                  background: currentPlayer === 1 ? '#8B5CF6' : 'transparent',
                  color: 'white',
                  borderRadius: '8px',
                  textTransform: 'none',
                  fontSize: '0.9rem',
                  fontWeight: 'bold',
                  border: currentPlayer === 1 ? 'none' : '1px solid rgba(255,255,255,0.3)',
                  '&:hover': {
                    background: currentPlayer === 1 ? '#7C3AED' : 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                2. –ò–≥—Ä–æ–∫ 2 {currentPlayer === 1 ? '(–•–æ–¥)' : ''}
              </Button>
              <Button
                variant="text"
                fullWidth
                onClick={() => handlePlayerTurn(2)}
                sx={{
                  p: 1,
                  background: currentPlayer === 2 ? '#8B5CF6' : 'transparent',
                  color: 'white',
                  borderRadius: '8px',
                  textTransform: 'none',
                  fontSize: '0.9rem',
                  fontWeight: 'bold',
                  border: currentPlayer === 2 ? 'none' : '1px solid rgba(255,255,255,0.3)',
                  '&:hover': {
                    background: currentPlayer === 2 ? '#7C3AED' : 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                3. –ò–≥—Ä–æ–∫ 3 {currentPlayer === 2 ? '(–•–æ–¥)' : ''}
              </Button>
            </Box>
          </Box>
        </motion.div>

        {/* 2. –ò–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–≥—Ä–æ–∫–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üë§ [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                openPlayerModal(players[currentPlayer]);
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, width: '100%' }}>
                <Avatar sx={{ bgcolor: '#8B5CF6', width: 50, height: 50 }}>
                  {playerData?.username?.charAt(0) || 'M'}
                </Avatar>
                <Box sx={{ flex: 1, textAlign: 'left' }}>
                  <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                    {playerData?.username || 'MAG'}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                    üíº –ú–µ–Ω–µ–¥–∂–µ—Ä
                  </Typography>
                </Box>
              </Box>
            </Button>
          </Box>
        </motion.div>

        {/* 3. –ë–∞–Ω–∫ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.3 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üè¶ [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                openBankModal();
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ textAlign: 'center', width: '100%' }}>
                <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
                  <AccountBalance /> –ë–∞–Ω–∫
                </Typography>
                <Typography variant="h4" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                  ${bankBalance.toLocaleString()}
                </Typography>
                <Typography variant="body2" sx={{ color: '#94A3B8', mt: 1 }}>
                  –î–æ—Ö–æ–¥: $1,200 | –†–∞—Å—Ö–æ–¥—ã: $800
                </Typography>
              </Box>
            </Button>
          </Box>
        </motion.div>

        {/* 4. –ê–∫—Ç–∏–≤—ã */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üíº [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞–∂–∞—Ç–∞');
                openAssetsModal();
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ textAlign: 'center', width: '100%' }}>
                <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
                  <Inventory /> –ê–∫—Ç–∏–≤—ã
                </Typography>
                <Typography variant="h4" sx={{ color: '#10B981', fontWeight: 'bold', mb: 2 }}>
                  ${getTotalAssetsValue().toLocaleString()}
                </Typography>
                <Typography variant="body2" sx={{ color: '#94A3B8', mb: 2 }}>
                  –î–æ—Ö–æ–¥: ${getTotalAssetsIncome().toLocaleString()}/–º–µ—Å
                </Typography>
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –∞–∫—Ç–∏–≤–∞ */}
                  {assets
                    .sort((a, b) => b.value - a.value) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                    .slice(0, 3) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    .map((asset) => (
                      <Chip 
                        key={asset.id}
                        label={`${asset.icon} ${asset.name}: $${asset.value.toLocaleString()}`} 
                        size="small" 
                        sx={{ 
                          background: `${asset.color}20`, 
                          color: asset.color,
                          border: `1px solid ${asset.color}40`,
                          '&:hover': {
                            background: `${asset.color}30`,
                            cursor: 'pointer'
                          }
                        }} 
                      />
                    ))}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ */}
                  {assets.length > 3 && (
                    <Chip 
                      label={`+${assets.length - 3} –µ—â–µ...`}
                      size="small" 
                      sx={{ 
                        background: 'rgba(107, 114, 128, 0.2)', 
                        color: '#6B7280',
                        border: '1px solid rgba(107, 114, 128, 0.4)',
                        fontStyle: 'italic',
                        '&:hover': {
                          background: 'rgba(107, 114, 128, 0.3)',
                          cursor: 'pointer'
                        }
                      }} 
                    />
                  )}
                </Box>
              </Box>
            </Button>
          </Box>
        </motion.div>

        {/* 5. –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.5 }}
        >
          <Button
            variant="contained"
            onClick={rollDice}
            disabled={isRolling}
            sx={{
              width: '100%',
              height: '80px',
              background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
              color: 'white',
              borderRadius: '15px',
              fontSize: '18px',
              fontWeight: 'bold',
              boxShadow: '0 8px 25px rgba(139, 92, 246, 0.3)',
              '&:hover': {
                background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)',
                boxShadow: '0 12px 35px rgba(139, 92, 246, 0.4)'
              },
              '&:disabled': {
                background: 'rgba(139, 92, 246, 0.5)'
              }
            }}
          >
            {isRolling ? (
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 0.5, repeat: Infinity, ease: "linear" }}
              >
                üé≤
              </motion.div>
            ) : (
              <>
                üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö
                <br />
                <Typography variant="h4" sx={{ mt: 1 }}>
                  {diceValue}
                </Typography>
              </>
            )}
          </Button>
        </motion.div>

        {/* 6. –®–∫–∞–ª–∞ —Ç–∞–π–º–∏–Ω–≥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Timer /> –í—Ä–µ–º—è —Ö–æ–¥–∞
            </Typography>
            <LinearProgress 
              variant="determinate" 
              value={timerProgress} 
              sx={{
                height: 10,
                borderRadius: 5,
                background: 'rgba(255, 255, 255, 0.1)',
                '& .MuiLinearProgress-bar': {
                  background: 'linear-gradient(90deg, #10B981 0%, #F59E0B 50%, #EF4444 100%)',
                    borderRadius: 5
                }
              }}
            />
            <Typography variant="body2" sx={{ color: '#94A3B8', mt: 1, textAlign: 'center' }}>
              {timerProgress}% ‚Ä¢ 45 —Å–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å
            </Typography>
          </Box>
        </motion.div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.7 }}
        >
          <Button
            variant="contained"
            startIcon={<ExitToApp />}
            onClick={onExit}
            sx={{
              width: '100%',
              height: '50px',
              background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
              color: 'white',
              borderRadius: '15px',
              fontSize: '16px',
              fontWeight: 'bold',
              boxShadow: '0 8px 25px rgba(239, 68, 68, 0.3)',
              '&:hover': {
                background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)',
                boxShadow: '0 12px 35px rgba(239, 68, 68, 0.4)'
              }
            }}
          >
            üö™ –í–´–•–û–î
          </Button>
        </motion.div>
      </Box>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ */}
      <Dialog
        open={showPlayerModal}
        onClose={closeModals}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          {selectedPlayer && (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              
              {/* –ê–≤–∞—Ç–∞—Ä –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Box sx={{
                background: 'rgba(139, 92, 246, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(139, 92, 246, 0.3)',
                textAlign: 'center'
              }}>
                <Avatar sx={{ 
                  bgcolor: '#8B5CF6', 
                  width: 80, 
                  height: 80, 
                  fontSize: '2rem',
                  mx: 'auto',
                  mb: 2
                }}>
                  {selectedPlayer.name?.charAt(0) || '?'}
                </Avatar>
                <Typography variant="h4" sx={{ color: 'white', fontWeight: 'bold', mb: 1 }}>
                  {selectedPlayer.name}
                </Typography>
                <Typography variant="h6" sx={{ color: '#94A3B8', mb: 2 }}>
                  {selectedPlayer.profession}
                </Typography>
                
                {/* –°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞ */}
                <Box sx={{
                  background: currentPlayer === players.findIndex(p => p.name === selectedPlayer.name) 
                    ? 'rgba(16, 185, 129, 0.2)' 
                    : 'rgba(107, 114, 128, 0.2)',
                  borderRadius: '10px',
                  padding: '8px 16px',
                  display: 'inline-block'
                }}>
                  <Typography variant="body2" sx={{ 
                    color: currentPlayer === players.findIndex(p => p.name === selectedPlayer.name) 
                      ? '#10B981' 
                      : '#6B7280',
                    fontWeight: 'bold'
                  }}>
                    {currentPlayer === players.findIndex(p => p.name === selectedPlayer.name) 
                      ? 'üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥' 
                      : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞'}
                  </Typography>
                </Box>
              </Box>

              {/* –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <Box sx={{
                background: 'rgba(16, 185, 129, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(16, 185, 129, 0.3)'
              }}>
                <Typography variant="h6" sx={{ color: '#10B981', mb: 2, textAlign: 'center' }}>
                  üìä –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </Typography>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ:</Typography>
                    <Typography sx={{ color: '#10B981', fontWeight: 'bold' }}>
                      –ö–ª–µ—Ç–∫–∞ {selectedPlayer.position}
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>–¶–≤–µ—Ç —Ñ–∏—à–∫–∏:</Typography>
                    <Box sx={{ 
                      width: 20, 
                      height: 20, 
                      borderRadius: '50%', 
                      background: selectedPlayer.color,
                      border: '2px solid rgba(255, 255, 255, 0.3)'
                    }} />
                  </Box>
                  
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>ID –∏–≥—Ä–æ–∫–∞:</Typography>
                    <Typography sx={{ color: '#94A3B8', fontWeight: 'bold' }}>
                      #{selectedPlayer.id}
                    </Typography>
                  </Box>
                </Box>
              </Box>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Box sx={{
                background: 'rgba(59, 130, 246, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(59, 130, 246, 0.3)'
              }}>
                <Typography variant="h6" sx={{ color: '#3B82F6', mb: 2, textAlign: 'center' }}>
                  ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                </Typography>
                
                <Typography variant="body2" sx={{ color: '#94A3B8', textAlign: 'center', lineHeight: 1.6 }}>
                  –ò–≥—Ä–æ–∫ {selectedPlayer.name} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ "Energy of Money". 
                  {selectedPlayer.profession && ` –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${selectedPlayer.profession}.`}
                  {currentPlayer === players.findIndex(p => p.name === selectedPlayer.name) 
                    ? ' –°–µ–π—á–∞—Å –µ–≥–æ —Ö–æ–¥!' 
                    : ' –û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏.'}
                </Typography>
              </Box>
            </Box>
          )}
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ */}
      <Dialog
        open={showAssetsModal}
        onClose={closeModals}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            
            {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Box sx={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(16, 185, 129, 0.3)',
              textAlign: 'center'
            }}>
              <Typography variant="h5" sx={{ color: '#10B981', mb: 2, fontWeight: 'bold' }}>
                üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤
              </Typography>
              <Typography variant="h3" sx={{ color: '#10B981', fontWeight: 'bold', mb: 1 }}>
                ${getTotalAssetsValue().toLocaleString()}
              </Typography>
              <Typography variant="h6" sx={{ color: '#94A3B8' }}>
                üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${getTotalAssetsIncome().toLocaleString()}/–º–µ—Å
              </Typography>
            </Box>

            {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ */}
            <Box sx={{
              background: 'rgba(139, 92, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(139, 92, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#8B5CF6', mb: 3, textAlign: 'center' }}>
                üéØ –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤
              </Typography>
              
              <Box sx={{ display: 'grid', gap: 2 }}>
                {assets.map((asset) => (
                  <Box
                    key={asset.id}
                    sx={{
                      background: 'rgba(255, 255, 255, 0.05)',
                      borderRadius: '15px',
                      padding: '20px',
                      border: `1px solid ${asset.color}40`,
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        background: 'rgba(255, 255, 255, 0.08)',
                        transform: 'translateY(-2px)',
                        boxShadow: `0 8px 25px ${asset.color}30`
                      }
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                      <Box sx={{
                        fontSize: '2rem',
                        width: 50,
                        height: 50,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        background: `${asset.color}20`,
                        borderRadius: '12px',
                        border: `2px solid ${asset.color}40`
                      }}>
                        {asset.icon}
                      </Box>
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                          {asset.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                          {asset.description}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                      <Box sx={{
                        background: 'rgba(16, 185, 129, 0.1)',
                        borderRadius: '8px',
                        padding: '12px',
                        textAlign: 'center',
                        border: '1px solid rgba(16, 185, 129, 0.3)'
                      }}>
                        <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                          üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å
                        </Typography>
                        <Typography variant="h6" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                          ${asset.value.toLocaleString()}
                        </Typography>
                      </Box>
                      
                      <Box sx={{
                        background: 'rgba(59, 130, 246, 0.1)',
                        borderRadius: '8px',
                        padding: '12px',
                        textAlign: 'center',
                        border: '1px solid rgba(59, 130, 246, 0.3)'
                      }}>
                        <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                          üìà –î–æ—Ö–æ–¥/–º–µ—Å
                        </Typography>
                        <Typography variant="h6" sx={{ color: '#3B82F6', fontWeight: 'bold' }}>
                          ${asset.income.toLocaleString()}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{
                      background: 'rgba(139, 92, 246, 0.1)',
                      borderRadius: '8px',
                      padding: '12px',
                      mt: 2,
                      textAlign: 'center',
                      border: '1px solid rgba(139, 92, 246, 0.3)'
                    }}>
                      <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                        üéØ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                      </Typography>
                      <Typography variant="h6" sx={{ color: '#8B5CF6', fontWeight: 'bold' }}>
                        ${asset.cost.toLocaleString()}
                      </Typography>
                    </Box>
                  </Box>
                ))}
              </Box>
            </Box>
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–∞–Ω–∫–∞ */}
      <Dialog
        open={showBankModal}
        onClose={closeModals}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            
            {/* 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å */}
            <Box sx={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(16, 185, 129, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#10B981', mb: 1, textAlign: 'center' }}>
                üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
              </Typography>
              <Typography variant="h3" sx={{ color: '#10B981', fontWeight: 'bold', textAlign: 'center' }}>
                ${bankBalance.toLocaleString()}
              </Typography>
            </Box>

            {/* 2. –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ */}
            <Box sx={{
              background: 'rgba(139, 92, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(139, 92, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#8B5CF6', mb: 2, textAlign: 'center' }}>
                üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                {/* –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è */}
                <FormControl fullWidth>
                  <InputLabel sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                    –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                  </InputLabel>
                  <Select
                    value={selectedRecipient}
                    onChange={(e) => setSelectedRecipient(e.target.value)}
                    sx={{
                      color: 'white',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255, 255, 255, 0.3)'
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255, 255, 255, 0.5)'
                      },
                      '& .MuiSvgIcon-root': {
                        color: 'rgba(255, 255, 255, 0.7)'
                      }
                    }}
                  >
                    {players.map((player, index) => (
                      <MenuItem key={index} value={player.name} disabled={index === currentPlayer}>
                        {player.name} {index === currentPlayer ? '(–í—ã)' : ''}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                {/* –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ */}
                <TextField
                  fullWidth
                  label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ($)"
                  type="number"
                  value={transferAmount}
                  onChange={(e) => setTransferAmount(e.target.value)}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      color: 'white',
                      '& fieldset': {
                        borderColor: 'rgba(255, 255, 255, 0.3)'
                      },
                      '&:hover fieldset': {
                        borderColor: 'rgba(255, 255, 255, 0.5)'
                      },
                      '& .MuiInputLabel-root': {
                        color: 'rgba(255, 255, 255, 0.7)'
                      }
                    }
                  }}
                />

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>
                  <Button
                    variant="contained"
                    onClick={handleTransfer}
                    disabled={!transferAmount || !selectedRecipient}
                    sx={{
                      flex: 1,
                      background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                      color: 'white',
                      '&:hover': {
                        background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
                      },
                      '&:disabled': {
                        background: 'rgba(139, 92, 246, 0.5)'
                      }
                    }}
                  >
                    üí∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={resetTransferForm}
                    sx={{
                      borderColor: 'rgba(255, 255, 255, 0.3)',
                      color: 'rgba(255, 255, 255, 0.7)',
                      '&:hover': {
                        borderColor: 'rgba(255, 255, 255, 0.5)',
                        background: 'rgba(255, 255, 255, 0.05)'
                      }
                    }}
                  >
                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                  </Button>
                </Box>
              </Box>
            </Box>

            {/* 3. –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ */}
            <Box sx={{
              background: 'rgba(59, 130, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(59, 130, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#3B82F6', mb: 2, textAlign: 'center' }}>
                üìã –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
              </Typography>
              
              <List sx={{ maxHeight: '200px', overflow: 'auto' }}>
                {transferHistory.map((transfer, index) => (
                  <React.Fragment key={transfer.id}>
                    <ListItem sx={{ 
                      background: 'rgba(255, 255, 255, 0.05)',
                      borderRadius: '8px',
                      mb: 1
                    }}>
                      <ListItemText
                        primary={
                          <Typography sx={{ color: 'white', fontWeight: 'bold' }}>
                            {transfer.from} ‚Üí {transfer.to}
                          </Typography>
                        }
                        secondary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Typography sx={{ color: '#10B981', fontWeight: 'bold' }}>
                              ${transfer.amount.toLocaleString()}
                            </Typography>
                            <Typography sx={{ color: 'rgba(255, 255, 255, 0.6)', fontSize: '0.8rem' }}>
                              {transfer.date} {transfer.time}
                            </Typography>
                          </Box>
                        }
                      />
                    </ListItem>
                    {index < transferHistory.length - 1 && <Divider sx={{ background: 'rgba(255, 255, 255, 0.1)' }} />}
                  </React.Fragment>
                ))}
              </List>
            </Box>
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={toast.open}
        autoHideDuration={3000}
        onClose={() => setToast({ ...toast, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          onClose={() => setToast({ ...toast, open: false })} 
          severity={toast.severity}
          sx={{ width: '100%' }}
        >
          {toast.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default OriginalGameBoard;
