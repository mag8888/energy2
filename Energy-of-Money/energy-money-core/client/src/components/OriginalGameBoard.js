import React, { useState, useEffect } from 'react';
import { Box, Typography, Button, IconButton, LinearProgress, Avatar, Chip } from '@mui/material';
import { motion } from 'framer-motion';
import { 
  Casino, 
  Timer, 
  Settings, 
  Help, 
  ExitToApp,
  PlayArrow,
  Pause,
  Refresh,
  VolumeUp,
  Fullscreen,
  AccountBalance,
  Inventory,
  Group
} from '@mui/icons-material';

const OriginalGameBoard = ({ roomId, playerData, onExit }) => {
  const [originalBoard] = useState(() => {
    // –°–æ–∑–¥–∞–µ–º 76 –∫–ª–µ—Ç–æ–∫: 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö + 52 –≤–Ω–µ—à–Ω–∏—Ö
    const cells = [];
    
    // 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
    const innerCells = [
      { id: 1, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 2, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 3, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 4, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è', description: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞ (10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è)' },
      { id: 5, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 6, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 7, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 8, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 9, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 10, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 11, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 12, type: 'child', name: '–†–µ–±–µ–Ω–æ–∫', color: '#A855F7', icon: 'üë∂', description: '–†–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã' },
      { id: 13, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 14, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 15, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 16, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 17, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 18, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 19, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 20, type: 'loss', name: '–ü–æ—Ç–µ—Ä—è', color: '#18181B', icon: 'üí∏', description: '–ü–æ—Ç–µ—Ä—è –¥–µ–Ω–µ–≥ (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ) - –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ 2 —Ö–æ–¥–∞ –∏–ª–∏ 3 —Ä–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞' },
      { id: 21, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 22, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 23, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 24, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    cells.push(...innerCells);
    
    // 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ (–≥–æ–ª—É–±—ã–µ)
    for (let i = 1; i <= 52; i++) {
      cells.push({
        id: i + 24,
        type: 'outer',
        name: `–ë—ã—Å—Ç—Ä—ã–π –ü—É—Ç—å ${i}`,
        color: '#06B6D4' // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ–ª—É–±–æ–π
      });
    }
    
    return cells;
  });

  const [diceValue, setDiceValue] = useState(1);
  const [isRolling, setIsRolling] = useState(false);
  const [timerProgress, setTimerProgress] = useState(75);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∏—Ö —Ñ–∏—à–µ–∫
  const [players, setPlayers] = useState([
    { id: 1, name: 'MAG', position: 1, color: '#EF4444', profession: '–ò–Ω–∂–µ–Ω–µ—Ä' },
    { id: 2, name: '–ê–ª–µ–∫—Å–µ–π', position: 1, color: '#3B82F6', profession: '–ú–µ–Ω–µ–¥–∂–µ—Ä' },
    { id: 3, name: '–ú–∞—Ä–∏—è', position: 1, color: '#10B981', profession: '–î–∏–∑–∞–π–Ω–µ—Ä' },
    { id: 4, name: '–î–º–∏—Ç—Ä–∏–π', position: 1, color: '#F59E0B', profession: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' }
  ]);
  
  const [currentPlayer, setCurrentPlayer] = useState(0); // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞

  const totalCells = originalBoard.length;

  // –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const rollDice = () => {
    if (isRolling) return;
    
    setIsRolling(true);
    const rollInterval = setInterval(() => {
      setDiceValue(Math.floor(Math.random() * 6) + 1);
    }, 100);

    setTimeout(() => {
      clearInterval(rollInterval);
      const finalValue = Math.floor(Math.random() * 6) + 1;
      setDiceValue(finalValue);
      setIsRolling(false);
      
      // –î–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫—É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      movePlayer(finalValue);
    }, 1000);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const movePlayer = (steps) => {
    const updatedPlayers = [...players];
    const player = updatedPlayers[currentPlayer];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ –∫—Ä—É–≥—É 1-24)
    let newPosition = player.position + steps;
    if (newPosition > 24) {
      newPosition = newPosition - 24; // –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    player.position = newPosition;
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    const nextPlayer = (currentPlayer + 1) % players.length;
    setCurrentPlayer(nextPlayer);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    setPlayers(updatedPlayers);
  };

  return (
    <Box sx={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 50%, #334155 100%)',
      padding: '20px',
      display: 'flex',
      gap: '30px'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <Box sx={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center'
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <Typography variant="h3" sx={{ 
            color: 'white', 
            mb: 2, 
            fontWeight: 'bold',
            textAlign: 'center',
            background: 'linear-gradient(45deg, #8B5CF6, #06B6D4)',
            backgroundClip: 'text',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent'
          }}>
            –≠–Ω–µ—Ä–≥–∏—è –î–µ–Ω–µ–≥
          </Typography>
        </motion.div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ –∏ –∫—É–±–∏–∫ */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          gap: 3,
          mb: 3,
          p: 2,
          background: 'rgba(255, 255, 255, 0.1)',
          borderRadius: '15px',
          backdropFilter: 'blur(10px)'
        }}>
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Avatar sx={{ 
              bgcolor: players[currentPlayer]?.color,
              width: 40,
              height: 40
            }}>
              {players[currentPlayer]?.name.charAt(0)}
            </Avatar>
            <Box>
              <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                {players[currentPlayer]?.name}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.8)' }}>
                {players[currentPlayer]?.profession}
              </Typography>
            </Box>
          </Box>
          
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}>
            <Typography variant="h6" sx={{ color: 'white' }}>
              –ö—É–±–∏–∫: {diceValue}
            </Typography>
            <Button
              variant="contained"
              onClick={rollDice}
              disabled={isRolling}
              sx={{
                background: 'linear-gradient(45deg, #8B5CF6, #06B6D4)',
                color: 'white',
                fontWeight: 'bold',
                px: 3,
                py: 1,
                borderRadius: '25px',
                '&:hover': {
                  background: 'linear-gradient(45deg, #7C3AED, #0891B2)'
                }
              }}
            >
              {isRolling ? '–ë—Ä–æ—Å–∞—é...' : '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}
            </Button>
          </Box>
        </Box>

        {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
        <Box sx={{
          position: 'relative',
          width: '800px',
          height: '800px',
          background: 'rgba(255, 255, 255, 0.05)',
          borderRadius: '30px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(20px)',
          boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
          overflow: 'hidden'
        }}>
          {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ */}
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ duration: 1, delay: 0.5 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                width: '200px',
                height: '200px',
                background: 'linear-gradient(135deg, #8B5CF6 0%, #A855F7 100%)',
                borderRadius: '50%',
                border: '3px solid rgba(255, 255, 255, 0.2)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 0 50px rgba(139, 92, 246, 0.6)',
                zIndex: 2
              }}
            >
              <Typography variant="h5" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textShadow: '0 2px 4px rgba(0,0,0,0.3)'
              }}>
                üéØ –¶–ï–ù–¢–†
              </Typography>
            </Box>
          </motion.div>

          {/* 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫—Ä—É–≥—É */}
          {originalBoard.slice(0, 24).map((cell, i) => {
            const angle = (i * 360) / 24;
            const radius = 172.5; // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 150px –¥–æ 172.5px
            const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
            const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
            
            return (
              <motion.div
                key={cell.id}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: i * 0.05, duration: 0.4 }}
              >
                <Box
                  sx={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                    width: '46px', // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 40px –¥–æ 46px
                    height: '46px', // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 40px –¥–æ 46px
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '14px', // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–¥–∏—É—Å —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–ª–µ—Ç–æ–∫
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '14px', // –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–ª–µ—Ç–æ–∫
                    fontWeight: 'bold',
                    color: 'white',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    border: '2px solid rgba(255, 255, 255, 0.3)',
                    boxShadow: '0 8px 25px rgba(0,0,0,0.3)',
                    zIndex: 1,
                    '&:hover': {
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px) scale(1.3)`,
                      boxShadow: '0 15px 35px rgba(0,0,0,0.4)',
                      zIndex: 3
                    }
                  }}
                  title={cell.description}
                >
                  {/* –ò–∫–æ–Ω–∫–∞ –∫–ª–µ—Ç–∫–∏ */}
                  <Typography variant="h6" sx={{ fontSize: '20px' }}>
                    {cell.icon}
                  </Typography>
                  
                  {/* –ù–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –≤ –ª–µ–≤–æ–º —É–≥–ª—É */}
                  <Typography
                    sx={{
                      position: 'absolute',
                      top: '2px',
                      left: '4px',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      textShadow: '0 1px 2px rgba(0,0,0,0.8)',
                      zIndex: 2
                    }}
                  >
                    {cell.id}
                  </Typography>
                </Box>
              </motion.div>
            );
          })}

          {/* 4 —É–≥–ª–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –º–∞–ª—ã–º –∏ –±–æ–ª—å—à–∏–º –∫—Ä—É–≥–æ–º */}
          {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.8 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-200px, -200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(16, 185, 129, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-200px, -200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(16, 185, 129, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üí∞
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
            </Box>
          </motion.div>

          {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.9 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(200px, -200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(59, 130, 246, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(200px, -200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(59, 130, 246, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üíº
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –†—ã–Ω–æ–∫ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.0 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(200px, 200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #F59E0B 0%, #D97706 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(245, 158, 11, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(200px, 200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(245, 158, 11, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üìà
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†—ã–Ω–æ–∫
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –†–∞—Å—Ö–æ–¥—ã */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.1 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-200px, 200px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '100px',
                height: '120px',
                background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
                borderRadius: '20px',
                border: '3px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 12px 35px rgba(239, 68, 68, 0.4), 0 0 20px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-200px, 200px) scale(1.05)',
                  boxShadow: '0 20px 50px rgba(239, 68, 68, 0.5), 0 0 30px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '24px'
              }}>
                üí∏
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '11px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†–∞—Å—Ö–æ–¥—ã
              </Typography>
            </Box>
          </motion.div>

                    {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫—Ä—É–≥–µ */}
          {(() => {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            const playersByPosition = {};
            players.forEach(player => {
              if (!playersByPosition[player.position]) {
                playersByPosition[player.position] = [];
              }
              playersByPosition[player.position].push(player);
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–∏—à–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            const playerTokens = players.map((player, playerIndex) => {
              const cellIndex = player.position - 1; // –ü–æ–∑–∏—Ü–∏—è 1-24, –∏–Ω–¥–µ–∫—Å 0-23
              const angle = (cellIndex * 360) / 24;
              const radius = 172.5; // –†–∞–¥–∏—É—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
              const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
              const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏—à–∫–∏, –µ—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤
              const playersOnSameCell = playersByPosition[player.position];
              const playerIndexInCell = playersOnSameCell.indexOf(player);
              const totalPlayersOnCell = playersOnSameCell.length;
              
              // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
              let offsetX = 0;
              let offsetY = 0;
              
              if (totalPlayersOnCell > 1) {
                // –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –ø–æ –∫—Ä—É–≥—É
                const offsetRadius = 8; // –†–∞–¥–∏—É—Å —Å–º–µ—â–µ–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
                const offsetAngle = (playerIndexInCell * 360) / totalPlayersOnCell;
                offsetX = Math.cos((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
                offsetY = Math.sin((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
              }
              
              return (
                <motion.div
                  key={player.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: 1.2 + playerIndex * 0.1, duration: 0.6 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: `translate(-50%, -50%) translate(${x + offsetX}px, ${y + offsetY}px)`,
                      width: '32px',
                      height: '32px',
                      background: `linear-gradient(135deg, ${player.color} 0%, ${player.color}DD 100%)`,
                      borderRadius: '50%',
                      border: '3px solid white',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '14px',
                      fontWeight: 'bold',
                      color: 'white',
                      boxShadow: '0 4px 15px rgba(0,0,0,0.4), 0 0 10px rgba(255,255,255,0.3)',
                      zIndex: 4,
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        transform: `translate(-50%, -50%) translate(${x + offsetX}px, ${y + offsetY}px) scale(1.2)`,
                        boxShadow: '0 8px 25px rgba(0,0,0,0.5), 0 0 20px rgba(255,255,255,0.4)'
                      }
                    }}
                    title={`${player.name} - ${player.profession} (–ø–æ–∑–∏—Ü–∏—è: ${player.position})`}
                  >
                    {player.name.charAt(0)}
                  </Box>
                </motion.div>
              );
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö
            const cellCounters = Object.entries(playersByPosition).map(([position, playersOnCell]) => {
              if (playersOnCell.length > 1) {
                const cellIndex = parseInt(position) - 1;
                const angle = (cellIndex * 360) / 24;
                const radius = 172.5;
                const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
                const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
                
                return (
                  <Box
                    key={`counter-${position}`}
                    sx={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                      width: '20px',
                      height: '20px',
                      background: 'rgba(0, 0, 0, 0.8)',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      color: 'white',
                      border: '2px solid white',
                      zIndex: 5,
                      boxShadow: '0 2px 8px rgba(0,0,0,0.5)'
                    }}
                  >
                    {playersOnCell.length}
                  </Box>
                );
              }
              return null;
            });
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ñ–∏—à–∫–∏, –∏ —Å—á–µ—Ç—á–∏–∫–∏
            return [...playerTokens, ...cellCounters];
          })()}

          {/* 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ 700x700 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
          {(() => {
            const outerCells = originalBoard.slice(24);
            const cells = [];
            
            // –†–∞–∑–º–µ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
            const outerSquareSize = 700;
            const cellSize = 40; // –£–≤–µ–ª–∏—á–∏–ª –Ω–∞ 15% —Å 35px –¥–æ 40px
            
            // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
            for (let i = 0; i < 14; i++) {
              const cell = outerCells[i];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13; // –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 24) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: '50px',
                      left: `${x}px`,
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.name}
                  >
                    {cell.id - 24}
                  </Box>
                </motion.div>
              );
            }
            
            // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
            for (let i = 0; i < 12; i++) {
              const cell = outerCells[14 + i];
              const spacing = 11; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
              const y = 50 + (i + 1) * (cellSize + spacing);
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 38) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: `${y}px`,
                      right: '50px',
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.name}
                  >
                    {cell.id - 24}
                  </Box>
                </motion.div>
              );
            }
            
            // –ù–∏–∂–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫) - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
            for (let i = 0; i < 14; i++) {
              const cell = outerCells[26 + i];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13; // –†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 50) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      bottom: '50px',
                      left: `${x}px`,
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.name}
                  >
                    {cell.id - 24}
                  </Box>
                </motion.div>
              );
            }
            
            // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
            for (let i = 0; i < 12; i++) {
              const cell = outerCells[40 + i];
              const spacing = 11; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 11px
              const y = 50 + (i + 1) * (cellSize + spacing);
              cells.push(
                <motion.div
                  key={cell.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: (i + 64) * 0.02, duration: 0.4 }}
                >
                  <Box
                    sx={{
                      position: 'absolute',
                      top: `${y}px`,
                      left: '50px',
                      width: `${cellSize}px`,
                      height: `${cellSize}px`,
                      background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                      borderRadius: '8px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '10px',
                      fontWeight: 'bold',
                      color: 'white',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '2px solid rgba(255, 255, 255, 0.3)',
                      boxShadow: '0 6px 20px rgba(0,0,0,0.3)',
                      zIndex: 1,
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 12px 30px rgba(0,0,0,0.4)',
                        zIndex: 3
                      }
                    }}
                    title={cell.name}
                  >
                    {cell.id - 24}
                  </Box>
                </motion.div>
              );
            }
            
            return cells;
          })()}

          {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞ 700x700 */}
          <Box
            sx={{
              position: 'absolute',
              top: '50px',
              left: '50px',
              width: '700px',
              height: '700px',
              border: '2px dashed rgba(139, 92, 246, 0.6)',
              borderRadius: '0',
              pointerEvents: 'none',
              zIndex: 0
            }}
          />
        </Box>
      </Box>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
      <Box sx={{
        width: '320px',
        display: 'flex',
        flexDirection: 'column',
        gap: '20px',
        padding: '20px'
      }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
        <Typography variant="h5" sx={{ 
          color: 'white', 
          textAlign: 'center',
          mb: 2,
          fontWeight: 'bold'
        }}>
          üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–π
        </Typography>

        {/* 1. –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.1 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Group /> –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              <Chip label="1. MAG (–•–æ–¥)" color="primary" sx={{ background: '#8B5CF6' }} />
              <Chip label="2. –ò–≥—Ä–æ–∫ 2" variant="outlined" sx={{ color: 'white', borderColor: 'rgba(255,255,255,0.3)' }} />
              <Chip label="3. –ò–≥—Ä–æ–∫ 3" variant="outlined" sx={{ color: 'white', borderColor: 'rgba(255,255,255,0.3)' }} />
            </Box>
          </Box>
        </motion.div>

        {/* 2. –ò–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–≥—Ä–æ–∫–∞ - –ë–ï–ó –Ω–∞–¥–ø–∏—Å–∏ "–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫" */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Avatar sx={{ bgcolor: '#8B5CF6', width: 50, height: 50 }}>
                M
              </Avatar>
              <Box>
                <Typography variant="h6" sx={{ color: 'white' }}>
                  {playerData?.username || 'MAG'}
                </Typography>
                <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                  üíº –ú–µ–Ω–µ–¥–∂–µ—Ä
                </Typography>
              </Box>
            </Box>
          </Box>
        </motion.div>

        {/* 3. –ë–∞–Ω–∫ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.3 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <AccountBalance /> –ë–∞–Ω–∫
            </Typography>
            <Typography variant="h4" sx={{ color: '#10B981', fontWeight: 'bold' }}>
              $2,500
            </Typography>
            <Typography variant="body2" sx={{ color: '#94A3B8', mt: 1 }}>
              –î–æ—Ö–æ–¥: $1,200 | –†–∞—Å—Ö–æ–¥—ã: $800
            </Typography>
          </Box>
        </motion.div>

        {/* 4. –ê–∫—Ç–∏–≤—ã */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Inventory /> –ê–∫—Ç–∏–≤—ã
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              <Chip label="üè† –î–æ–º: $150,000" size="small" sx={{ background: 'rgba(16, 185, 129, 0.2)', color: '#10B981' }} />
              <Chip label="üìà –ê–∫—Ü–∏–∏: $25,000" size="small" sx={{ background: 'rgba(59, 130, 246, 0.2)', color: '#3B82F6' }} />
              <Chip label="üíé –ë–∏–∑–Ω–µ—Å: $80,000" size="small" sx={{ background: 'rgba(139, 92, 246, 0.2)', color: '#8B5CF6' }} />
            </Box>
          </Box>
        </motion.div>

        {/* 5. –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.5 }}
        >
          <Button
            variant="contained"
            onClick={rollDice}
            disabled={isRolling}
            sx={{
              width: '100%',
              height: '80px',
              background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
              color: 'white',
              borderRadius: '15px',
              fontSize: '18px',
              fontWeight: 'bold',
              boxShadow: '0 8px 25px rgba(139, 92, 246, 0.3)',
              '&:hover': {
                background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)',
                boxShadow: '0 12px 35px rgba(139, 92, 246, 0.4)'
              },
              '&:disabled': {
                background: 'rgba(139, 92, 246, 0.5)'
              }
            }}
          >
            {isRolling ? (
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 0.5, repeat: Infinity, ease: "linear" }}
              >
                üé≤
              </motion.div>
            ) : (
              <>
                üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö
                <br />
                <Typography variant="h4" sx={{ mt: 1 }}>
                  {diceValue}
                </Typography>
              </>
            )}
          </Button>
        </motion.div>

        {/* 6. –®–∫–∞–ª–∞ —Ç–∞–π–º–∏–Ω–≥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: '15px',
            padding: '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Timer /> –í—Ä–µ–º—è —Ö–æ–¥–∞
            </Typography>
            <LinearProgress 
              variant="determinate" 
              value={timerProgress} 
              sx={{
                height: 10,
                borderRadius: 5,
                background: 'rgba(255, 255, 255, 0.1)',
                '& .MuiLinearProgress-bar': {
                  background: 'linear-gradient(90deg, #10B981 0%, #F59E0B 50%, #EF4444 100%)',
                    borderRadius: 5
                }
              }}
            />
            <Typography variant="body2" sx={{ color: '#94A3B8', mt: 1, textAlign: 'center' }}>
              {timerProgress}% ‚Ä¢ 45 —Å–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å
            </Typography>
          </Box>
        </motion.div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.7 }}
        >
          <Button
            variant="contained"
            startIcon={<ExitToApp />}
            onClick={onExit}
            sx={{
              width: '100%',
              height: '50px',
              background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
              color: 'white',
              borderRadius: '15px',
              fontSize: '16px',
              fontWeight: 'bold',
              boxShadow: '0 8px 25px rgba(239, 68, 68, 0.3)',
              '&:hover': {
                background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)',
                boxShadow: '0 12px 35px rgba(239, 68, 68, 0.4)'
              }
            }}
          >
            üö™ –í–´–•–û–î
          </Button>
        </motion.div>
      </Box>
    </Box>
  );
};

export default OriginalGameBoard;
