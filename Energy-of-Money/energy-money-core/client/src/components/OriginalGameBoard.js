import React, { useState, useEffect, Fragment, useCallback } from 'react';
import { Box, Typography, Button, LinearProgress, Avatar, Chip, Snackbar, Alert, Dialog, DialogTitle, DialogContent, DialogActions, TextField, Select, MenuItem, FormControl, InputLabel, List, ListItem, ListItemText, Divider, Grid, useMediaQuery, useTheme, IconButton } from '@mui/material';
import { motion } from 'framer-motion';
import FullProfessionCard from './FullProfessionCard';
import MarketCardModal from './MarketCardModal';
import ExpenseCardModal from './ExpenseCardModal';
import BreakModal from './BreakModal';
import { MarketDeckManager, checkPlayerHasMatchingAsset } from '../data/marketCards';
import { ExpenseDeckManager } from '../data/expenseCards';
import socket from '../socket';
import { PROFESSIONS } from '../data/professions';
import { useGameManager } from './GameManager';
import { 
  Timer, 
  ExitToApp,
  AccountBalance,
  Inventory,
  Group,
  Menu,
  Close,
  VolunteerActivism as CharityIcon
} from '@mui/icons-material';

const OriginalGameBoard = ({ roomId, playerData, onExit }) => {
  console.log('üéÆ [OriginalGameBoard] –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', { roomId, playerData });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞
  const getPlayerName = (player) => {
    return player?.username || player?.name || '–ò–≥—Ä–æ–∫';
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã –∏–º–µ–Ω–∏
  const getPlayerInitial = (player) => {
    const name = getPlayerName(player);
    return name.charAt(0);
  };
  
  // –•—É–∫–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
  const {
    gameState,
    getCurrentPlayer,
    isCurrentPlayer,
    getAllPlayers,
    sendPlayerReady,
    sendRollDice,
    sendEndTurn,
    sendStartGame,
    sendPlayerAction
  } = useGameManager(roomId, playerData);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ gameState
  const { players, currentPlayerId, gameStarted, turnTimeLeft } = gameState;
  const currentPlayer = getCurrentPlayer();
  const myPlayer = players.find(p => p.socketId === socket.id);
  const isMyTurn = isCurrentPlayer(myPlayer?.id);
  
  // CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
      
      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
      }
      
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);


  
  const [originalBoard] = useState(() => {
    // –°–æ–∑–¥–∞–µ–º 76 –∫–ª–µ—Ç–æ–∫: 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö + 52 –≤–Ω–µ—à–Ω–∏—Ö
    const cells = [];
    
    // 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π
    const innerCells = [
      { id: 1, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 2, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 3, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 4, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è', description: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞ (10% –æ—Ç –¥–æ—Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è)' },
      { id: 5, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 6, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 7, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 8, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 9, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 10, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 11, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 12, type: 'child', name: '–†–µ–±–µ–Ω–æ–∫', color: '#A855F7', icon: 'üë∂', description: '–†–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫, —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã' },
      { id: 13, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 14, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 15, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 16, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' },
      { id: 17, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 18, type: 'expenses', name: '–í—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞', color: '#EC4899', icon: 'üõçÔ∏è', description: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –æ—Ç 100 –¥–æ 4000$ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –Ω—É–∂–¥—ã (—á–∞–π–Ω–∏–∫, –∫–æ—Ñ–µ, –º–∞—à–∏–Ω–∞, –¢–í, –ø—Ä–æ—á–µ–µ)' },
      { id: 19, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 20, type: 'loss', name: '–ü–æ—Ç–µ—Ä—è', color: '#18181B', icon: 'üí∏', description: '–ü–æ—Ç–µ—Ä—è –¥–µ–Ω–µ–≥ (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ) - –æ–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ 2 —Ö–æ–¥–∞ –∏–ª–∏ 3 —Ä–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ —Ö–æ–¥–∞' },
      { id: 21, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 22, type: 'payday', name: 'PayDay', color: '#EAB308', icon: 'üí∞', description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É' },
      { id: 23, type: 'opportunity', name: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', color: '#10B981', icon: 'üéØ', description: '–ú–∞–ª–∞—è / –±–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ (–Ω–∞ –≤—ã–±–æ—Ä)' },
      { id: 24, type: 'market', name: '–†—ã–Ω–æ–∫', color: '#06B6D4', icon: 'üè™', description: '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã' }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    cells.push(...innerCells);
    
    // 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π (ID 25-76)
    const outerCells = [
      { id: 25, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 26, type: 'dream', name: '–î–æ–º –º–µ—á—Ç—ã', color: '#E91E63', icon: 'üè†', description: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–º –º–µ—á—Ç—ã –¥–ª—è —Å–µ–º—å–∏', cost: 100000, income: 0 },
      { id: 27, type: 'business', name: '–ö–æ—Ñ–µ–π–Ω—è', color: '#4CAF50', icon: '‚òï', description: '–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞', cost: 100000, income: 3000 },
      { id: 28, type: 'loss', name: '–ê—É–¥–∏—Ç', color: '#EF4444', icon: 'üìã', description: '–ê—É–¥–∏—Ç - –ø–æ—Ç–µ—Ä—è 50% –∞–∫—Ç–∏–≤–æ–≤', cost: 0, income: 0 },
      { id: 29, type: 'business', name: '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è', color: '#4CAF50', icon: 'üíÜ', description: '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–ø–∞', cost: 270000, income: 5000 },
      { id: 30, type: 'dream', name: '–ü–æ–ª–µ—Ç –Ω–∞ –ú–∞—Ä—Å', color: '#E91E63', icon: 'üöÄ', description: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—á—Ç—ã –æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –Ω–∞ –ö—Ä–∞—Å–Ω—É—é –ø–ª–∞–Ω–µ—Ç—É', cost: 300000, income: 0 },
      { id: 31, type: 'business', name: '–ë–∏—Ä–∂–∞', color: '#4CAF50', icon: 'üìà', description: '–ë–∏—Ä–∂–∞ (–†–∞–∑–æ–≤–æ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 500 000$ –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 5 –∏–ª–∏ 6 –Ω–∞ –∫—É–±–∏–∫–µ) (—Å—Ç–æ–∏–º–æ—Å—Ç—å 50 000$) –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è', cost: 50000, income: 0 },
      { id: 32, type: 'charity', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', color: '#F97316', icon: '‚ù§Ô∏è', description: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', cost: 0, income: 0 },
      { id: 33, type: 'business', name: '–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', color: '#4CAF50', icon: 'üìä', description: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', cost: 160000, income: 4000 },
      { id: 34, type: 'loss', name: '–ö—Ä–∞–∂–∞', color: '#EF4444', icon: 'ü¶π', description: '–ö—Ä–∞–∂–∞ 100% –Ω–∞–ª–∏—á–Ω—ã—Ö', cost: 0, income: 0 },
      { id: 35, type: 'business', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', color: '#4CAF50', icon: 'üè®', description: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å/–±—É—Ç–∏–∫-–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', cost: 200000, income: 5000 },
      { id: 36, type: 'dream', name: '–í—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã', color: '#E91E63', icon: 'üèîÔ∏è', description: '–ü–æ–¥–Ω—è—Ç—å—Å—è –Ω–∞ –≤—Å–µ –≤—ã—Å–æ—á–∞–π—à–∏–µ –≤–µ—Ä—à–∏–Ω—ã –º–∏—Ä–∞', cost: 500000, income: 0 },
      { id: 37, type: 'business', name: '–§—Ä–∞–Ω—à–∏–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', color: '#4CAF50', icon: 'üçΩÔ∏è', description: '–§—Ä–∞–Ω—à–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', cost: 320000, income: 8000 },
      { id: 38, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 39, type: 'dream', name: '–†–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', color: '#E91E63', icon: 'üèïÔ∏è', description: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', cost: 500000, income: 0 },
      { id: 40, type: 'business', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', color: '#4CAF50', icon: 'üè®', description: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å/–±—É—Ç–∏–∫-–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', cost: 200000, income: 4000 },
      { id: 41, type: 'dream', name: '–ñ–∏—Ç—å –≥–æ–¥ –Ω–∞ —è—Ö—Ç–µ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', color: '#E91E63', icon: '‚õµ', description: '–ì–æ–¥–æ–≤–∞—è –∂–∏–∑–Ω—å –Ω–∞ —Ä–æ—Å–∫–æ—à–Ω–æ–π —è—Ö—Ç–µ –≤ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –∫–ª–∏–º–∞—Ç–µ', cost: 300000, income: 0 },
      { id: 42, type: 'loss', name: '–†–∞–∑–≤–æ–¥', color: '#EF4444', icon: 'üíî', description: '–†–∞–∑–≤–æ–¥ - –ø–æ—Ç–µ—Ä—è 50% –∞–∫—Ç–∏–≤–æ–≤', cost: 0, income: 0 },
      { id: 43, type: 'dream', name: '–†–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', color: '#E91E63', icon: 'üèïÔ∏è', description: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ç—Ä–∏—Ç-—Ü–µ–Ω—Ç—Ä', cost: 500000, income: 0 },
      { id: 44, type: 'business', name: '–ê–≤—Ç–æ–º–æ–π–∫–∏', color: '#4CAF50', icon: 'üöó', description: '–°–µ—Ç—å –∞–≤—Ç–æ–º–æ–µ–∫ —Å–∞–º–æ–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è', cost: 120000, income: 3000 },
      { id: 45, type: 'dream', name: '–Ø—Ö—Ç–∞ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', color: '#E91E63', icon: '‚õµ', description: '–ñ–∏—Ç—å –≥–æ–¥ –Ω–∞ —è—Ö—Ç–µ –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ', cost: 300000, income: 0 },
      { id: 46, type: 'business', name: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', color: '#4CAF50', icon: 'üíá', description: '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã/–±–∞—Ä–±–µ—Ä—à–æ–ø', cost: 500000, income: 15000 },
      { id: 47, type: 'dream', name: '–§–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', color: '#E91E63', icon: 'üé≠', description: '–°–æ–∑–¥–∞—Ç—å —Ñ–æ–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–∞–ª–∞–Ω—Ç–æ–≤', cost: 300000, income: 0 },
      { id: 48, type: 'business', name: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω', color: '#4CAF50', icon: 'üõçÔ∏è', description: '–û–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã', cost: 110000, income: 3000 },
      { id: 49, type: 'dream', name: '–ú–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', color: '#E91E63', icon: 'üé™', description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∏—Ä–æ–≤–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å', cost: 200000, income: 0 },
      { id: 50, type: 'loss', name: '–ü–æ–∂–∞—Ä', color: '#EF4444', icon: 'üî•', description: '–ü–æ–∂–∞—Ä (–≤—ã —Ç–µ—Ä—è–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å –º–∏–Ω –¥–æ—Ö–æ–¥–æ–º)', cost: 0, income: 0 },
      { id: 51, type: 'money', name: '–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#EAB308', icon: '$', description: '–í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç –¥–æ—Ö–æ–¥', cost: 0, income: 0 },
      { id: 52, type: 'business', name: '–ô–æ–≥–∞-—Ü–µ–Ω—Ç—Ä', color: '#4CAF50', icon: 'üßò', description: '–ô–æ–≥–∞- –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä', cost: 170000, income: 4500 },
      { id: 53, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#E91E63', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 200000, income: 0 },
      { id: 54, type: 'business', name: '–≠–∫–æ-—Ä–∞–Ω—á–æ', color: '#4CAF50', icon: 'üåø', description: '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–ª–µ–∫—Å (—ç–∫–æ-—Ä–∞–Ω—á–æ)', cost: 1000000, income: 20000 },
      { id: 55, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#E91E63', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 300000, income: 0 },
      { id: 56, type: 'business', name: '–ë–∏—Ä–∂–∞', color: '#4CAF50', icon: 'üìà', description: '–ë–∏—Ä–∂–∞ (–†–∞–∑–æ–≤–æ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è 500 000$ –µ—Å–ª–∏ –≤—ã–ø–∞–ª–æ 5 –∏–ª–∏ 6 –Ω–∞ –∫—É–±–∏–∫–µ)', cost: 50000, income: 500000 },
      { id: 57, type: 'dream', name: '–ß–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç', color: '#E91E63', icon: '‚úàÔ∏è', description: '–ö—É–ø–∏—Ç—å —á–∞—Å—Ç–Ω—ã–π —Å–∞–º–æ–ª—ë—Ç', cost: 1000000, income: 0 },
      { id: 58, type: 'business', name: 'NFT-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', color: '#4CAF50', icon: 'üé®', description: 'NFT-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', cost: 400000, income: 12000 },
      { id: 59, type: 'dream', name: '–ú–∏—Ä–æ–≤–æ–π –ª–∏–¥–µ—Ä', color: '#E91E63', icon: 'üëë', description: '–°—Ç–∞—Ç—å –º–∏—Ä–æ–≤—ã–º –ª–∏–¥–µ—Ä–æ–º –º–Ω–µ–Ω–∏–π', cost: 1000000, income: 0 },
      { id: 60, type: 'business', name: '–®–∫–æ–ª–∞ —è–∑—ã–∫–æ–≤', color: '#4CAF50', icon: 'üåç', description: '–®–∫–æ–ª–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤', cost: 20000, income: 3000 },
      { id: 61, type: 'dream', name: '–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤', color: '#E91E63', icon: 'üèéÔ∏è', description: '–ö—É–ø–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—É–ø–µ—Ä–∫–∞—Ä–æ–≤', cost: 1000000, income: 0 },
      { id: 62, type: 'business', name: '–®–∫–æ–ª–∞ –±—É–¥—É—â–µ–≥–æ', color: '#4CAF50', icon: 'üéì', description: '–°–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É –±—É–¥—É—â–µ–≥–æ –¥–ª—è –¥–µ—Ç–µ–π', cost: 300000, income: 10000 },
      { id: 63, type: 'dream', name: '–§–∏–ª—å–º', color: '#E91E63', icon: 'üé¨', description: '–°–Ω—è—Ç—å –ø–æ–ª–Ω–æ–º–µ—Ç—Ä–∞–∂–Ω—ã–π —Ñ–∏–ª—å–º', cost: 500000, income: 0 },
      { id: 64, type: 'money', name: '–í–∞–º –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–æ—Ö–æ–¥ –æ—Ç –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', color: '#FFD700', icon: '$', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç —Ä–∞–Ω–µ–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤', cost: 0, income: 0 },
      { id: 65, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ', color: '#E91E63', icon: 'üåä', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—É—Å–Ω–∏–∫–µ', cost: 200000, income: 0 },
      { id: 66, type: 'loss', name: '–†–µ–π–¥–µ—Ä—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç', color: '#EF4444', icon: 'ü¶à', description: '–†–µ–π–¥–µ—Ä—Å–∫–∏–π –∑–∞—Ö–≤–∞—Ç (–í—ã —Ç–µ—Ä—è–µ—Ç–µ –±–∏–∑–Ω–µ—Å —Å –∫—Ä—É–ø–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º)', cost: 0, income: 0 },
      { id: 67, type: 'dream', name: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è —è—Ö—Ç–∞', color: '#E91E63', icon: '‚õµ', description: '–ë–µ–ª–æ—Å–Ω–µ–∂–Ω–∞—è –Ø—Ö—Ç–∞', cost: 300000, income: 0 },
      { id: 68, type: 'business', name: '–§—Ä–∞–Ω—à–∏–∑–∞ "–ü–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥"', color: '#4CAF50', icon: 'üí∏', description: '–§—Ä–∞–Ω—à–∏–∑–∞ "–ø–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥"', cost: 100000, income: 10000 },
      { id: 69, type: 'loss', name: '–°–∞–Ω–∫—Ü–∏–∏', color: '#EF4444', icon: 'üö´', description: '–°–∞–Ω–∫—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ —Å—á–µ—Ç–∞', cost: 0, income: 0 },
      { id: 70, type: 'business', name: '–ü–µ–∫–∞—Ä–Ω—è', color: '#4CAF50', icon: 'ü•ñ', description: '–ü–µ–∫–∞—Ä–Ω—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', cost: 300000, income: 7000 },
      { id: 71, type: 'dream', name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', color: '#E91E63', icon: 'ü§ù', description: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥', cost: 200000, income: 0 },
      { id: 72, type: 'business', name: '–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', color: '#4CAF50', icon: 'üíª', description: '–û–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞', cost: 200000, income: 5000 },
      { id: 73, type: 'dream', name: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å', color: '#E91E63', icon: 'üöÄ', description: '–ü–æ–ª—ë—Ç –≤ –∫–æ—Å–º–æ—Å', cost: 250000, income: 0 },
      { id: 74, type: 'business', name: '–§–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–∏', color: '#4CAF50', icon: 'üí™', description: '–°–µ—Ç—å —Ñ–∏—Ç–Ω–µ—Å-—Å—Ç—É–¥–∏–π', cost: 750000, income: 20000 },
      { id: 75, type: 'dream', name: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', color: '#E91E63', icon: 'üåç', description: '–ö—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', cost: 300000, income: 0 },
      { id: 76, type: 'business', name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥', color: '#4CAF50', icon: 'üè¢', description: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', cost: 500000, income: 10000 }
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
    cells.push(...outerCells);
    
    return cells;
  });

  const [diceValue, setDiceValue] = useState(1);
  const [isRolling, setIsRolling] = useState(false);
  const [timerProgress, setTimerProgress] = useState(100);
  const [isTurnEnding, setIsTurnEnding] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  const [canRollDice, setCanRollDice] = useState(false);
  const [diceRolled, setDiceRolled] = useState(false);
  const [isMoving, setIsMoving] = useState(false); // –§–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏—à–∫–∏
  const [movingPlayerId, setMovingPlayerId] = useState(null); // ID –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showPlayerModal, setShowPlayerModal] = useState(false);
  const [showBankModal, setShowBankModal] = useState(false);
  const [showAssetsModal, setShowAssetsModal] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const [toast, setToast] = useState({
    open: false,
    message: '',
    severity: 'info'
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const [bankBalance, setBankBalance] = useState(2500);
  const [transferAmount, setTransferAmount] = useState('');
  const [selectedRecipient, setSelectedRecipient] = useState('');
  const [transferHistory, setTransferHistory] = useState([
    { id: 1, from: 'MAG', to: '–ê–ª–µ–∫—Å–µ–π', amount: 100, date: '2024-01-15', time: '14:30' },
    { id: 2, from: '–ú–∞—Ä–∏—è', to: 'MAG', amount: 50, date: '2024-01-15', time: '13:45' },
    { id: 3, from: '–ê–ª–µ–∫—Å–µ–π', to: '–î–º–∏—Ç—Ä–∏–π', amount: 200, date: '2024-01-15', time: '12:20' }
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä—ã–Ω–∫–∞
  const [showMarketCardModal, setShowMarketCardModal] = useState(false);
  const [currentMarketCard, setCurrentMarketCard] = useState(null);
  const [currentPlayerAssets, setCurrentPlayerAssets] = useState([]);
  const [marketDeckManager] = useState(() => new MarketDeckManager());
  const [marketDeckCount, setMarketDeckCount] = useState(24);
  const [marketDiscardCount, setMarketDiscardCount] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const [showExpenseCardModal, setShowExpenseCardModal] = useState(false);
  const [currentExpenseCard, setCurrentExpenseCard] = useState(null);
  const [expenseDeckManager] = useState(() => new ExpenseDeckManager());
  const [expenseDeckCount, setExpenseDeckCount] = useState(24);
  const [expenseDiscardCount, setExpenseDiscardCount] = useState(0);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤
  const [assets, setAssets] = useState([
    { id: 1, type: 'house', name: '–î–æ–º', icon: 'üè†', value: 150000, cost: 150000, income: 2000, color: '#10B981', description: '–ö—Ä–∞—Å–∏–≤—ã–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', quantity: 1 },
    { id: 2, type: 'stocks', name: '–ê–∫—Ü–∏–∏', icon: 'üìà', value: 25000, cost: 25000, income: 500, color: '#3B82F6', description: '–ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ü–∏–π –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π', quantity: 3 },
    { id: 3, type: 'business', name: '–ë–∏–∑–Ω–µ—Å', icon: 'üíé', value: 80000, cost: 80000, income: 3000, color: '#8B5CF6', description: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å', quantity: 1 },
    { id: 4, type: 'car', name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', icon: 'üöó', value: 45000, cost: 45000, income: 0, color: '#F59E0B', description: '–ü—Ä–µ–º–∏—É–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å', quantity: 1 },
    { id: 5, type: 'gold', name: '–ó–æ–ª–æ—Ç–æ', icon: 'ü•á', value: 35000, cost: 35000, income: 200, color: '#EAB308', description: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–æ–ª–æ—Ç–æ', quantity: 2 },
    { id: 6, type: 'crypto', name: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', icon: '‚Çø', value: 18000, cost: 18000, income: 800, color: '#EF4444', description: '–ü–æ—Ä—Ç—Ñ–µ–ª—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', quantity: 1 },
    { id: 7, type: 'bonds', name: '–û–±–ª–∏–≥–∞—Ü–∏–∏', icon: 'üìã', value: 12000, cost: 12000, income: 300, color: '#06B6D6', description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏', quantity: 5 }
  ]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FullProfessionCard
  const [showProfessionCard, setShowProfessionCard] = useState(false);
  const [selectedProfessionId, setSelectedProfessionId] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
  const [playerMoney, setPlayerMoney] = useState(2500); // –î–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫–∞
  const [childrenCount, setChildrenCount] = useState(0); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π
  const [showChildModal, setShowChildModal] = useState(false); // –ú–æ–¥–∞–ª —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
  const [showConfetti, setShowConfetti] = useState(false); // –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç–∏

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞
  const [isOnBigCircle, setIsOnBigCircle] = useState(true); // –í—Å–µ–≥–¥–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [bigCirclePassiveIncome, setBigCirclePassiveIncome] = useState(0); // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [bigCircleBalance, setBigCircleBalance] = useState(0); // –ë–∞–ª–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [bigCircleBusinesses, setBigCircleBusinesses] = useState([]); // –ö—É–ø–ª–µ–Ω–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [bigCircleCells, setBigCircleCells] = useState({}); // –í–ª–∞–¥–µ–ª—å—Ü—ã –∫–ª–µ—Ç–æ–∫ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [bigCircleDreams, setBigCircleDreams] = useState([]); // –ö—É–ø–ª–µ–Ω–Ω—ã–µ –º–µ—á—Ç—ã –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const [showVictoryModal, setShowVictoryModal] = useState(false); // –ú–æ–¥–∞–ª –ø–æ–±–µ–¥—ã
  const [victoryReason, setVictoryReason] = useState(''); // –ü—Ä–∏—á–∏–Ω–∞ –ø–æ–±–µ–¥—ã
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  const [gameStartTime, setGameStartTime] = useState(Date.now()); // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  const [gameDuration, setGameDuration] = useState(3 * 60 * 60 * 1000); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 —á–∞—Å–∞)
  const [gameEndTime, setGameEndTime] = useState(Date.now() + (3 * 60 * 60 * 1000)); // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  const [isGameFinished, setIsGameFinished] = useState(false); // –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  const [playerRankings, setPlayerRankings] = useState([]); // –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
  const [showRankingsModal, setShowRankingsModal] = useState(false); // –ú–æ–¥–∞–ª —Ä–µ–π—Ç–∏–Ω–≥–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
  const [isOnBreak, setIsOnBreak] = useState(false); // –ò–≥—Ä–∞ –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ
  const [breakEndTime, setBreakEndTime] = useState(null); // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
  const [breakDuration, setBreakDuration] = useState(null); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞
  const [nextBreakTime, setNextBreakTime] = useState(null); // –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–¥–µ–ª–æ–∫
  const [dealDeck, setDealDeck] = useState([]); // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–ª–æ–¥–∞ —Å–¥–µ–ª–æ–∫
  const [discardPile, setDiscardPile] = useState([]); // –û—Ç–±–æ–π
  const [currentDealCard, setCurrentDealCard] = useState(null); // –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏
  const [showDealModal, setShowDealModal] = useState(false); // –ú–æ–¥–∞–ª —Å–¥–µ–ª–∫–∏
  const [showDealTypeModal, setShowDealTypeModal] = useState(false); // –ú–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
  const [showPlayerSelectionModal, setShowPlayerSelectionModal] = useState(false); // –ú–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const [showCreditModal, setShowCreditModal] = useState(false); // –ú–æ–¥–∞–ª –∫—Ä–µ–¥–∏—Ç–æ–≤
  const [playerCredit, setPlayerCredit] = useState(0); // –¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞
  const [customCreditAmount, setCustomCreditAmount] = useState(''); // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
  const [customPayoffAmount, setCustomPayoffAmount] = useState(''); // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è
  const [creditModalFromDeal, setCreditModalFromDeal] = useState(false); // –û—Ç–∫—Ä—ã—Ç –ª–∏ –º–æ–¥–∞–ª –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–∑ —Å–¥–µ–ª–∫–∏
  const [showAssetTransferModal, setShowAssetTransferModal] = useState(false); // –ú–æ–¥–∞–ª –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–æ–≤
  const [selectedAssetForTransfer, setSelectedAssetForTransfer] = useState(null); // –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫—Ç–∏–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏

  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ "–¥—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏"
  const [friendMoneyCardsUsed, setFriendMoneyCardsUsed] = useState(0); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ "–¥—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏"
  const [hasExtraTurn, setHasExtraTurn] = useState(false); // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–æ–¥–∞
  const [hasFreeCards, setHasFreeCards] = useState(false); // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const [showFreeCardsModal, setShowFreeCardsModal] = useState(false); // –ú–æ–¥–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [showCharityModal, setShowCharityModal] = useState(false);
  const [charityCost, setCharityCost] = useState(0);
  const [hasCharityBonus, setHasCharityBonus] = useState(false);
  const [showCharityDiceModal, setShowCharityDiceModal] = useState(false);
  const [charityDiceValues, setCharityDiceValues] = useState({ dice1: 0, dice2: 0, dice3: 0, sum: 0 });
  const [charityDiceCount, setCharityDiceCount] = useState(2); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (2 –¥–ª—è –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞, 1-3 –¥–ª—è –±–æ–ª—å—à–æ–≥–æ)
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫




  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã —Å–¥–µ–ª–æ–∫
  useEffect(() => {
    initializeDealDeck();
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏
  const initializePlayer = useCallback((playerData, profession) => {
    return {
      id: playerData.id,
      username: playerData.username,
      socketId: playerData.socketId,
      position: 1, // –ù–∞—á–∏–Ω–∞—é—Ç —Å 1-–π –∫–ª–µ—Ç–∫–∏
      color: getPlayerColor(playerData.id),
      profession: profession,
      balance: profession.balance || 1000,
      salary: profession.salary || 0,
      passiveIncome: profession.passiveIncome || 0,
      totalExpenses: profession.totalExpenses || 0,
      cashFlow: profession.cashFlow || 0,
      ready: false,
      isOnBigCircle: false, // –ù–∞—á–∏–Ω–∞—é—Ç –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ
      assets: [],
      children: 0,
      loans: {
        auto: profession.creditAuto || 0,
        education: profession.creditEducation || 0,
        housing: profession.creditHousing || 0,
        cards: profession.creditCards || 0
      }
    };
  }, []);

  const getPlayerColor = useCallback((playerId) => {
    const colors = ['#EF4444', '#3B82F6', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];
    return colors[playerId % colors.length];
  }, []);




  


  // –û–±–Ω–æ–≤–ª—è–µ–º canRollDice –Ω–∞ –æ—Å–Ω–æ–≤–µ isMyTurn
  useEffect(() => {
    setCanRollDice(isMyTurn && gameStarted);
  }, [isMyTurn, gameStarted]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  const [roomName, setRoomName] = useState('–ó–∞–≥—Ä—É–∑–∫–∞...');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  useEffect(() => {
    const handleRoomStatus = (data) => {
      console.log('üè† [OriginalGameBoard] –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã:', data);
      if (data.room && data.room.displayName) {
        setRoomName(data.room.displayName);
      }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (–æ—Ç–ª–∞–¥–∫–∞)
    const handleAnyEvent = (eventName, ...args) => {
      console.log(`üè† [OriginalGameBoard] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${eventName}:`, args);
    };
    
    socket.on('roomStatus', handleRoomStatus);
    
    // –°–ª—É—à–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    socket.onAny(handleAnyEvent);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (roomId) {
      console.log('üè† [OriginalGameBoard] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
      console.log('üè† [OriginalGameBoard] Socket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', socket.connected, socket.id);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      setTimeout(() => {
        socket.emit('checkRoomStatus', roomId);
        console.log('üè† [OriginalGameBoard] –ó–∞–ø—Ä–æ—Å checkRoomStatus –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }, 1000);
      
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      const interval = setInterval(() => {
        socket.emit('checkRoomStatus', roomId);
        console.log('üè† [OriginalGameBoard] –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å checkRoomStatus –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      }, 3000);
      
      return () => {
        clearInterval(interval);
        socket.off('roomStatus', handleRoomStatus);
        socket.offAny(handleAnyEvent);
      };
    }
  }, [roomId]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
  useEffect(() => {
    if (isMobile && !canRollDice) {
      setIsMobileMenuOpen(false);
    }
  }, [isMobile, canRollDice]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    if (turnTimeLeft !== undefined && turnTimeLeft > 0) {
      const maxTime = 120; // 2 –º–∏–Ω—É—Ç—ã = 120 —Å–µ–∫—É–Ω–¥
      const progress = (turnTimeLeft / maxTime) * 100;
      setTimerProgress(progress);
      
      // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (turnTimeLeft <= 10) {
        setIsTurnEnding(true);
      } else {
        setIsTurnEnding(false);
      }
    }
  }, [turnTimeLeft]);

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–æ–¥—ã —Å–¥–µ–ª–æ–∫
  const initializeDealDeck = () => {
    const smallDeals = [
      // Tesla –∞–∫—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–µ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥)
      { id: 15, type: 'small', name: 'Tesla –∞–∫—Ü–∏–∏ ($10)', cost: 10, income: 0, description: 'Tesla –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $10, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 16, type: 'small', name: 'Tesla –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Tesla –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 17, type: 'small', name: 'Tesla –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Tesla –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 18, type: 'small', name: 'Tesla –∞–∫—Ü–∏–∏ ($40)', cost: 40, income: 0, description: 'Tesla –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $40, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 19, type: 'small', name: 'Tesla –∞–∫—Ü–∏–∏ ($50)', cost: 50, income: 0, description: 'Tesla –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $50, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      // Microsoft –∞–∫—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–µ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥)
      { id: 20, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($10)', cost: 10, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $10, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 21, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 22, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 23, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 24, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 25, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($40)', cost: 40, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $40, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 26, type: 'small', name: 'Microsoft –∞–∫—Ü–∏–∏ ($50)', cost: 50, income: 0, description: 'Microsoft –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $50, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      // Nvidia –∞–∫—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–µ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥)
      { id: 27, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($10)', cost: 10, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $10, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 28, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 29, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 30, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 31, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 32, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($40)', cost: 40, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $40, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 33, type: 'small', name: 'Nvidia –∞–∫—Ü–∏–∏ ($50)', cost: 50, income: 0, description: 'Nvidia –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $50, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      // Apple –∞–∫—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–µ - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥)
      { id: 34, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($10)', cost: 10, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $10, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 35, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 36, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($20)', cost: 20, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $20, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 37, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 38, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($30)', cost: 30, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $30, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 39, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($40)', cost: 40, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $40, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      { id: 40, type: 'small', name: 'Apple –∞–∫—Ü–∏–∏ ($50)', cost: 50, income: 0, description: 'Apple –∞–∫—Ü–∏–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã $10-$40) - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $50, –¥–æ—Ö–æ–¥: –Ω–µ—Ç. –ú–∞–∫—Å–∏–º—É–º: 100000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 100000, isDividendStock: false },
      // BTC (–±–∏—Ç–∫–æ–∏–Ω - –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥)
      { id: 41, type: 'small', name: 'BTC ($1000)', cost: 1000, income: 100, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 1000, isDividendStock: false },
      { id: 42, type: 'small', name: 'BTC ($5000)', cost: 5000, income: 500, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 1000, isDividendStock: false },
      { id: 43, type: 'small', name: 'BTC ($10000)', cost: 10000, income: 1000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 1000, isDividendStock: false },
      { id: 44, type: 'small', name: 'BTC ($20000)', cost: 20000, income: 2000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥.', maxQuantity: 1000, isDividendStock: false },
      { id: 45, type: 'small', name: 'BTC ($1000)', cost: 1000, income: 100, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      { id: 46, type: 'small', name: 'BTC ($5000)', cost: 5000, income: 500, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      { id: 47, type: 'small', name: 'BTC ($10000)', cost: 10000, income: 1000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      { id: 48, type: 'small', name: 'BTC ($20000)', cost: 20000, income: 2000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      { id: 49, type: 'small', name: 'BTC ($50000)', cost: 50000, income: 5000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      { id: 50, type: 'small', name: 'BTC ($100000)', cost: 100000, income: 10000, description: '–ë–∏—Ç–∫–æ–∏–Ω –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–π –∞–∫—Ç–∏–≤ —Å –∫–æ–ª–µ–±–∞–Ω–∏–µ–º —Ü–µ–Ω 1000-100 000$. –ú–∞–∫—Å–∏–º—É–º: 1000. –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–ª—å–∫–æ –≤ —Ö–æ–¥, –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∏—Ç.', maxQuantity: 1000, isDividendStock: false },
      // –î–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è) - –ø–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥–æ–π
      { id: 39, type: 'small', name: 'AT&T –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (T)', cost: 5000, income: 30, description: '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–∞—é—Ç –¥–æ—Ö–æ–¥ AT&T. –î–∏–≤–∏–¥–µ–Ω–¥—ã: $30/–º–µ—Å. –ü—Ä–æ–¥–∞–∂–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', maxQuantity: 1000, isDividendStock: true, dividendYield: 30 },
      { id: 40, type: 'small', name: 'AT&T –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (T)', cost: 5000, income: 30, description: '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–∞—é—Ç –¥–æ—Ö–æ–¥ AT&T. –î–∏–≤–∏–¥–µ–Ω–¥—ã: $30/–º–µ—Å. –ü—Ä–æ–¥–∞–∂–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', maxQuantity: 1000, isDividendStock: true, dividendYield: 30 },
      { id: 41, type: 'small', name: 'Procter & Gamble –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (PG)', cost: 2000, income: 10, description: '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–∞—é—Ç –¥–æ—Ö–æ–¥ Procter & Gamble. –î–∏–≤–∏–¥–µ–Ω–¥—ã: $10/–º–µ—Å. –ü—Ä–æ–¥–∞–∂–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', maxQuantity: 1000, isDividendStock: true, dividendYield: 10 },
      { id: 42, type: 'small', name: 'Procter & Gamble –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ (PG)', cost: 2000, income: 10, description: '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –¥–∞—é—Ç –¥–æ—Ö–æ–¥ Procter & Gamble. –î–∏–≤–∏–¥–µ–Ω–¥—ã: $10/–º–µ—Å. –ü—Ä–æ–¥–∞–∂–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.', maxQuantity: 1000, isDividendStock: true, dividendYield: 10 },
      // –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–ª—ã—Ö —Å–¥–µ–ª–æ–∫
      { id: 51, type: 'small', name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 3000, income: 250, description: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 52, type: 'small', name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 3000, income: 250, description: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 53, type: 'small', name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 3000, income: 250, description: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 54, type: 'small', name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 3000, income: 250, description: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 55, type: 'small', name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 3000, income: 250, description: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 56, type: 'small', name: '–°—Ç—É–¥–∏—è –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 1 –º–µ—Å—Ç–æ', cost: 4900, income: 200, description: '–°—Ç—É–¥–∏—è –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 1 —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ' },
      { id: 57, type: 'small', name: '–°—Ç—É–¥–∏—è –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 1 –º–µ—Å—Ç–æ', cost: 4900, income: 200, description: '–°—Ç—É–¥–∏—è –º–∞–Ω–∏–∫—é—Ä–∞ –Ω–∞ 1 —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ' },
      { id: 58, type: 'small', name: '–ö–æ—Ñ–µ–π–Ω—è', cost: 4900, income: 100, description: '–ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ñ–µ–π–Ω—è' },
      { id: 59, type: 'small', name: '–ö–æ—Ñ–µ–π–Ω—è', cost: 4900, income: 100, description: '–ù–µ–±–æ–ª—å—à–∞—è –∫–æ—Ñ–µ–π–Ω—è' },
      { id: 60, type: 'small', name: '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –≤ –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π', cost: 4500, income: 350, description: '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –≤ –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π' },
      { id: 61, type: 'small', name: '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –≤ –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π', cost: 4500, income: 350, description: '–ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ –≤ –∞–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–æ–π' },
      { id: 62, type: 'small', name: '–î—Ä—É–≥ –ø—Ä–æ—Å–∏—Ç –≤ –∑–∞–π–º', cost: 5000, income: 0, description: '–î—Ä—É–≥ –ø—Ä–æ—Å–∏—Ç –≤ –∑–∞–π–º - –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' },
      { id: 63, type: 'small', name: '–ü—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫', cost: 5000, income: 0, description: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–∏—é—Ç –¥–ª—è –∫–æ—à–µ–∫' },
      { id: 64, type: 'small', name: '–ù–∞–∫–æ—Ä–º–∏—Ç—å –±–µ–∑–¥–æ–º–Ω—ã—Ö', cost: 5000, income: 0, description: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –Ω–∞–∫–æ—Ä–º–∏—Ç—å –±–µ–∑–¥–æ–º–Ω—ã—Ö' },
      { id: 65, type: 'small', name: '–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏ 20–≥–∞', cost: 5000, income: 0, description: '–£—á–∞—Å—Ç–æ–∫ –∑–µ–º–ª–∏ 20 –≥–∞ - –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å' },
      { id: 66, type: 'small', name: '–ö—Ä—ã—à–∞ –ø—Ä–æ—Ç–µ–∫–ª–∞', cost: 5000, income: 0, description: '–ö—Ä—ã—à–∞ –ø—Ä–æ—Ç–µ–∫–ª–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—Ä—ã—à—É (–µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å)', isExpense: true },
      { id: 67, type: 'small', name: '–ü–æ–∫—É–ø–∫–∞ –¥—Ä–æ–Ω–∞ –¥–ª—è —Å—ä—ë–º–æ–∫', cost: 3000, income: 50, description: '–ü–æ–∫—É–ø–∫–∞ –¥—Ä–æ–Ω–∞ –¥–ª—è —Å—ä—ë–º–æ–∫ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥' },
      { id: 68, type: 'small', name: '–§–ª–∏–ø–∏–Ω–≥ —Å—Ç—É–¥–∏–∏', cost: 5000, income: 50, description: '–§–ª–∏–ø–∏–Ω–≥ —Å—Ç—É–¥–∏–∏ - –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏' },
      { id: 69, type: 'small', name: '–ü—Ä–æ—Ä—ã–≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏', cost: 2000, income: 0, description: '–ü—Ä–æ—Ä—ã–≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (—É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—á–∏–Ω–∏—Ç—å –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—é)', isExpense: true },
      // –ö–∞—Ä—Ç–æ—á–∫–∏ "–¥—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏"
      { id: 70, type: 'small', name: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏', cost: 5000, income: 0, description: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏, –æ–Ω –≤–∞–º –±—É–¥–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω', isFriendMoneyCard: true, friendCardNumber: 1 },
      { id: 71, type: 'small', name: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏', cost: 5000, income: 0, description: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏, –æ–Ω –≤–∞–º –±—É–¥–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω', isFriendMoneyCard: true, friendCardNumber: 2 },
      { id: 72, type: 'small', name: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏', cost: 5000, income: 0, description: '–î—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏, –æ–Ω –≤–∞–º –±—É–¥–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω', isFriendMoneyCard: true, friendCardNumber: 3 }
    ];

    const bigDeals = [
      { id: 9, type: 'big', name: '–û—Ç–µ–ª—å', cost: 100000, income: 8000, description: '–ù–µ–±–æ–ª—å—à–æ–π –æ—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞' },
      { id: 10, type: 'big', name: '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä', cost: 200000, income: 20000, description: '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä' },
      { id: 11, type: 'big', name: '–ó–∞–≤–æ–¥', cost: 300000, income: 35000, description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ' },
      { id: 12, type: 'big', name: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', cost: 500000, income: 60000, description: '–ß–∞—Å—Ç–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç' },
      { id: 13, type: 'big', name: '–ë–æ–ª—å–Ω–∏—Ü–∞', cost: 400000, income: 45000, description: '–ß–∞—Å—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞' },
      { id: 14, type: 'big', name: '–ê—ç—Ä–æ–ø–æ—Ä—Ç', cost: 1000000, income: 150000, description: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—ç—Ä–æ–ø–æ—Ä—Ç' },
      // 10 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ–º–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 7000-10000$ –∏ –¥–æ—Ö–æ–¥–æ–º 100-300$
      { id: 70, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 7000, income: 100, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 71, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 7500, income: 120, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 72, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 8000, income: 140, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 73, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 8500, income: 160, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 74, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 9000, income: 180, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 75, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 9500, income: 200, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 76, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 10000, income: 220, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 77, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 8000, income: 150, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 78, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 8500, income: 170, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      { id: 79, type: 'big', name: '–î–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ', cost: 9000, income: 190, description: '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–º –≤ –ø—Ä–∏–≥–æ—Ä–æ–¥–µ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É' },
      // –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–∏–∑–Ω–µ—Å–æ–≤
      { id: 80, type: 'big', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', cost: 80000, income: 3000, description: '–ë—É—Ç–∏–∫-–æ—Ç–µ–ª—å –Ω–∞ 10 –Ω–æ–º–µ—Ä–æ–≤, —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–æ—Ö–æ–¥' },
      { id: 81, type: 'big', name: '–°–µ—Ç—å –∫–∞—Ñ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è', cost: 200000, income: 7000, description: '–ü—Ä–∏–±—ã–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞' },
      { id: 82, type: 'big', name: '–§–µ—Ä–º–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –æ–≤–æ—â–µ–π', cost: 120000, income: 4500, description: '–≠–∫–æ–ª–æ–≥–∏—á–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏ –Ω–∞ –ø–æ—Å—Ç–∞–≤–∫—É' },
      { id: 83, type: 'big', name: '–°–µ—Ç—å –∞–≤—Ç–æ–º–æ–µ–∫', cost: 150000, income: 5000, description: '–•–æ—Ä–æ—à–µ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤' },
      { id: 84, type: 'big', name: '–ö–æ–≤–æ—Ä–∫–∏–Ω–≥-—Ü–µ–Ω—Ç—Ä', cost: 250000, income: 8000, description: '–ë–æ–ª—å—à–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –∞—Ä–µ–Ω–¥—ã –ø–æ–¥ —Å—Ç–∞—Ä—Ç–∞–ø—ã –∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤' },
      { id: 85, type: 'big', name: '–ú–∏–Ω–∏-–æ—Ç–µ–ª—å', cost: 80000, income: 3000, description: '–ë—É—Ç–∏–∫-–æ—Ç–µ–ª—å –Ω–∞ 10 –Ω–æ–º–µ—Ä–æ–≤, —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–æ—Ö–æ–¥' },
      { id: 86, type: 'big', name: '–°–µ—Ç—å –∫–∞—Ñ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è', cost: 200000, income: 7000, description: '–ü—Ä–∏–±—ã–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞' },
      { id: 87, type: 'big', name: '–§—Ä–∞–Ω—à–∏–∑–∞ "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥"', cost: 100000, income: 10000, description: '–§—Ä–∞–Ω—à–∏–∑–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω—É –∏–≥—Ä—ã "–≠–Ω–µ—Ä–≥–∏—è –¥–µ–Ω–µ–≥" - –ø—Ä–∏–±—ã–ª—å–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å' }
    ];

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    const shuffledDeck = [...smallDeals, ...bigDeals].sort(() => Math.random() - 0.5);
    setDealDeck(shuffledDeck);
    

  };

  // –§—É–Ω–∫—Ü–∏—è –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  const rollDice = () => {
    if (isRolling || !canRollDice || !isMyTurn) return;
    
    setIsRolling(true);
    setDiceRolled(true);
    setCanRollDice(false);
    
    if (hasCharityBonus) {
      // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–æ–Ω—É—Å–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const dice1 = Math.floor(Math.random() * 6) + 1;
      const dice2 = Math.floor(Math.random() * 6) + 1;
      const dice3 = Math.floor(Math.random() * 6) + 1;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∏–∫–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä—É–≥–∞
      const diceCount = isOnBigCircle ? charityDiceCount : 2;
      let sum = 0;
      
      if (diceCount === 1) {
        sum = dice1;
      } else if (diceCount === 2) {
        sum = dice1 + dice2;
      } else if (diceCount === 3) {
        sum = dice1 + dice2 + dice3;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞
      setShowCharityDiceModal(true);
      setCharityDiceValues({ dice1, dice2, dice3, sum });
      
      setIsRolling(false);
      return;
    }
    
    // –û–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫ –æ–¥–Ω–æ–≥–æ –∫—É–±–∏–∫–∞
    const rollInterval = setInterval(() => {
      setDiceValue(Math.floor(Math.random() * 6) + 1);
    }, 100);

    setTimeout(() => {
      clearInterval(rollInterval);
      const finalValue = Math.floor(Math.random() * 6) + 1;
      setDiceValue(finalValue);
      setIsRolling(false);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
      sendRollDice(finalValue);
      
      // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ "–ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞"
      setTimeout(() => {
        if (diceRolled) {
          setCanRollDice(false);
        }
      }, 10000);
    }, 1000);
  };
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const openPlayerModal = (player) => {
    setSelectedPlayer(player);
    setShowPlayerModal(true);
  };
  
  const openBankModal = () => {
    setShowBankModal(true);
  };
  
  const openAssetsModal = () => {
    setShowAssetsModal(true);
  };

  const openProfessionCard = (professionId) => {
    setSelectedProfessionId(professionId);
    setShowProfessionCard(true);
  };

  const closeCreditModal = () => {
    setShowCreditModal(false);
    setCustomCreditAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    setCustomPayoffAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–≥–∞—à–µ–Ω–∏—è
    setCreditModalFromDeal(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∞
  const handleTransferAsset = (asset) => {
    setSelectedAssetForTransfer(asset);
    setShowAssetTransferModal(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
  const handleTransferAssetToPlayer = (playerIndex) => {
    if (!selectedAssetForTransfer) return;
    
    const currentPlayerData = getCurrentPlayer();
    const targetPlayer = players[playerIndex];
    
    // –ü–µ—Ä–µ–¥–∞–µ–º –æ–¥–Ω—É –∞–∫—Ü–∏—é/–∞–∫—Ç–∏–≤
    if (selectedAssetForTransfer.quantity > 1) {
      // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      setAssets(prev => prev.map(asset => 
        asset.id === selectedAssetForTransfer.id 
          ? { ...asset, quantity: asset.quantity - 1 }
          : asset
      ));
    } else {
      // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ü–∏—è, —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é
      setAssets(prev => prev.filter(asset => asset.id !== selectedAssetForTransfer.id));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤ —Ü–µ–ª–µ–≤–æ–º—É –∏–≥—Ä–æ–∫—É (–∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    setToast({
      open: true,
      message: `üéÅ ${currentPlayerData.name} –ø–µ—Ä–µ–¥–∞–ª 1 ${selectedAssetForTransfer.name} –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`,
      severity: 'success'
    });
    
    console.log(`üéÅ [OriginalGameBoard] ${currentPlayerData.name} –ø–µ—Ä–µ–¥–∞–ª 1 ${selectedAssetForTransfer.name} –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    setShowAssetTransferModal(false);
    setSelectedAssetForTransfer(null);
  };
  
  const closeModals = () => {
    setShowPlayerModal(false);
    setShowBankModal(false);
    setShowAssetsModal(false);
    setShowProfessionCard(false);
    setShowCreditModal(false);
    setShowAssetTransferModal(false);
    setSelectedPlayer(null);
    setSelectedProfessionId(null);
    setSelectedAssetForTransfer(null);
    setCustomCreditAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫—Ä–µ–¥–∏—Ç–∞
    setCustomPayoffAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
  };
  


  // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleMoneyPass = () => {
    if (!isOnBigCircle) return;
    
    const player = players[currentPlayer];
    const currentIncome = bigCirclePassiveIncome;
    
    setBigCircleBalance(prev => prev + currentIncome);
    
    setToast({
      open: true,
      message: `üí∞ ${player.name} –ø–æ–ª—É—á–∏–ª –¥–æ—Ö–æ–¥ $${currentIncome.toLocaleString()} (–±–æ–ª—å—à–æ–π –∫—Ä—É–≥)`,
      severity: 'success'
    });
    
    console.log(`üí∞ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ª—É—á–∏–ª –¥–æ—Ö–æ–¥ $${currentIncome} –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ`);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleBusinessPurchase = (cellId, businessData) => {
    if (!isOnBigCircle) return;
    
    const player = players[currentPlayer];
    const currentBalance = bigCircleBalance;
    const businessCost = businessData.cost;
    const businessIncome = businessData.income;
    
    if (currentBalance >= businessCost) {
      // –ü–æ–∫—É–ø–∞–µ–º –±–∏–∑–Ω–µ—Å
      setBigCircleBalance(prev => prev - businessCost);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å –∫ —Å–ø–∏—Å–∫—É
      const newBusiness = {
        id: Date.now(),
        cellId: cellId,
        name: businessData.name,
        cost: businessCost,
        income: businessIncome,
        owner: player.id,
        ownerName: player.name,
        ownerColor: player.color
      };
      
      setBigCircleBusinesses(prev => [...prev, newBusiness]);
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
      setBigCirclePassiveIncome(prev => prev + businessIncome);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–µ—Ç–∫–∏
      setBigCircleCells(prev => ({
        ...prev,
        [cellId]: {
          owner: player.id,
          ownerName: player.name,
          ownerColor: player.color,
          business: newBusiness
        }
      }));
      
      setToast({
        open: true,
        message: `‚úÖ ${player.name} –∫—É–ø–∏–ª ${businessData.name} –∑–∞ $${businessCost.toLocaleString()}. –î–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ $${businessIncome}/—Ö–æ–¥`,
        severity: 'success'
      });
      
      console.log(`‚úÖ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –∫—É–ø–∏–ª –±–∏–∑–Ω–µ—Å ${businessData.name} –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
      if (checkVictoryConditions(player.id)) {
        setShowVictoryModal(true);
        setIsGameFinished(true);
      }
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${businessData.name}. –ù—É–∂–Ω–æ: $${businessCost.toLocaleString()}`,
        severity: 'error'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
  const checkVictoryConditions = (playerId) => {
    const player = players.find(p => p.id === playerId);
    if (!player || !isOnBigCircle) return false;
    
    // –£—Å–ª–æ–≤–∏–µ 1: 2 –±–∏–∑–Ω–µ—Å–∞ + –º–µ—á—Ç–∞
    const businessCount = bigCircleBusinesses.filter(b => b.owner === playerId).length;
    const dreamCount = bigCircleDreams.filter(d => d.owner === playerId).length;
    
    if (businessCount >= 2 && dreamCount >= 1) {
      setVictoryReason(`üèÜ ${player.name} –ø–æ–±–µ–¥–∏–ª! –ö—É–ø–∏–ª 2 –±–∏–∑–Ω–µ—Å–∞ –∏ –º–µ—á—Ç—É!`);
      return true;
    }
    
    // –£—Å–ª–æ–≤–∏–µ 2: –±–∏–∑–Ω–µ—Å + –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ +50,000$ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É
    const initialIncome = getTotalAssetsIncome() * 10; // –ù–∞—á–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
    const currentIncome = bigCirclePassiveIncome;
    const incomeIncrease = currentIncome - initialIncome;
    
    if (businessCount >= 1 && incomeIncrease >= 50000) {
      setVictoryReason(`üèÜ ${player.name} –ø–æ–±–µ–¥–∏–ª! –ö—É–ø–∏–ª –±–∏–∑–Ω–µ—Å –∏ —É–≤–µ–ª–∏—á–∏–ª –¥–æ—Ö–æ–¥ –Ω–∞ $${incomeIncrease.toLocaleString()}!`);
      return true;
    }
    
    return false;
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –º–µ—á—Ç—ã –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleDreamPurchase = (cellId, dreamData) => {
    if (!isOnBigCircle) return;
    
    const player = players[currentPlayer];
    const currentBalance = bigCircleBalance;
    const dreamCost = dreamData.cost;
    
    if (currentBalance >= dreamCost) {
      // –ü–æ–∫—É–ø–∞–µ–º –º–µ—á—Ç—É
      setBigCircleBalance(prev => prev - dreamCost);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—á—Ç—É –∫ —Å–ø–∏—Å–∫—É
      const newDream = {
        id: Date.now(),
        cellId: cellId,
        name: dreamData.name,
        cost: dreamCost,
        owner: player.id,
        ownerName: player.name,
        ownerColor: player.color
      };
      
      setBigCircleDreams(prev => [...prev, newDream]);
      
      setToast({
        open: true,
        message: `üåü ${player.name} –∫—É–ø–∏–ª –º–µ—á—Ç—É "${dreamData.name}" –∑–∞ $${dreamCost.toLocaleString()}!`,
        severity: 'success'
      });
      
      console.log(`üåü [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –∫—É–ø–∏–ª –º–µ—á—Ç—É ${dreamData.name} –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
      if (checkVictoryConditions(player.id)) {
        setShowVictoryModal(true);
        setIsGameFinished(true);
      }
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–µ—á—Ç—ã "${dreamData.name}". –ù—É–∂–Ω–æ: $${dreamCost.toLocaleString()}`,
        severity: 'error'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
  const calculateRankings = () => {
    const rankings = players.map(player => {
      const playerData = {
        id: player.id,
        name: player.name,
        color: player.color,
        position: player.position,
        isOnBigCircle: true, // –í—Å–µ–≥–¥–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
        passiveIncome: isOnBigCircle ? bigCirclePassiveIncome : getTotalAssetsIncome(),
        balance: isOnBigCircle ? bigCircleBalance : playerMoney,
        businessCount: bigCircleBusinesses.filter(b => b.owner === player.id).length,
        dreamCount: bigCircleDreams.filter(d => d.owner === player.id).length,
        hasWon: false,
        rank: 0,
        points: 0
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–±–µ–¥–∏–ª –ª–∏ –∏–≥—Ä–æ–∫
      if (checkVictoryConditions(player.id)) {
        playerData.hasWon = true;
      }
      
      return playerData;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–µ–π—Ç–∏–Ω–≥–∞
    rankings.sort((a, b) => {
      // 1. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ (–∫—É–ø–∏–ª–∏ –º–µ—á—Ç—É)
      if (a.hasWon && !b.hasWon) return -1;
      if (!a.hasWon && b.hasWon) return 1;
      
      // 2. –ù–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –ø–∞—Å—Å–∏–≤–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º
      if (a.isOnBigCircle && b.isOnBigCircle) {
        return b.passiveIncome - a.passiveIncome;
      }
      if (a.isOnBigCircle && !b.isOnBigCircle) return -1;
      if (!a.isOnBigCircle && b.isOnBigCircle) return 1;
      
      // 3. –ù–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –ø–∞—Å—Å–∏–≤–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º
      if (!a.isOnBigCircle && !b.isOnBigCircle) {
        if (a.passiveIncome !== b.passiveIncome) {
          return b.passiveIncome - a.passiveIncome;
        }
      }
      
      // 4. –ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
      return b.balance - a.balance;
    });
    
    // –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ—Å—Ç–∞ –∏ –æ—á–∫–∏
    const totalPlayers = rankings.length;
    rankings.forEach((player, index) => {
      player.rank = index + 1;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
      if (player.hasWon) {
        // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –æ—á–∫–∏ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–≥—Ä–æ–∫–æ–≤
        player.points = totalPlayers;
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç –æ—á–∫–∏ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±–æ–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        player.points = totalPlayers - player.rank;
      }
    });
    
    return rankings;
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const endGame = () => {
    const rankings = calculateRankings();
    setPlayerRankings(rankings);
    setShowRankingsModal(true);
    setIsGameFinished(true);
    
    console.log(`üèÅ [OriginalGameBoard] –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–π—Ç–∏–Ω–≥:`, rankings);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  const checkGameTime = () => {
    const currentTime = Date.now();
    if (currentTime >= gameEndTime && !isGameFinished) {
      endGame();
    }
  };

  // –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã
  useEffect(() => {
    const interval = setInterval(checkGameTime, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    return () => clearInterval(interval);
  }, [gameEndTime, isGameFinished]);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleBusinessTakeover = (cellId, businessData) => {
    if (!isOnBigCircle) return;
    
    const player = players[currentPlayer];
    const currentBalance = bigCircleBalance;
    const currentOwner = bigCircleCells[cellId];
    
    if (!currentOwner) return;
    
    // –¶–µ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–∫–∏ = –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞ * 2
    const takeoverCost = businessData.cost * 2;
    
    if (currentBalance >= takeoverCost) {
      // –ü–µ—Ä–µ–∫—É–ø–∞–µ–º –±–∏–∑–Ω–µ—Å
      setBigCircleBalance(prev => prev - takeoverCost);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
      const previousOwnerIndex = players.findIndex(p => p.id === currentOwner.owner);
      if (previousOwnerIndex !== -1) {
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      }
      
      // –£–¥–∞–ª—è–µ–º –¥–æ—Ö–æ–¥ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
      setBigCirclePassiveIncome(prev => prev - businessData.income);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–µ—Ç–∫–∏
      setBigCircleCells(prev => ({
        ...prev,
        [cellId]: {
          owner: player.id,
          ownerName: player.name,
          ownerColor: player.color,
          business: {
            ...currentOwner.business,
            owner: player.id,
            ownerName: player.name,
            ownerColor: player.color
          }
        }
      }));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å –≤ —Å–ø–∏—Å–∫–µ
      setBigCircleBusinesses(prev => prev.map(business => 
        business.cellId === cellId 
          ? { ...business, owner: player.id, ownerName: player.name, ownerColor: player.color }
          : business
      ));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
      setBigCirclePassiveIncome(prev => prev + businessData.income);
      
      setToast({
        open: true,
        message: `üîÑ ${player.name} –ø–µ—Ä–µ–∫—É–ø–∏–ª ${businessData.name} –∑–∞ $${takeoverCost.toLocaleString()} —É ${currentOwner.ownerName}`,
        severity: 'success'
      });
      
      console.log(`üîÑ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–µ—Ä–µ–∫—É–ø–∏–ª –±–∏–∑–Ω–µ—Å ${businessData.name} —É ${currentOwner.ownerName}`);
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–µ—Ä–µ–∫—É–ø–∫–∏ ${businessData.name}. –ù—É–∂–Ω–æ: $${takeoverCost.toLocaleString()}`,
        severity: 'error'
      });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const movePlayer = (steps) => {
    const updatedPlayers = [...players];
    const player = updatedPlayers[currentPlayer];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–≤–∏–∂–µ–Ω–∏—è –∏ ID –¥–≤–∏–∂—É—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞
    setIsMoving(true);
    setMovingPlayerId(player.id);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    const startPosition = player.position;
    let currentPosition = startPosition;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ—à–∞–≥–æ–≤–æ
    const moveStep = () => {
      if (currentPosition < startPosition + steps) {
        currentPosition++;
        
        // –õ–æ–≥–∏–∫–∞ –∑–∞–º—ã–∫–∞–Ω–∏—è –∫—Ä—É–≥–∞
        if (isOnBigCircle) {
          // –ù–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ: 25-76 (52 –∫–ª–µ—Ç–∫–∏)
          if (currentPosition > 76) {
            currentPosition = 25; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞
          }
        } else {
          // –ù–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ: 1-24 (24 –∫–ª–µ—Ç–∫–∏)
          if (currentPosition > 24) {
            currentPosition = 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        player.position = currentPosition;
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        setTimeout(moveStep, 200); // 200ms –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      } else {
        // –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        setIsMoving(false);
        setMovingPlayerId(null);
        
        // –ò–≥—Ä–æ–∫–∏ –≤—Å–µ–≥–¥–∞ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É –∫–ª–µ—Ç–∫–∏
        handleCellAction(player.position);
        
        console.log(`üéØ –ò–≥—Ä–æ–∫ ${player.name} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${player.position} (–±–æ–ª—å—à–æ–π –∫—Ä—É–≥)`);
      }
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
    moveStep();
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–µ—Ç–∫–∏
  const handleCellAction = (position) => {
    const player = currentPlayer;
    
    // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞
      handleBigCircleCellAction(position);
  };



  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∫–ª–µ—Ç–∫–∏ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleCellAction = (position) => {
    const player = currentPlayer;
    
    // –ö–ª–µ—Ç–∫–∏ –¥–æ—Ö–æ–¥–∞ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (25, 38, 51, 64)
    if ([25, 38, 51, 64].includes(position)) {
      handleBigCircleMoneyPass();
    }
    
    // –ö–ª–µ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å–æ–≤ (27, 29, 33, 35, 37, 40, 44, 46, 48, 52, 54, 56, 58, 60, 62, 68, 70, 72, 74, 76)
    const businessCells = [27, 29, 33, 35, 37, 40, 44, 46, 48, 52, 54, 56, 58, 60, 62, 68, 70, 72, 74, 76];
    if (businessCells.includes(position)) {
      const cellData = originalBoard.find(cell => cell.id === position);
      if (cellData && cellData.type === 'business') {
        const currentOwner = bigCircleCells[position];
        
        if (currentOwner) {
          // –ö–ª–µ—Ç–∫–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∫—É–ø–∫—É
          if (currentOwner.owner !== player.id) {
            const takeoverCost = cellData.cost * 2;
            setToast({
              open: true,
              message: `üîÑ ${cellData.name} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ${currentOwner.ownerName}. –¶–µ–Ω–∞ –ø–µ—Ä–µ–∫—É–ø–∫–∏: $${takeoverCost.toLocaleString()}`,
              severity: 'info'
            });
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–∫–∏
          } else {
            setToast({
              open: true,
              message: `‚úÖ ${cellData.name} —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!`,
              severity: 'success'
            });
          }
        } else {
          // –ö–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫—É–ø–∫—É
          setToast({
            open: true,
            message: `üíº ${cellData.name} - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${cellData.cost.toLocaleString()}, –¥–æ—Ö–æ–¥: $${cellData.income}/—Ö–æ–¥`,
            severity: 'info'
          });
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        }
      }
    }
    
    // –ö–ª–µ—Ç–∫–∏ –º–µ—á—Ç—ã (26, 30, 36, 39, 41, 43, 45, 47, 49, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75)
    const dreamCells = [26, 30, 36, 39, 41, 43, 45, 47, 49, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75];
    if (dreamCells.includes(position)) {
      const cellData = originalBoard.find(cell => cell.id === position);
      if (cellData && cellData.type === 'dream') {
        const currentOwner = bigCircleCells[position];
        
        if (currentOwner) {
          // –ú–µ—á—Ç–∞ —É–∂–µ –∫—É–ø–ª–µ–Ω–∞
          if (currentOwner.owner === player.id) {
            setToast({
              open: true,
              message: `üåü ${cellData.name} —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!`,
              severity: 'success'
            });
          } else {
            setToast({
              open: true,
              message: `üåü ${cellData.name} —É–∂–µ –∫—É–ø–ª–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º ${currentOwner.ownerName}`,
              severity: 'info'
            });
          }
        } else {
          // –ú–µ—á—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫—É–ø–∫—É
          setToast({
            open: true,
            message: `üåü ${cellData.name} - —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${cellData.cost.toLocaleString()}`,
            severity: 'info'
          });
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –º–µ—á—Ç—ã
        }
      }
    }
    
    // –ö–ª–µ—Ç–∫–∏ –ø–æ—Ç–µ—Ä—å (28, 34, 42, 50, 66)
    const lossCells = [28, 34, 42, 50, 66];
    if (lossCells.includes(position)) {
      const cellData = originalBoard.find(cell => cell.id === position);
      if (cellData && cellData.type === 'loss') {
        setToast({
          open: true,
          message: `üí∏ ${cellData.name} - ${cellData.description}`,
          severity: 'error'
        });
      }
    }
    
    // –ö–ª–µ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (32)
    if (position === 32) {
      handleBigCircleCharityAction();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ
  const handleBigCircleCharityAction = () => {
    const player = players[currentPlayer];
    
    // –ù–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–æ–∏—Ç 100,000$
    const charityAmount = 100000;
    
    setCharityCost(charityAmount);
    setCharityDiceCount(3); // –ù–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å 1, 2 –∏–ª–∏ 3 –∫—É–±–∏–∫–∞
    setShowCharityModal(true);
    
    console.log(`‚ù§Ô∏è [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–æ–ª—å—à–æ–π –∫—Ä—É–≥). –°—Ç–æ–∏–º–æ—Å—Ç—å: $${charityAmount}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞
  const getPlayerExpenses = (profession) => {
    switch (profession) {
      case '–ò–Ω–∂–µ–Ω–µ—Ä':
        return 3000;
      case '–ú–µ–Ω–µ–¥–∂–µ—Ä':
        return 2800;
      case '–î–∏–∑–∞–π–Ω–µ—Ä':
        return 2500;
      case '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç':
        return 3500;
      default:
        return 2500;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  const getPlayerSalary = (profession) => {
    switch (profession) {
      case '–ò–Ω–∂–µ–Ω–µ—Ä':
        return 5000;
      case '–ú–µ–Ω–µ–¥–∂–µ—Ä':
        return 4500;
      case '–î–∏–∑–∞–π–Ω–µ—Ä':
        return 4000;
      case '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç':
        return 6000;
      default:
        return 4000;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞
  const handleChildBirth = () => {
    const player = players[currentPlayer];
    
    // –ë—Ä–æ—Å–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–±–∏–∫
    const childDice = Math.floor(Math.random() * 6) + 1;
    
    if (childDice <= 4) {
      // –†–µ–±–µ–Ω–æ–∫ —Ä–æ–¥–∏–ª—Å—è!
      setChildrenCount(prev => prev + 1);
      setPlayerMoney(prev => prev + 5000); // –†–∞–∑–æ–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞ $5000
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–Ω—Ñ–µ—Ç–∏
      setShowConfetti(true);
      setTimeout(() => setShowConfetti(false), 3000);
      
      setToast({
        open: true,
        message: `üë∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£ ${player.name} —Ä–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫! +$5,000`,
        severity: 'success'
      });
      
      console.log(`üë∂ [OriginalGameBoard] –£ –∏–≥—Ä–æ–∫–∞ ${player.name} —Ä–æ–¥–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫! –ö—É–±–∏–∫: ${childDice}`);
    } else {
      // –†–µ–±–µ–Ω–æ–∫ –Ω–µ —Ä–æ–¥–∏–ª—Å—è
      setToast({
        open: true,
        message: `üòî ${player.name}, —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ —Ä–æ–¥–∏–ª—Å—è. –ö—É–±–∏–∫: ${childDice}`,
        severity: 'info'
      });
      
      console.log(`üòî [OriginalGameBoard] –£ –∏–≥—Ä–æ–∫–∞ ${player.name} —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ —Ä–æ–¥–∏–ª—Å—è. –ö—É–±–∏–∫: ${childDice}`);
    }
    
    setShowChildModal(false);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ
  const handleCharityAction = () => {
    const player = players[currentPlayer];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (50% –æ—Ç —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞)
    const totalIncome = getPlayerSalary(player.profession) + 
                       assets.reduce((sum, asset) => sum + (asset.income || 0), 0);
    const charityAmount = Math.floor(totalIncome * 0.5);
    
    setCharityCost(charityAmount);
    setCharityDiceCount(2); // –ù–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ –≤—Å–µ–≥–¥–∞ 2 –∫—É–±–∏–∫–∞
    setShowCharityModal(true);
    
    console.log(`‚ù§Ô∏è [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–∞–ª—ã–π –∫—Ä—É–≥). –°—Ç–æ–∏–º–æ—Å—Ç—å: $${charityAmount}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä—ã–Ω–∫–∞
  const handleMarketAction = () => {
    const player = players[currentPlayer];
    
    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const marketCard = marketDeckManager.drawCard();
    
    if (!marketCard) {
      setToast({
        open: true,
        message: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä—ã–Ω–∫–∞',
        severity: 'error'
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∞–∫—Ç–∏–≤—ã)
    const playerAssets = assets;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫—Ç–∏–≤
    const hasMatchingAsset = checkPlayerHasMatchingAsset(playerAssets, marketCard);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setCurrentMarketCard(marketCard);
    setCurrentPlayerAssets(playerAssets);
    setShowMarketCardModal(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setMarketDeckCount(marketDeckManager.getDeckCount());
    setMarketDiscardCount(marketDeckManager.getDiscardCount());
    
    console.log(`üè™ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É —Ä—ã–Ω–∫–∞. –ö–∞—Ä—Ç–æ—á–∫–∞: ${marketCard.name}`);
    console.log(`üìä [OriginalGameBoard] –ö–æ–ª–æ–¥–∞: ${marketDeckManager.getDeckCount()}, –û—Ç–±–æ–π: ${marketDeckManager.getDiscardCount()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const handleExpenseAction = () => {
    const player = players[currentPlayer];
    
    // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const expenseCard = expenseDeckManager.drawCard();
    
    if (!expenseCard) {
      setToast({
        open: true,
        message: '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤',
        severity: 'error'
      });
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setCurrentExpenseCard(expenseCard);
    setShowExpenseCardModal(true);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setExpenseDeckCount(expenseDeckManager.getDeckCount());
    setExpenseDiscardCount(expenseDeckManager.getDiscardCount());
    
    console.log(`üí∏ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ø–∞–ª –Ω–∞ –∫–ª–µ—Ç–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤. –ö–∞—Ä—Ç–æ—á–∫–∞: ${expenseCard.name}`);
    console.log(`üìä [OriginalGameBoard] –ö–æ–ª–æ–¥–∞: ${expenseDeckManager.getDeckCount()}, –û—Ç–±–æ–π: ${expenseDeckManager.getDiscardCount()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
  const handleMarketAccept = () => {
    const player = players[currentPlayer];
    
    if (!currentMarketCard) return;
    
    if (currentMarketCard.type === 'market_crash') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∞—Ö–∞ —Ä—ã–Ω–∫–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤)
      handleMarketCrash();
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      handleMarketSale();
    }
    
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–±–æ–π
    marketDeckManager.discardCard(currentMarketCard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setMarketDeckCount(marketDeckManager.getDeckCount());
    setMarketDiscardCount(marketDeckManager.getDiscardCount());
    
    setShowMarketCardModal(false);
    setCurrentMarketCard(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
  const handleMarketDecline = () => {
    const player = players[currentPlayer];
    
    setToast({
      open: true,
      message: `${player.name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞`,
      severity: 'info'
    });
    
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–±–æ–π
    marketDeckManager.discardCard(currentMarketCard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setMarketDeckCount(marketDeckManager.getDeckCount());
    setMarketDiscardCount(marketDeckManager.getDiscardCount());
    
    setShowMarketCardModal(false);
    setCurrentMarketCard(null);
    
    console.log(`üòî [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞`);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–∞ —á–µ—Ä–µ–∑ —Ä—ã–Ω–æ–∫
  const handleMarketSale = () => {
    const player = players[currentPlayer];
    
    if (!currentMarketCard) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    let assetToSell = null;
    
    if (currentMarketCard.targetAsset === 'any_business') {
      // –ü—Ä–æ–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å
      assetToSell = currentPlayerAssets.find(asset => asset.type === 'business');
    } else {
      // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      assetToSell = currentPlayerAssets.find(asset => asset.id === currentMarketCard.targetAsset);
    }
    
    if (assetToSell) {
      // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
      setAssets(prev => prev.filter(asset => asset.id !== assetToSell.id));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏
      setPlayerMoney(prev => prev + currentMarketCard.offerPrice);
      
      setToast({
        open: true,
        message: `üí∞ ${player.name} –ø—Ä–æ–¥–∞–ª ${assetToSell.name} –∑–∞ $${currentMarketCard.offerPrice.toLocaleString()}`,
        severity: 'success'
      });
      
      console.log(`üí∞ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø—Ä–æ–¥–∞–ª ${assetToSell.name} –∑–∞ $${currentMarketCard.offerPrice}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∞—Ö–∞ —Ä—ã–Ω–∫–∞
  const handleMarketCrash = () => {
    const player = players[currentPlayer];
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ BTC –∞–∫—Ç–∏–≤—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    setAssets(prev => prev.filter(asset => asset.type !== 'bitcoin'));
    
    setToast({
      open: true,
      message: `üìâ –ö—Ä–∞—Ö —Ä—ã–Ω–∫–∞! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ Bitcoin –∞–∫—Ç–∏–≤—ã`,
      severity: 'error'
    });
    
    console.log(`üìâ [OriginalGameBoard] –ö—Ä–∞—Ö —Ä—ã–Ω–∫–∞! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ Bitcoin –∞–∫—Ç–∏–≤—ã`);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—Ö–æ–¥–∞
  const handleExpensePay = () => {
    const player = players[currentPlayer];
    
    if (!currentExpenseCard) return;
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
    const updatedPlayers = [...players];
    updatedPlayers[currentPlayer] = {
      ...updatedPlayers[currentPlayer],
      balance: updatedPlayers[currentPlayer].balance - currentExpenseCard.cost
    };

    
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–±–æ–π
    expenseDeckManager.discardCard(currentExpenseCard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setExpenseDeckCount(expenseDeckManager.getDeckCount());
    setExpenseDiscardCount(expenseDeckManager.getDiscardCount());
    
    setToast({
      open: true,
      message: `üí∏ ${player.name} –∑–∞–ø–ª–∞—Ç–∏–ª $${currentExpenseCard.cost.toLocaleString()} –∑–∞ ${currentExpenseCard.name}`,
      severity: 'info'
    });
    
    setShowExpenseCardModal(false);
    setCurrentExpenseCard(null);
    
    console.log(`üí∏ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –∑–∞–ø–ª–∞—Ç–∏–ª $${currentExpenseCard.cost} –∑–∞ ${currentExpenseCard.name}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–∞—Å—Ö–æ–¥–∞
  const handleExpenseTakeCredit = () => {
    const player = players[currentPlayer];
    
    if (!currentExpenseCard) return;
    
    const shortfall = currentExpenseCard.cost - player.balance;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç –∏–≥—Ä–æ–∫—É
    const updatedPlayers = [...players];
    updatedPlayers[currentPlayer] = {
      ...updatedPlayers[currentPlayer],
      balance: updatedPlayers[currentPlayer].balance + shortfall,
      credits: (updatedPlayers[currentPlayer].credits || 0) + shortfall
    };
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–∞
    updatedPlayers[currentPlayer].balance -= currentExpenseCard.cost;
    
    // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –æ—Ç–±–æ–π
    expenseDeckManager.discardCard(currentExpenseCard);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–ª–æ–¥—ã
    setExpenseDeckCount(expenseDeckManager.getDeckCount());
    setExpenseDiscardCount(expenseDeckManager.getDiscardCount());
    
    setToast({
      open: true,
      message: `üí≥ ${player.name} –≤–∑—è–ª –∫—Ä–µ–¥–∏—Ç $${shortfall.toLocaleString()} –¥–ª—è –æ–ø–ª–∞—Ç—ã ${currentExpenseCard.name}`,
      severity: 'warning'
    });
    
    setShowExpenseCardModal(false);
    setCurrentExpenseCard(null);
    
    console.log(`üí≥ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –≤–∑—è–ª –∫—Ä–µ–¥–∏—Ç $${shortfall} –¥–ª—è –æ–ø–ª–∞—Ç—ã ${currentExpenseCard.name}`);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleCharityAccept = () => {
    const player = players[currentPlayer];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä—É–≥–∞
    const currentBalance = isOnBigCircle ? bigCircleBalance : playerMoney;
    
    if (currentBalance >= charityCost) {
      // –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
      if (isOnBigCircle) {
        setBigCircleBalance(prev => prev - charityCost);
      } else {
        setPlayerMoney(prev => prev - charityCost);
      }
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ–Ω—É—Å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      setHasCharityBonus(true);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä—É–≥–∞
      const diceMessage = isOnBigCircle 
        ? `–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å 1, 2 –∏–ª–∏ 3 –∫—É–±–∏–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä!`
        : `–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞!`;
      
      setToast({
        open: true,
        message: `‚ù§Ô∏è ${player.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª $${charityCost.toLocaleString()} –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! ${diceMessage}`,
        severity: 'success'
      });
      
      console.log(`‚ù§Ô∏è [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø—Ä–∏–Ω—è–ª –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ $${charityCost} (${isOnBigCircle ? '–±–æ–ª—å—à–æ–π –∫—Ä—É–≥' : '–º–∞–ª—ã–π –∫—Ä—É–≥'})`);
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù—É–∂–Ω–æ: $${charityCost.toLocaleString()}`,
        severity: 'error'
      });
    }
    
    setShowCharityModal(false);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleCharityDecline = () => {
    setShowCharityModal(false);
    
    setToast({
      open: true,
      message: `üòî –ò–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`,
      severity: 'info'
    });
    
    console.log(`üòî [OriginalGameBoard] –ò–≥—Ä–æ–∫ –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏`);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ö–æ–¥–∞ –ø–æ –∫—É–±–∏–∫–∞–º –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const handleCharityDiceChoice = (chosenValue) => {
    setShowCharityDiceModal(false);
    
    // –î–≤–∏–≥–∞–µ–º —Ñ–∏—à–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    movePlayer(chosenValue);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ
    // –ù–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ –±–æ–Ω—É—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã
    if (!isOnBigCircle) {
      setHasCharityBonus(false);
    }
    
    const diceInfo = isOnBigCircle 
      ? `(–∫—É–±–∏–∫–∏: ${charityDiceValues.dice1}, ${charityDiceValues.dice2}, ${charityDiceValues.dice3})`
      : `(–∫—É–±–∏–∫–∏: ${charityDiceValues.dice1}, ${charityDiceValues.dice2})`;
    
    console.log(`üé≤ [OriginalGameBoard] –ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Ö–æ–¥ –Ω–∞ ${chosenValue} —à–∞–≥–æ–≤ ${diceInfo} ${isOnBigCircle ? '(–±–æ–ª—å—à–æ–π –∫—Ä—É–≥ - –±–æ–Ω—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω)' : '(–º–∞–ª—ã–π –∫—Ä—É–≥ - –±–æ–Ω—É—Å —Å–±—Ä–æ—à–µ–Ω)'}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
  const handleDealTypeSelection = (dealType) => {
    setShowDealTypeModal(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (hasFreeCards && dealType === 'small') {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      setShowFreeCardsModal(true);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–∏–ø—É
    const availableCards = dealDeck.filter(card => card.type === dealType);
    
    if (availableCards.length === 0) {
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–±–æ–π
      if (discardPile.length > 0) {
        const shuffledDiscard = [...discardPile].sort(() => Math.random() - 0.5);
        setDealDeck(shuffledDiscard);
        setDiscardPile([]);
        

        
        setToast({
          open: true,
          message: `üîÑ –ö–æ–ª–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –û—Ç–±–æ–π (${shuffledDiscard.length} –∫–∞—Ä—Ç–æ—á–µ–∫) –ø–µ—Ä–µ–º–µ—à–∞–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–≥—Ä—É`,
          severity: 'info'
        });
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        handleDealTypeSelection(dealType);
        return;
      } else {
        setToast({
          open: true,
          message: `‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ ${dealType === 'small' ? '–º–∞–ª—ã—Ö' : '–±–æ–ª—å—à–∏—Ö'} —Å–¥–µ–ª–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å`,
          severity: 'warning'
        });
        return;
      }
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–æ–ª–æ–¥—ã
    const card = availableCards[0];
    setCurrentDealCard(card);
    setShowDealModal(true);
    
    // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫–æ–ª–æ–¥—ã
    setDealDeck(prev => prev.filter(c => c.id !== card.id));
    

  };

  // –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const handleUseFreeCards = () => {
    setHasFreeCards(false);
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –º–∞–ª–æ–π —Å–¥–µ–ª–∫–∏
    const smallCards = dealDeck.filter(card => card.type === 'small' && !card.isFriendMoneyCard);
    const bigCards = dealDeck.filter(card => card.type === 'big');
    
    if (smallCards.length > 0 && bigCards.length > 0) {
      const randomSmallCard = smallCards[Math.floor(Math.random() * smallCards.length)];
      const randomBigCard = bigCards[Math.floor(Math.random() * bigCards.length)];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ
      const player = players[currentPlayer];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      const smallAsset = {
        id: Date.now(),
        type: 'deal',
        name: randomSmallCard.name,
        icon: 'üè™',
        value: randomSmallCard.cost,
        cost: 0, // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
        income: randomSmallCard.income,
        color: '#10B981',
        description: randomSmallCard.description + ' (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç –¥—Ä—É–≥–∞)',
        quantity: 1,
        isDividendStock: randomSmallCard.isDividendStock || false,
        dividendYield: randomSmallCard.dividendYield || 0,
        maxQuantity: randomSmallCard.maxQuantity || 1
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à—É—é –∫–∞—Ä—Ç–æ—á–∫—É
      const bigAsset = {
        id: Date.now() + 1,
        type: 'deal',
        name: randomBigCard.name,
        icon: 'üè¢',
        value: randomBigCard.cost,
        cost: 0, // –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
        income: randomBigCard.income,
        color: '#8B5CF6',
        description: randomBigCard.description + ' (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç –¥—Ä—É–≥–∞)',
        quantity: 1,
        isDividendStock: randomBigCard.isDividendStock || false,
        dividendYield: randomBigCard.dividendYield || 0,
        maxQuantity: randomBigCard.maxQuantity || 1
      };
      
      setAssets(prev => [...prev, smallAsset, bigAsset]);
      
      // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–æ–¥—ã
      setDealDeck(prev => prev.filter(c => c.id !== randomSmallCard.id && c.id !== randomBigCard.id));
      
      setToast({
        open: true,
        message: `üéÅ ${player.name} –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω–æ: ${randomSmallCard.name} –∏ ${randomBigCard.name}!`,
        severity: 'success'
      });
      
      console.log(`üéÅ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏: ${randomSmallCard.name}, ${randomBigCard.name}`);
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏`,
        severity: 'warning'
      });
    }
    
    setShowFreeCardsModal(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–∫–∏
  const handleBuyDeal = () => {
    if (!currentDealCard) return;
    
    const player = players[currentPlayer];
    
    if (playerMoney >= currentDealCard.cost) {
      // –ü–æ–∫—É–ø–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
      setPlayerMoney(prev => prev - currentDealCard.cost);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ "–¥—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏"
      if (currentDealCard.isFriendMoneyCard) {
        setFriendMoneyCardsUsed(prev => prev + 1);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
        if (currentDealCard.friendCardNumber === 1) {
          // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç
          setToast({
            open: true,
            message: `üíù ${player.name} –ø–æ–º–æ–≥ –¥—Ä—É–≥—É! –î—Ä—É–≥ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω.`,
            severity: 'info'
          });
        } else if (currentDealCard.friendCardNumber === 2) {
          // –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥
          setHasExtraTurn(true);
          setToast({
            open: true,
            message: `üéØ ${player.name} –ø–æ–º–æ–≥ –¥—Ä—É–≥—É! –î—Ä—É–≥ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥ - —É –≤–∞—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥!`,
            severity: 'success'
          });
        } else if (currentDealCard.friendCardNumber === 3) {
          // –¢—Ä–µ—Ç—å—è –∫–∞—Ä—Ç–æ—á–∫–∞ - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          setHasFreeCards(true);
          setToast({
            open: true,
            message: `üéÅ ${player.name} –ø–æ–º–æ–≥ –¥—Ä—É–≥—É! –î—Ä—É–≥ –¥–∞—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–∞–ª–æ–π –∏ –±–æ–ª—å—à–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`,
            severity: 'success'
          });
        }
        
        console.log(`üíù [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} –∫—É–ø–∏–ª –∫–∞—Ä—Ç–æ—á–∫—É "–¥—Ä—É–≥—É –Ω—É–∂–Ω—ã –¥–µ–Ω—å–≥–∏" #${currentDealCard.friendCardNumber}`);
        setShowDealModal(false);
        setCurrentDealCard(null);
        return;
      }
      
      // –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –∞–∫—Ç–∏–≤—ã
      if (currentDealCard.isExpense) {
        // –ü—Ä–æ—Å—Ç–æ —Ç—Ä–∞—Ç–∏–º –¥–µ–Ω—å–≥–∏, –∞–∫—Ç–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ç–∏–≤ —É –∏–≥—Ä–æ–∫–∞
        const existingAssetIndex = assets.findIndex(asset => 
          asset.name === currentDealCard.name && asset.type === 'deal'
        );
        
        if (existingAssetIndex !== -1) {
          // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          setAssets(prev => prev.map((asset, index) => 
            index === existingAssetIndex 
              ? { ...asset, quantity: asset.quantity + 1 }
              : asset
          ));
        } else {
          // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
          const newAsset = {
            id: Date.now(),
            type: 'deal',
            name: currentDealCard.name,
            icon: currentDealCard.income === 0 ? 'üíù' : currentDealCard.type === 'small' ? 'üè™' : 'üè¢',
            value: currentDealCard.cost,
            cost: currentDealCard.cost,
            income: currentDealCard.income,
            color: currentDealCard.income === 0 ? '#F59E0B' : currentDealCard.type === 'small' ? '#10B981' : '#8B5CF6',
            description: currentDealCard.description,
            quantity: 1,
            isDividendStock: currentDealCard.isDividendStock || false,
            dividendYield: currentDealCard.dividendYield || 0,
            maxQuantity: currentDealCard.maxQuantity || 1
          };
          
          setAssets(prev => [...prev, newAsset]);
        }
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
      const isCharity = currentDealCard.income === 0 && !currentDealCard.isExpense && !currentDealCard.isFriendMoneyCard;
      const isExpense = currentDealCard.isExpense;
      
      let message;
      if (isExpense) {
        message = `üîß ${player.name} –ø–æ—Ç—Ä–∞—Ç–∏–ª $${currentDealCard.cost.toLocaleString()} –Ω–∞ ${currentDealCard.name}`;
      } else if (isCharity) {
        message = `üíù ${player.name} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª $${currentDealCard.cost.toLocaleString()} –Ω–∞ ${currentDealCard.name}`;
      } else {
        message = `‚úÖ ${player.name} –∫—É–ø–∏–ª ${currentDealCard.name} –∑–∞ $${currentDealCard.cost.toLocaleString()}`;
      }
      
      setToast({
        open: true,
        message: message,
        severity: isExpense ? 'warning' : isCharity ? 'info' : 'success'
      });
      
      console.log(`‚úÖ [OriginalGameBoard] –ò–≥—Ä–æ–∫ ${player.name} ${isExpense ? '–ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞' : isCharity ? '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª –Ω–∞' : '–∫—É–ø–∏–ª'} ${currentDealCard.name}`);
    } else {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${currentDealCard.name}`,
        severity: 'error'
      });
    }
    
    setShowDealModal(false);
    setCurrentDealCard(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–¥–µ–ª–∫–∏
  const handleCancelDeal = () => {
    if (!currentDealCard) return;
    
    // –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç–±–æ–π
    setDiscardPile(prev => [...prev, currentDealCard]);
    

    
    setToast({
      open: true,
      message: `üîÑ –ö–∞—Ä—Ç–æ—á–∫–∞ ${currentDealCard.name} —É—à–ª–∞ –≤ –æ—Ç–±–æ–π (–≤—Å–µ–≥–æ –≤ –æ—Ç–±–æ–µ: ${discardPile.length + 1})`,
      severity: 'info'
    });
    
    setShowDealModal(false);
    setCurrentDealCard(null);
  };



  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É
  const handlePassCardToPlayer = () => {
    if (!currentDealCard) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
    setShowPlayerSelectionModal(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
  const handlePassCardToSpecificPlayer = (playerIndex) => {
    if (!currentDealCard) return;
    
    const currentPlayerData = players[currentPlayer];
    const targetPlayer = players[playerIndex];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫—Ç–∏–≤ —É —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const existingAssetIndex = assets.findIndex(asset => 
      asset.name === currentDealCard.name && asset.type === 'deal'
    );
    
    if (existingAssetIndex !== -1) {
      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      setAssets(prev => prev.map((asset, index) => 
        index === existingAssetIndex 
          ? { ...asset, quantity: asset.quantity + 1 }
          : asset
      ));
    } else {
      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      const newAsset = {
        id: Date.now(),
        type: 'deal',
        name: currentDealCard.name,
        icon: currentDealCard.income === 0 ? 'üíù' : currentDealCard.type === 'small' ? 'üè™' : 'üè¢',
        value: currentDealCard.cost,
        cost: currentDealCard.cost,
        income: currentDealCard.income,
        color: currentDealCard.income === 0 ? '#F59E0B' : currentDealCard.type === 'small' ? '#10B981' : '#8B5CF6',
        description: currentDealCard.description,
        receivedFrom: currentPlayerData.name, // –û—Ç –∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∞
        quantity: 1,
        isDividendStock: currentDealCard.isDividendStock || false,
        dividendYield: currentDealCard.dividendYield || 0,
        maxQuantity: currentDealCard.maxQuantity || 1
      };
      
      setAssets(prev => [...prev, newAsset]);
    }
    
    setToast({
      open: true,
      message: `üéÅ ${currentPlayerData.name} –ø–µ—Ä–µ–¥–∞–ª ${currentDealCard.name} –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`,
      severity: 'success'
    });
    
    console.log(`üéÅ [OriginalGameBoard] ${currentPlayerData.name} –ø–µ—Ä–µ–¥–∞–ª ${currentDealCard.name} –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`);
    
    setShowPlayerSelectionModal(false);
    setShowDealModal(false);
    setCurrentDealCard(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–Ω–µ–∂–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (PAYDAY)
  const getCashFlow = () => {
    const totalIncome = assets.reduce((sum, asset) => sum + (asset.income || 0), 0);
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∏–≥—Ä–æ–∫–∞
    // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const totalExpenses = 4500; // –ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Ö–æ–¥—ã $4,500
    
    // –í—ã—á–∏—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: –∑–∞ –∫–∞–∂–¥—ã–µ $1,000 –∫—Ä–µ–¥–∏—Ç–∞ - $100/–º–µ—Å
    const creditPayments = Math.floor(playerCredit / 1000) * 100;
    
    return totalIncome - totalExpenses - creditPayments;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
  const getMaxCredit = () => {
    const cashFlow = getCashFlow(); // PAYDAY (–¥–æ—Ö–æ–¥—ã - —Ä–∞—Å—Ö–æ–¥—ã)
    // –ú–∞–∫—Å–∏–º—É–º –∫—Ä–µ–¥–∏—Ç–∞ = PAYDAY * 10
    // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ PAYDAY = $1,500, —Ç–æ –º–∞–∫—Å. –∫—Ä–µ–¥–∏—Ç = $15,000
    return Math.floor(cashFlow * 10);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞
  const handleTakeCredit = (amount) => {
    const maxCredit = getMaxCredit();
    
    if (amount > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $${maxCredit.toLocaleString()}`,
        severity: 'error'
      });
      return;
    }
    
    if (amount % 1000 !== 0) {
      setToast({
        open: true,
        message: `‚ùå –ö—Ä–µ–¥–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω $1,000`,
        severity: 'error'
      });
      return;
    }
    
    setPlayerCredit(prev => prev + amount);
    setPlayerMoney(prev => prev + amount);
    
    setToast({
      open: true,
      message: `üí≥ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: $${amount.toLocaleString()}`,
      severity: 'success'
    });
    
    console.log(`üí≥ [OriginalGameBoard] –í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç: $${amount.toLocaleString()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–¥–µ–ª–∫–∏
  const handleTakeCreditFromDeal = (amount) => {
    const maxCredit = getMaxCredit();
    
    if (amount > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $${maxCredit.toLocaleString()}`,
        severity: 'error'
      });
      return;
    }
    
    if (amount % 1000 !== 0) {
      setToast({
        open: true,
        message: `‚ùå –ö—Ä–µ–¥–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω $1,000`,
        severity: 'error'
      });
      return;
    }
    
    setPlayerCredit(prev => prev + amount);
    setPlayerMoney(prev => prev + amount);
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–¥–µ–ª–∫–µ
    setShowCreditModal(false);
    
    setToast({
      open: true,
      message: `üí≥ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: $${amount.toLocaleString()}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤!`,
      severity: 'success'
    });
    
    console.log(`üí≥ [OriginalGameBoard] –í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç –∏–∑ —Å–¥–µ–ª–∫–∏: $${amount.toLocaleString()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
  const handlePayOffCredit = (amount) => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if (!amount || amount <= 0) {
      setToast({
        open: true,
        message: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–≥–∞—à–µ–Ω–∏—è',
        severity: 'error'
      });
      return;
    }
    
    if (amount > playerCredit) {
      setToast({
        open: true,
        message: `‚ùå –£ –≤–∞—Å –∫—Ä–µ–¥–∏—Ç —Ç–æ–ª—å–∫–æ $${playerCredit.toLocaleString()}`,
        severity: 'error'
      });
      return;
    }
    
    if (amount > playerMoney) {
      setToast({
        open: true,
        message: `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è`,
        severity: 'error'
      });
      return;
    }
    
    if (amount % 1000 !== 0) {
      setToast({
        open: true,
        message: `‚ùå –°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ $1,000`,
        severity: 'error'
      });
      return;
    }
    
    // –ü–æ–≥–∞—à–∞–µ–º –∫—Ä–µ–¥–∏—Ç
    setPlayerCredit(prev => prev - amount);
    setPlayerMoney(prev => prev - amount);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è
    setCustomPayoffAmount('');
    
    setToast({
      open: true,
      message: `‚úÖ –ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω: $${amount.toLocaleString()}. –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ $${Math.floor(amount / 1000) * 100}/–º–µ—Å`,
      severity: 'success'
    });
    
    console.log(`‚úÖ [OriginalGameBoard] –ü–æ–≥–∞—à–µ–Ω –∫—Ä–µ–¥–∏—Ç: $${amount.toLocaleString()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è —á–∞—Å—Ç–∏ –∫—Ä–µ–¥–∏—Ç–∞
  const handleQuickPayoff = (amount) => {
    handlePayOffCredit(amount);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–∫—Ç–∏–≤–æ–≤
  const handleSellAsset = (asset, isCurrentPlayerTurn = false) => {
    // –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å
    if (asset.income === 0 || asset.isExpense) {
      const reason = asset.isExpense ? '–∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏' : '–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
      setToast({
        open: true,
        message: `‚ùå ${asset.name} –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å - —ç—Ç–æ ${reason}`,
        severity: 'error'
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
    if (!asset.isDividendStock && !isCurrentPlayerTurn) {
      setToast({
        open: true,
        message: `‚ùå ${asset.name} –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥`,
        severity: 'error'
      });
      return;
    }
    
    // –ü—Ä–æ–¥–∞–µ–º –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–∞
    if (asset.quantity > 1) {
      // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü—ã, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      setAssets(prev => prev.map(a => 
        a.id === asset.id 
          ? { ...a, quantity: a.quantity - 1 }
          : a
      ));
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–¥–∏–Ω–∏—Ü–∞, —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤
      setAssets(prev => prev.filter(a => a.id !== asset.id));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É (–ø—Ä–æ–¥–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ)
    setPlayerMoney(prev => prev + asset.cost);
    
    const stockType = asset.isDividendStock ? '–¥–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ –∞–∫—Ü–∏–∏' : '–æ–±—ã—á–Ω—ã–µ –∞–∫—Ü–∏–∏';
    
    setToast({
      open: true,
      message: `üí∞ –ü—Ä–æ–¥–∞–Ω–æ: ${asset.name} (${stockType}) –∑–∞ $${asset.cost.toLocaleString()}`,
      severity: 'success'
    });
    
    console.log(`üí∞ [OriginalGameBoard] –ü—Ä–æ–¥–∞–Ω –∞–∫—Ç–∏–≤: ${asset.name} –∑–∞ $${asset.cost.toLocaleString()}`);
  };







  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è












  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  const handleCustomCredit = () => {
    const amount = parseInt(customCreditAmount);
    
    if (isNaN(amount) || amount <= 0) {
      setToast({
        open: true,
        message: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
        severity: 'error'
      });
      return;
    }
    
    if (amount % 1000 !== 0) {
      setToast({
        open: true,
        message: `‚ùå –ö—Ä–µ–¥–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω $1,000`,
        severity: 'error'
      });
      return;
    }
    
    const maxCredit = getMaxCredit();
    if (amount > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $${maxCredit.toLocaleString()}`,
        severity: 'error'
      });
      return;
    }
    
    if ((playerCredit + amount) > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –û–±—â–∏–π –∫—Ä–µ–¥–∏—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç`,
        severity: 'error'
      });
      return;
    }
    
    setPlayerCredit(prev => prev + amount);
    setPlayerMoney(prev => prev + amount);
    setCustomCreditAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    
    setToast({
      open: true,
      message: `üí≥ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: $${amount.toLocaleString()}`,
      severity: 'success'
    });
    
    console.log(`üí≥ [OriginalGameBoard] –í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã: $${amount.toLocaleString()}`);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–¥–µ–ª–∫–∏
  const handleCustomCreditFromDeal = () => {
    const amount = parseInt(customCreditAmount);
    
    if (isNaN(amount) || amount <= 0) {
      setToast({
        open: true,
        message: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
        severity: 'error'
      });
      return;
    }
    
    if (amount % 1000 !== 0) {
      setToast({
        open: true,
        message: `‚ùå –ö—Ä–µ–¥–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω $1,000`,
        severity: 'error'
      });
      return;
    }
    
    const maxCredit = getMaxCredit();
    if (amount > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: $${maxCredit.toLocaleString()}`,
        severity: 'error'
      });
      return;
    }
    
    if ((playerCredit + amount) > maxCredit) {
      setToast({
        open: true,
        message: `‚ùå –û–±—â–∏–π –∫—Ä–µ–¥–∏—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç`,
        severity: 'error'
      });
      return;
    }
    
    setPlayerCredit(prev => prev + amount);
    setPlayerMoney(prev => prev + amount);
    setCustomCreditAmount(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–¥–µ–ª–∫–µ
    setShowCreditModal(false);
    setCreditModalFromDeal(false);
    
    setToast({
      open: true,
      message: `üí≥ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: $${amount.toLocaleString()}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤!`,
      severity: 'success'
    });
    
    console.log(`üí≥ [OriginalGameBoard] –í–∑—è—Ç –∫—Ä–µ–¥–∏—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –∏–∑ —Å–¥–µ–ª–∫–∏: $${amount.toLocaleString()}`);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
  const handlePlayerTurn = (playerIndex) => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ gameState
    const allPlayers = getAllPlayers();
    const targetPlayer = allPlayers[playerIndex];
    
    if (!targetPlayer) {
      console.log(`üéØ [OriginalGameBoard] –ò–≥—Ä–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${playerIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    if (targetPlayer.id === currentPlayer?.id) {
      console.log(`üéØ [OriginalGameBoard] –•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${targetPlayer.name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω`);
      return;
    }
    
    console.log(`üéØ [OriginalGameBoard] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä–æ–∫–∞ ${targetPlayer.name}`);

    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    setTimerProgress(100);
    setIsTurnEnding(false);
    setCanRollDice(true);
    setDiceRolled(false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setToast({
      open: true,
      message: `üéØ –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${targetPlayer.name}`,
      severity: 'info'
    });
  };



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ö–æ–¥–∞
  const passTurn = () => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ gameState
    const allPlayers = getAllPlayers();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥
    if (hasExtraTurn) {
      setHasExtraTurn(false);
      setToast({
        open: true,
        message: `üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥! ${currentPlayer?.name} —Ö–æ–¥–∏—Ç –µ—â–µ —Ä–∞–∑!`,
        severity: 'success'
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞
      setTimerProgress(100);
      setIsTurnEnding(false);
      setCanRollDice(true);
      setDiceRolled(false);
      
      console.log(`üéØ [OriginalGameBoard] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${currentPlayer?.name}`);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const currentPlayerIndex = allPlayers.findIndex(p => p.id === currentPlayer?.id);
    const nextPlayerIndex = (currentPlayerIndex + 1) % allPlayers.length;
    const nextPlayer = allPlayers[nextPlayerIndex];
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    setTimerProgress(100);
    setIsTurnEnding(false);
    setCanRollDice(true);
    setDiceRolled(false);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setToast({
      open: true,
      message: `‚è≠Ô∏è –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${nextPlayer?.name}`,
      severity: 'info'
    });
    
    console.log(`‚è≠Ô∏è [OriginalGameBoard] –•–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –∏–≥—Ä–æ–∫—É ${nextPlayer?.name}`);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const handleTransfer = () => {
    if (!transferAmount || !selectedRecipient) {
      setToast({
        open: true,
        message: '‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å—É–º–º—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
        severity: 'error'
      });
      return;
    }

    const amount = parseFloat(transferAmount);
    if (isNaN(amount) || amount <= 0) {
      setToast({
        open: true,
        message: '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É',
        severity: 'error'
      });
      return;
    }

    if (amount > bankBalance) {
      setToast({
        open: true,
        message: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ',
        severity: 'error'
      });
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    const currentPlayerName = currentPlayer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const newTransfer = {
      id: Date.now(),
      from: currentPlayerName,
      to: selectedRecipient,
      amount: amount,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    setTransferHistory(prev => [newTransfer, ...prev]);
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    setBankBalance(prev => prev - amount);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setTransferAmount('');
    setSelectedRecipient('');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    setToast({
      open: true,
      message: `‚úÖ –ü–µ—Ä–µ–≤–æ–¥ $${amount} –∏–≥—Ä–æ–∫—É ${selectedRecipient} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      severity: 'success'
    });

    console.log(`üè¶ [OriginalGameBoard] –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${currentPlayerName} ‚Üí ${selectedRecipient} $${amount}`);
  };

  const resetTransferForm = () => {
    setTransferAmount('');
    setSelectedRecipient('');
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫—Ç–∏–≤–∞–º–∏
  const getTotalAssetsValue = () => {
    return assets.reduce((total, asset) => total + (asset.value * (asset.quantity || 1)), 0);
  };

  const getTotalAssetsIncome = () => {
    return assets.reduce((total, asset) => total + (asset.income * (asset.quantity || 1)), 0);
  };



  return (
    <Fragment>
    <Box sx={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0F172A 0%, #1E293B 50%, #334155 100%)',
      padding: isMobile ? '10px' : '20px',
      display: 'flex',
      flexDirection: isMobile ? 'column' : 'row',
      gap: isMobile ? '15px' : '30px'
    }}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <Box sx={{
        flex: 1,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        width: isMobile ? '100%' : 'auto',
        minHeight: isMobile ? 'auto' : '100vh'
      }}>
        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Box sx={{ textAlign: 'center', mb: isMobile ? 1 : 2 }}>
          <Typography variant="body2" sx={{ 
            color: '#ff4444',
            fontWeight: 'bold',
            fontFamily: 'monospace',
            fontSize: isMobile ? '0.7rem' : '0.8rem',
            mb: isMobile ? 0.5 : 1
          }}>
            üêõ DEBUG: OriginalGameBoard.js (3 —Ç–æ–ø –∞–∫—Ç–∏–≤–∞ + —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø + –ø—Ä–æ—Ñ–∏–ª–∏ + –±–∞–Ω–∫)
          </Typography>
          <Typography variant="h6" sx={{ 
            color: '#8B5CF6',
            fontWeight: 'bold',
            fontSize: isMobile ? '1rem' : '1.2rem',
            mb: isMobile ? 0.5 : 1
          }}>
            üè† –ö–æ–º–Ω–∞—Ç–∞: {roomName}
          </Typography>
        </Box>
        
        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é */}
        {isMobile && (
          <Box sx={{ 
            position: 'fixed', 
            top: '20px', 
            right: '20px', 
            zIndex: 1000 
          }}>
            <IconButton
              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
              sx={{
                background: 'rgba(139, 92, 246, 0.9)',
                color: 'white',
                '&:hover': {
                  background: 'rgba(139, 92, 246, 1)',
                }
              }}
            >
              {isMobileMenuOpen ? <Close /> : <Menu />}
            </IconButton>
          </Box>
        )}
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–±—Ä–∞–Ω - –æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–æ–≥–æ */}
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ –∏ –∫—É–±–∏–∫ */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          gap: isMobile ? 2 : 3,
          mb: isMobile ? 2 : 3,
          p: isMobile ? 1.5 : 2,
          background: 'rgba(255, 255, 255, 0.1)',
          borderRadius: isMobile ? '10px' : '15px',
          backdropFilter: 'blur(10px)'
        }}>
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: isMobile ? 1 : 2
          }}>
            <Avatar sx={{ 
              bgcolor: currentPlayer?.color,
              width: isMobile ? 35 : 40,
              height: isMobile ? 35 : 40
            }}>
              {currentPlayer?.name?.charAt(0)}
            </Avatar>
            <Box>
              <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', fontWeight: 'bold' }}>
                {currentPlayer?.name}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: isMobile ? '0.8rem' : 'inherit' }}>
                {currentPlayer?.profession?.name}
              </Typography>
              <Typography variant="body2" sx={{ color: '#F59E0B', fontSize: isMobile ? '0.7rem' : '0.8rem', fontWeight: 'bold' }}>
                üéØ –°–µ–π—á–∞—Å —Ö–æ–¥
              </Typography>
              {isOnBigCircle && (
                <Typography variant="body2" sx={{ color: '#22C55E', fontSize: isMobile ? '0.7rem' : '0.8rem', fontWeight: 'bold' }}>
                  üéØ –ë–æ–ª—å—à–æ–π –∫—Ä—É–≥
                </Typography>
              )}
              {hasExtraTurn && (
                <Typography variant="body2" sx={{ color: '#F59E0B', fontSize: isMobile ? '0.7rem' : '0.8rem', fontWeight: 'bold' }}>
                  üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥
                </Typography>
              )}
              {hasFreeCards && (
                <Typography variant="body2" sx={{ color: '#8B5CF6', fontSize: isMobile ? '0.7rem' : '0.8rem', fontWeight: 'bold' }}>
                  üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                </Typography>
              )}
            </Box>
          </Box>
          
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            gap: isMobile ? 1 : 2
          }}>
            <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white' }}>
              –ö—É–±–∏–∫: {diceValue}
            </Typography>
            <Button
              variant="contained"
              onClick={rollDice}
              disabled={isRolling || isMoving}
              sx={{
                background: isRolling || isMoving 
                  ? 'linear-gradient(45deg, #9CA3AF, #6B7280)' 
                  : 'linear-gradient(45deg, #8B5CF6, #06B6D4)',
                color: 'white',
                fontWeight: 'bold',
                px: isMobile ? 2 : 3,
                py: isMobile ? 0.8 : 1,
                borderRadius: isMobile ? '20px' : '25px',
                fontSize: isMobile ? '0.9rem' : 'inherit',
                '&:hover': {
                  background: isRolling || isMoving 
                    ? 'linear-gradient(45deg, #9CA3AF, #6B7280)' 
                    : 'linear-gradient(45deg, #7C3AED, #0891B2)'
                }
              }}
            >
              {isRolling ? '–ë—Ä–æ—Å–∞—é...' : isMoving ? '–§–∏—à–∫–∞ –¥–≤–∏–∂–µ—Ç—Å—è...' : '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫'}
            </Button>
          </Box>
        </Box>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ */}
        {isOnBigCircle && (
          <Box sx={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'space-between',
            gap: isMobile ? 2 : 3,
            mb: isMobile ? 2 : 3,
            p: isMobile ? 1.5 : 2,
            background: 'linear-gradient(135deg, rgba(34, 197, 94, 0.2), rgba(16, 185, 129, 0.2))',
            borderRadius: isMobile ? '10px' : '15px',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(34, 197, 94, 0.3)'
          }}>
            <Box>
              <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: '#22C55E', fontWeight: 'bold' }}>
                üí∞ –ë–∞–ª–∞–Ω—Å: ${bigCircleBalance.toLocaleString()}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(34, 197, 94, 0.8)', fontSize: isMobile ? '0.8rem' : 'inherit' }}>
                üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${bigCirclePassiveIncome.toLocaleString()}/—Ö–æ–¥
              </Typography>
            </Box>
            <Box>
              <Typography variant="body2" sx={{ color: 'rgba(34, 197, 94, 0.8)', fontSize: isMobile ? '0.7rem' : '0.8rem' }}>
                üè¢ –ë–∏–∑–Ω–µ—Å–æ–≤: {bigCircleBusinesses.length}
              </Typography>
              <Typography variant="body2" sx={{ color: 'rgba(34, 197, 94, 0.8)', fontSize: isMobile ? '0.7rem' : '0.8rem' }}>
                üåü –ú–µ—á—Ç: {bigCircleDreams.length}
              </Typography>
            </Box>
          </Box>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã */}
        <Box sx={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          gap: isMobile ? 2 : 3,
          mb: isMobile ? 2 : 3,
          p: isMobile ? 1.5 : 2,
          background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(37, 99, 235, 0.2))',
          borderRadius: isMobile ? '10px' : '15px',
          backdropFilter: 'blur(10px)',
          border: '1px solid rgba(59, 130, 246, 0.3)'
        }}>
          <Box>
            <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: '#3B82F6', fontWeight: 'bold' }}>
              ‚è∞ –í—Ä–µ–º—è –∏–≥—Ä—ã
            </Typography>
            <Typography variant="body2" sx={{ color: 'rgba(59, 130, 246, 0.8)', fontSize: isMobile ? '0.8rem' : 'inherit' }}>
              {(() => {
                const currentTime = Date.now();
                const timeLeft = Math.max(0, gameEndTime - currentTime);
                const hours = Math.floor(timeLeft / (1000 * 60 * 60));
                const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                return `${hours}:${minutes.toString().padStart(2, '0')}`;
              })()}
            </Typography>
          </Box>
          <Box>
            <Typography variant="body2" sx={{ color: 'rgba(59, 130, 246, 0.8)', fontSize: isMobile ? '0.7rem' : '0.8rem' }}>
              {isGameFinished ? 'üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : 'üéÆ –ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞'}
            </Typography>
          </Box>
        </Box>

        {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
        <Box sx={{
          position: 'relative',
          width: isMobile ? '100%' : '800px',
          height: isMobile ? 'auto' : '800px',
          maxWidth: isMobile ? '100vw' : '800px',
          maxHeight: isMobile ? '70vh' : '800px',
          background: 'rgba(255, 255, 255, 0.05)',
          borderRadius: isMobile ? '15px' : '30px',
          border: '1px solid rgba(255, 255, 255, 0.1)',
          backdropFilter: 'blur(20px)',
          boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
          overflow: 'hidden'
        }}
      >
        {/* PNG –ª–æ–≥–æ—Ç–∏–ø –≤ —Ü–µ–Ω—Ç—Ä–µ */}
          <Box
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              transform: 'translate(-50%, -50%)',
              width: '200px',
              height: '200px',
              zIndex: 2,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              background: 'radial-gradient(circle, rgba(255,215,0,0.1) 0%, rgba(255,165,0,0.05) 50%, transparent 100%)',
              borderRadius: '50%',
              padding: '20px'
            }}
          >
            <Box
              sx={{
                width: '160px',
                height: '160px',
                background: 'linear-gradient(135deg, #FFD700 0%, #FFA500 50%, #FF8C00 100%)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 8px 32px rgba(255, 215, 0, 0.4), 0 0 0 4px rgba(255, 215, 0, 0.2)',
                position: 'relative',
                overflow: 'hidden'
              }}
            >
              {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º */}
              <Box
                sx={{
                  width: '140px',
                  height: '140px',
                  background: 'radial-gradient(circle, #000000 0%, #1a1a1a 100%)',
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  position: 'relative'
                }}
              >
                {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞ */}
                <Typography
                  sx={{
                    fontSize: '48px',
                    fontWeight: 'bold',
                    color: '#FFD700',
                    textShadow: '0 0 20px rgba(255, 215, 0, 0.8), 0 0 40px rgba(255, 165, 0, 0.6)',
                    zIndex: 3,
                    position: 'relative'
                  }}
                >
                  $
                </Typography>
                
                {/* –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–Ω–∏–∏ */}
                <Box
                  sx={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    borderRadius: '50%',
                    background: 'conic-gradient(from 0deg, transparent 0deg, rgba(255, 215, 0, 0.3) 45deg, transparent 90deg, rgba(255, 165, 0, 0.3) 135deg, transparent 180deg, rgba(255, 140, 0, 0.3) 225deg, transparent 270deg, rgba(255, 215, 0, 0.3) 315deg, transparent 360deg)',
                    animation: 'rotate 4s linear infinite'
                  }}
                />
                
                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ—Ç—è—â–∏–µ—Å—è —Ç–æ—á–∫–∏ */}
                <Box
                  sx={{
                    position: 'absolute',
                    width: '100%',
                    height: '100%',
                    borderRadius: '50%'
                  }}
                >
                  {[0, 60, 120, 180, 240, 300].map((angle, index) => (
                    <Box
                      key={index}
                      sx={{
                        position: 'absolute',
                        width: '6px',
                        height: '6px',
                        background: '#FFD700',
                        borderRadius: '50%',
                        top: '50%',
                        left: '50%',
                        transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-50px)`,
                        boxShadow: '0 0 10px rgba(255, 215, 0, 0.8)',
                        animation: `pulse ${2 + index * 0.3}s ease-in-out infinite`
                      }}
                    />
                  ))}
                </Box>
              </Box>
              
              {/* –í–Ω–µ—à–Ω–∏–µ –º–æ–Ω–µ—Ç—ã */}
              <Box
                sx={{
                  position: 'absolute',
                  width: '100%',
                  height: '100%',
                  borderRadius: '50%'
                }}
              >
                {[45, 135, 225, 315].map((angle, index) => (
                  <Box
                    key={index}
                    sx={{
                      position: 'absolute',
                      width: '24px',
                      height: '24px',
                      background: 'radial-gradient(circle, #FFD700 0%, #FFA500 100%)',
                      borderRadius: '50%',
                      top: '50%',
                      left: '50%',
                      transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-70px)`,
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      boxShadow: '0 2px 8px rgba(255, 215, 0, 0.6)',
                      border: '2px solid #FFD700'
                    }}
                  >
                    <Typography
                      sx={{
                        fontSize: '12px',
                        fontWeight: 'bold',
                        color: '#000000'
                      }}
                    >
                      $
                    </Typography>
                  </Box>
                ))}
              </Box>
            </Box>
          </Box>

          {/* 24 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –∫—Ä—É–≥—É */}
          {originalBoard.slice(0, 24).map((cell, i) => {
            const angle = (i * 360) / 24;
            const radius = 172.5; // —Ä–∞–¥–∏—É—Å –º–∞–ª–æ–≥–æ –∫—Ä—É–≥–∞
            const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
            const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
            
            return (
              <motion.div
                key={cell.id}
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: i * 0.05, duration: 0.4 }}
              >
                <Box
                  sx={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                    width: '46px',
                    height: '46px',
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '14px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    color: 'white',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease',
                    border: '2px solid rgba(255, 255, 255, 0.3)',
                    boxShadow: '0 8px 25px rgba(0,0,0,0.3)',
                    zIndex: 1,
                    '&:hover': {
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px) scale(1.3)`,
                      boxShadow: '0 15px 35px rgba(0,0,0,0.4)',
                      zIndex: 3
                    }
                  }}
                  title={cell.description}
                >
                  <Typography variant="h6" sx={{ fontSize: '20px' }}>
                    {cell.icon}
                  </Typography>
                  <Typography
                    sx={{
                      position: 'absolute', top: '2px', left: '4px',
                      fontSize: '10px', fontWeight: 'bold', color: 'white',
                      textShadow: '0 1px 2px rgba(0,0,0,0.8)', zIndex: 2
                    }}
                  >
                    {cell.id}
                  </Typography>
                </Box>
              </motion.div>
            );
          })}

          {/* 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É 700x700 */}
          {(() => {
            const outerCells = originalBoard.slice(24);
            const cells = [];
            const outerSquareSize = 700;
            const cellSize = 40;

            // –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫)
            for (let i = 0; i < 14; i++) {
              const cell = outerCells[i];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13;
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <Box key={`top-${cell.id}`}
                  sx={{ position: 'absolute', top: '50px', left: `${x}px`, width: `${cellSize}px`, height: `${cellSize}px`,
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center',
                    color: 'white', fontSize: '14px', fontWeight: 'bold', border: '2px solid rgba(255,255,255,0.3)',
                    boxShadow: '0 6px 20px rgba(0,0,0,0.3)'
                  }}
                  title={`${cell.name} ‚Äî ${cell.description}`}
                >
                  {cell.icon}
                  <Typography sx={{ position: 'absolute', top: '2px', left: '4px', fontSize: '10px', fontWeight: 'bold', textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}>
                    {cell.id}
                  </Typography>
                </Box>
              );
            }

            // –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫)
            for (let i = 0; i < 12; i++) {
              const cell = outerCells[14 + i];
              const y = 50 + (i + 1) * (cellSize + 11);
              cells.push(
                <Box key={`right-${cell.id}`}
                  sx={{ position: 'absolute', top: `${y}px`, right: '50px', width: `${cellSize}px`, height: `${cellSize}px`,
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center',
                    color: 'white', fontSize: '14px', fontWeight: 'bold', border: '2px solid rgba(255,255,255,0.3)',
                    boxShadow: '0 6px 20px rgba(0,0,0,0.3)'
                  }}
                  title={`${cell.name} ‚Äî ${cell.description}`}
                >
                  {cell.icon}
                  <Typography sx={{ position: 'absolute', top: '2px', left: '4px', fontSize: '10px', fontWeight: 'bold', textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}>
                    {cell.id}
                  </Typography>
                </Box>
              );
            }

            // –ù–∏–∂–Ω–∏–π —Ä—è–¥ (14 –∫–ª–µ—Ç–æ–∫) ‚Äî —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
            for (let i = 0; i < 14; i++) {
              const cell = outerCells[39 - i];
              const spacing = (outerSquareSize - (14 * cellSize)) / 13;
              const x = 50 + (i * (cellSize + spacing));
              cells.push(
                <Box key={`bottom-${cell.id}`}
                  sx={{ position: 'absolute', bottom: '50px', left: `${x}px`, width: `${cellSize}px`, height: `${cellSize}px`,
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center',
                    color: 'white', fontSize: '14px', fontWeight: 'bold', border: '2px solid rgba(255,255,255,0.3)',
                    boxShadow: '0 6px 20px rgba(0,0,0,0.3)'
                  }}
                  title={`${cell.name} ‚Äî ${cell.description}`}
                >
                    {cell.icon}
                  <Typography sx={{ position: 'absolute', top: '2px', left: '4px', fontSize: '10px', fontWeight: 'bold', textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}>
                    {cell.id}
                  </Typography>
                </Box>
              );
            }

            // –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (12 –∫–ª–µ—Ç–æ–∫) ‚Äî —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
            for (let i = 0; i < 12; i++) {
              const cell = outerCells[51 - i];
              const y = 50 + (i + 1) * (cellSize + 11);
              cells.push(
                <Box key={`left-${cell.id}`}
                  sx={{ position: 'absolute', top: `${y}px`, left: '50px', width: `${cellSize}px`, height: `${cellSize}px`,
                    background: `linear-gradient(135deg, ${cell.color} 0%, ${cell.color}DD 100%)`,
                    borderRadius: '8px', display: 'flex', alignItems: 'center', justifyContent: 'center',
                    color: 'white', fontSize: '14px', fontWeight: 'bold', border: '2px solid rgba(255,255,255,0.3)',
                    boxShadow: '0 6px 20px rgba(0,0,0,0.3)'
                  }}
                  title={`${cell.name} ‚Äî ${cell.description}`}
                >
                  {cell.icon}
                  <Typography sx={{ position: 'absolute', top: '2px', left: '4px', fontSize: '10px', fontWeight: 'bold', textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}>
                    {cell.id}
                  </Typography>
                </Box>
              );
            }

            return cells;
          })()}

          {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è —Ä–∞–º–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ */}
          <Box sx={{ position: 'absolute', top: '50px', left: '50px', width: '700px', height: '700px',
            border: '2px dashed rgba(139, 92, 246, 0.6)', borderRadius: 0, pointerEvents: 'none', zIndex: 0 }}
          />

          {/* 4 —É–≥–ª–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–∂–¥—É –º–∞–ª—ã–º –∏ –±–æ–ª—å—à–∏–º –∫—Ä—É–≥–æ–º */}
          {/* –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.8 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-180px, -180px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '80px',
                height: '100px',
                background: 'linear-gradient(135deg, #00BCD4 0%, #0097A7 100%)',
                borderRadius: '16px',
                border: '2px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 8px 25px rgba(0, 188, 212, 0.4), 0 0 15px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-180px, -180px) scale(1.05)',
                  boxShadow: '0 15px 40px rgba(0, 188, 212, 0.5), 0 0 25px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '20px'
              }}>
                üí∞
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '10px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '8px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.5
              }}>
                {dealDeck.filter(card => card.type === 'big').length} –∫–∞—Ä—Ç
              </Typography>
            </Box>
          </motion.div>

          {/* –í–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 0.9 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(180px, -180px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '80px',
                height: '100px',
                background: 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)',
                borderRadius: '16px',
                border: '2px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 8px 25px rgba(59, 130, 246, 0.4), 0 0 15px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(180px, -180px) scale(1.05)',
                  boxShadow: '0 15px 40px rgba(59, 130, 246, 0.5), 0 0 25px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '20px'
              }}>
                üíº
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '10px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '8px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.5
              }}>
                {dealDeck.filter(card => card.type === 'small').length} –∫–∞—Ä—Ç
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª - –†—ã–Ω–æ–∫ */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.0 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(180px, 180px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '80px',
                height: '100px',
                background: 'linear-gradient(135deg, #00BCD4 0%, #0097A7 100%)',
                borderRadius: '16px',
                border: '2px solid #EF4444',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 8px 25px rgba(0, 188, 212, 0.4), 0 0 15px rgba(239, 68, 68, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(180px, 180px) scale(1.05)',
                  boxShadow: '0 15px 40px rgba(0, 188, 212, 0.5), 0 0 25px rgba(239, 68, 68, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '20px'
              }}>
                üè™
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '10px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†—ã–Ω–æ–∫
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '8px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.5
              }}>
                {marketDeckCount} –∫–∞—Ä—Ç
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '7px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.2
              }}>
                –û—Ç–±–æ–π: {marketDiscardCount}
              </Typography>
            </Box>
          </motion.div>

          {/* –ù–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª - –†–∞—Å—Ö–æ–¥—ã */}
          <motion.div
            initial={{ scale: 0, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.8, delay: 1.1 }}
          >
            <Box
              sx={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%) translate(-180px, 180px)', // –ü–æ–∑–∏—Ü–∏—è –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏
                width: '80px',
                height: '100px',
                background: 'linear-gradient(135deg, #E91E63 0%, #C2185B 100%)',
                borderRadius: '16px',
                border: '2px solid #E91E63',
                display: 'flex',
                flexDirection: 'column',
                alignItems: 'center',
                justifyContent: 'center',
                boxShadow: '0 8px 25px rgba(233, 30, 99, 0.4), 0 0 15px rgba(233, 30, 99, 0.3)',
                zIndex: 3,
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                '&:hover': {
                  transform: 'translate(-50%, -50%) translate(-180px, 180px) scale(1.05)',
                  boxShadow: '0 15px 40px rgba(233, 30, 99, 0.5), 0 0 25px rgba(233, 30, 99, 0.4)'
                }
              }}
            >
              <Typography variant="h4" sx={{ 
                color: 'white', 
                mb: 1,
                fontSize: '20px'
              }}>
                <CharityIcon sx={{ fontSize: '20px' }} />
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '10px',
                lineHeight: 1.2,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)'
              }}>
                –†–∞—Å—Ö–æ–¥—ã
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '8px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.5
              }}>
                {expenseDeckCount} –∫–∞—Ä—Ç
              </Typography>
              <Typography variant="caption" sx={{ 
                color: 'white', 
                fontWeight: 'bold',
                textAlign: 'center',
                fontSize: '7px',
                lineHeight: 1,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                mt: 0.2
              }}>
                –û—Ç–±–æ–π: {expenseDiscardCount}
              </Typography>
            </Box>
          </motion.div>

                    {/* –§–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ */}
          {(() => {
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
            const playersByPosition = {};
            players.forEach(player => {
              if (!playersByPosition[player.position]) {
                playersByPosition[player.position] = [];
              }
              playersByPosition[player.position].push(player);
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Ñ–∏—à–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
            const playerTokens = players.map((player, playerIndex) => {
              let cellIndex, angle, radius, x, y;
              
              if (isOnBigCircle && player.position >= 25) {
                // –§–∏—à–∫–∏ –Ω–∞ –±–æ–ª—å—à–æ–º –∫—Ä—É–≥–µ (–ø–æ–∑–∏—Ü–∏–∏ 25-76)
                cellIndex = player.position - 25; // –ü–æ–∑–∏—Ü–∏—è 25-76, –∏–Ω–¥–µ–∫—Å 0-51
                angle = (cellIndex * 360) / 52;
                radius = 300; // –†–∞–¥–∏—É—Å –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞
                x = Math.cos((angle - 90) * Math.PI / 180) * radius;
                y = Math.sin((angle - 90) * Math.PI / 180) * radius;
              } else {
                // –§–∏—à–∫–∏ –Ω–∞ –º–∞–ª–æ–º –∫—Ä—É–≥–µ (–ø–æ–∑–∏—Ü–∏–∏ 1-24)
                cellIndex = player.position - 1; // –ü–æ–∑–∏—Ü–∏—è 1-24, –∏–Ω–¥–µ–∫—Å 0-23
                angle = (cellIndex * 360) / 24;
                radius = 172.5; // –†–∞–¥–∏—É—Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫—Ä—É–≥–∞
                x = Math.cos((angle - 90) * Math.PI / 180) * radius;
                y = Math.sin((angle - 90) * Math.PI / 180) * radius;
              }
              
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏—à–∫–∏, –µ—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤
              const playersOnSameCell = playersByPosition[player.position];
              const playerIndexInCell = playersOnSameCell.indexOf(player);
              const totalPlayersOnCell = playersOnSameCell.length;
              
              // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
              let offsetX = 0;
              let offsetY = 0;
              
              if (totalPlayersOnCell > 1) {
                // –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, —Ä–∞–∑–º–µ—â–∞–µ–º –∏—Ö –ø–æ –∫—Ä—É–≥—É
                const offsetRadius = 8; // –†–∞–¥–∏—É—Å —Å–º–µ—â–µ–Ω–∏—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–ª–µ—Ç–∫–∏
                const offsetAngle = (playerIndexInCell * 360) / totalPlayersOnCell;
                offsetX = Math.cos((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
                offsetY = Math.sin((offsetAngle - 90) * Math.PI / 180) * offsetRadius;
              }
              
              return (
                <motion.div
                  key={player.id}
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ 
                    scale: movingPlayerId === player.id ? 1.1 : 1, 
                    opacity: 1,
                    x: x + offsetX,
                    y: y + offsetY
                  }}
                  transition={{ 
                    delay: 1.2 + playerIndex * 0.1, 
                    duration: 0.6,
                    x: { duration: isMoving ? 0.2 : 0.6, ease: "easeInOut" },
                    y: { duration: isMoving ? 0.2 : 0.6, ease: "easeInOut" },
                    scale: { duration: 0.3, ease: "easeInOut" }
                  }}
                  style={{
                    position: 'absolute',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    width: '32px',
                    height: '32px',
                    zIndex: 4
                  }}
                >
                  <Box
                    sx={{
                      width: '100%',
                      height: '100%',
                      background: `linear-gradient(135deg, ${player.color} 0%, ${player.color}DD 100%)`,
                      borderRadius: '50%',
                      border: movingPlayerId === player.id ? '4px solid #FFD700' : '3px solid white',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '14px',
                      fontWeight: 'bold',
                      color: 'white',
                      boxShadow: movingPlayerId === player.id 
                        ? '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' 
                        : '0 4px 15px rgba(0,0,0,0.4), 0 0 10px rgba(255,255,255,0.3)',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      animation: movingPlayerId === player.id ? 'pulse 1s infinite' : 'none',
                      '@keyframes pulse': {
                        '0%': { boxShadow: '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' },
                        '50%': { boxShadow: '0 0 30px rgba(255, 215, 0, 1), 0 4px 15px rgba(0,0,0,0.4)' },
                        '100%': { boxShadow: '0 0 20px rgba(255, 215, 0, 0.8), 0 4px 15px rgba(0,0,0,0.4)' }
                      },
                      '&:hover': {
                        transform: 'scale(1.2)',
                        boxShadow: '0 8px 25px rgba(0,0,0,0.5), 0 0 20px rgba(255,255,255,0.4)'
                      }
                    }}
                    title={`${player.username || player.name} - ${player.profession} (–ø–æ–∑–∏—Ü–∏—è: ${player.position})`}
                  >
                    {(player.username || player.name || '?').charAt(0)}
                  </Box>
                </motion.div>
              );
            });
            
            // –†–µ–Ω–¥–µ—Ä–∏–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö
            const cellCounters = Object.entries(playersByPosition).map(([position, playersOnCell]) => {
              if (playersOnCell.length > 1) {
                const cellIndex = parseInt(position) - 1;
                const angle = (cellIndex * 360) / 24;
                const radius = 172.5;
                const x = Math.cos((angle - 90) * Math.PI / 180) * radius;
                const y = Math.sin((angle - 90) * Math.PI / 180) * radius;
                
                return (
                  <Box
                    key={`counter-${position}`}
                    sx={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,
                      width: '20px',
                      height: '20px',
                      background: 'rgba(0, 0, 0, 0.8)',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      color: 'white',
                      border: '2px solid white',
                      zIndex: 5,
                      boxShadow: '0 2px 8px rgba(0,0,0,0.5)'
                    }}
                  >
                    {playersOnCell.length}
                  </Box>
                );
              }
              return null;
            });
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ —Ñ–∏—à–∫–∏, –∏ —Å—á–µ—Ç—á–∏–∫–∏
            return [...playerTokens, ...cellCounters];
          })()}

          {/* 52 –≤–Ω–µ—à–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ 700x700 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ */}
          {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä—É–≥ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ */}
                  </Box>
      </Box>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */}
      <motion.div
        initial={isMobile ? { opacity: 0, x: 300 } : { opacity: 1, x: 0 }}
        animate={isMobile ? 
          (isMobileMenuOpen ? { opacity: 1, x: 0 } : { opacity: 0, x: 300 }) : 
          { opacity: 1, x: 0 }
        }
        transition={{ duration: 0.3, ease: 'easeInOut' }}
      >
        <Box sx={{
          width: isMobile ? '100%' : '320px',
          display: 'flex',
          flexDirection: 'column',
          gap: isMobile ? '15px' : '20px',
          padding: isMobile ? '15px' : '20px',
          position: isMobile ? 'fixed' : 'static',
          top: isMobile ? '80px' : 'auto',
          right: isMobile ? '10px' : 'auto',
          left: isMobile ? '10px' : 'auto',
          bottom: isMobile ? '10px' : 'auto',
          zIndex: isMobile ? 999 : 'auto',
          background: isMobile ? 'rgba(15, 23, 42, 0.95)' : 'transparent',
          backdropFilter: isMobile ? 'blur(10px)' : 'none',
          borderRadius: isMobile ? '15px' : '0',
          border: isMobile ? '1px solid rgba(255, 255, 255, 0.1)' : 'none',
          maxHeight: isMobile ? 'calc(100vh - 100px)' : 'auto',
          overflowY: isMobile ? 'auto' : 'visible'
        }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
        <Typography variant={isMobile ? "h6" : "h5"} sx={{ 
          color: 'white', 
          textAlign: 'center',
          mb: isMobile ? 1 : 2,
          fontWeight: 'bold'
        }}>
          üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        </Typography>



        {/* 2. –ò–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–≥—Ä–æ–∫–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: isMobile ? '10px' : '15px',
            padding: isMobile ? '15px' : '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üë§ [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                openPlayerModal(players[currentPlayer]);
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: isMobile ? 1 : 2, width: '100%' }}>
                <Avatar sx={{ bgcolor: '#8B5CF6', width: isMobile ? 40 : 50, height: isMobile ? 40 : 50 }}>
                  {playerData?.username?.charAt(0) || 'M'}
                </Avatar>
                <Box sx={{ flex: 1, textAlign: 'left' }}>
                  <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', fontWeight: 'bold' }}>
                    {playerData?.username || 'MAG'}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#94A3B8', fontSize: isMobile ? '0.8rem' : 'inherit' }}>
                    üíº –ú–µ–Ω–µ–¥–∂–µ—Ä
                  </Typography>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö */}
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 1 }}>
                    <Typography variant="body2" sx={{ color: '#94A3B8', fontSize: '0.8rem' }}>
                      üë∂ {childrenCount}
                    </Typography>
                  </Box>
                  
                  {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
                  <Button
                    variant="outlined"
                    size="small"
                    onClick={(e) => {
                      e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è
                      openProfessionCard('engineer'); // –ú–µ–Ω–µ–¥–∂–µ—Ä = –∏–Ω–∂–µ–Ω–µ—Ä
                    }}
                    sx={{
                      mt: 1,
                      color: '#8B5CF6',
                      borderColor: '#8B5CF6',
                      borderRadius: '6px',
                      textTransform: 'none',
                      fontSize: '0.7rem',
                      fontWeight: '500',
                      py: 0.5,
                      px: 1.5,
                      '&:hover': {
                        backgroundColor: 'rgba(139, 92, 246, 0.1)',
                        borderColor: '#7C3AED'
                      }
                    }}
                  >
                    üìã –ö–∞—Ä—Ç–æ—á–∫–∞
                  </Button>
                </Box>
              </Box>
            </Button>
          </Box>
        </motion.div>



        {/* 3. –ë–∞–Ω–∫ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.3 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: isMobile ? '10px' : '15px',
            padding: isMobile ? '15px' : '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üè¶ [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –±–∞–Ω–∫–∞ –Ω–∞–∂–∞—Ç–∞');
                openBankModal();
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ textAlign: 'center', width: '100%' }}>
                <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', mb: isMobile ? 1 : 2, display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
                  <AccountBalance /> –ë–∞–Ω–∫
                </Typography>
                <Typography variant={isMobile ? "h5" : "h4"} sx={{ color: '#10B981', fontWeight: 'bold' }}>
                  ${bankBalance.toLocaleString()}
                </Typography>
                <Typography variant="body2" sx={{ color: '#94A3B8', mt: 1, fontSize: isMobile ? '0.8rem' : 'inherit' }}>
                  –î–æ—Ö–æ–¥: $1,200 | –†–∞—Å—Ö–æ–¥—ã: $800
                </Typography>
                
                                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö */}
                  <Box sx={{ mt: 2, pt: 2, borderTop: '1px solid rgba(255, 255, 255, 0.1)' }}>
                    <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1, fontSize: '0.8rem' }}>
                      üí≥ –ö—Ä–µ–¥–∏—Ç: ${playerCredit.toLocaleString()}
                    </Typography>
                    {playerCredit > 0 && (
                      <Typography variant="body2" sx={{ color: '#EF4444', mb: 1, fontSize: '0.7rem' }}>
                        üí∏ –ü–ª–∞—Ç–µ–∂–∏: ${Math.floor(playerCredit / 1000) * 100}/–º–µ—Å
                      </Typography>
                    )}
                    <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1, fontSize: '0.8rem' }}>
                      –ú–∞–∫—Å: ${getMaxCredit().toLocaleString()}
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1, fontSize: '0.8rem' }}>
                      PAYDAY: ${getCashFlow().toLocaleString()}/–º–µ—Å
                    </Typography>
                    
                    {/* –ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–∞ */}
                    <Box sx={{ 
                      background: 'rgba(255, 255, 255, 0.05)', 
                      borderRadius: '8px', 
                      p: 1, 
                      mb: 2,
                      border: `1px solid ${playerCredit > 0 ? '#EF4444' : '#10B981'}40`
                    }}>
                      <Typography variant="body2" sx={{ color: playerCredit > 0 ? '#EF4444' : '#10B981', fontSize: '0.7rem', textAlign: 'center', fontWeight: 'bold' }}>
                        {playerCredit > 0 ? 'üí≥ –ï—Å—Ç—å –∫—Ä–µ–¥–∏—Ç' : '‚úÖ –ë–µ–∑ –∫—Ä–µ–¥–∏—Ç–æ–≤'}
                      </Typography>
                    </Box>
                    

                  
                  {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–º */}
                  <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>
                    <Button
                      variant="contained"
                      onClick={() => setShowCreditModal(true)}
                      sx={{
                        flex: 1,
                        background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
                        color: 'white',
                        fontWeight: 'bold',
                        py: 1,
                        borderRadius: '8px',
                        fontSize: '0.7rem',
                        '&:hover': {
                          background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)',
                          transform: 'scale(1.02)'
                        },
                        transition: 'all 0.2s ease-in-out'
                      }}
                    >
                      üí≥ –í–∑—è—Ç—å
                    </Button>
                    
                    {playerCredit > 0 && (
                      <Button
                        variant="contained"
                        onClick={() => {
                          setShowCreditModal(true);
                          // –§–æ–∫—É—Å –Ω–∞ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞
                          setTimeout(() => {
                            const payoffField = document.querySelector('input[placeholder="—Å—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è"]');
                            if (payoffField) {
                              payoffField.focus();
                            }
                          }, 100);
                        }}
                        sx={{
                          flex: 1,
                          background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                          color: 'white',
                          fontWeight: 'bold',
                          py: 1,
                          borderRadius: '8px',
                          fontSize: '0.7rem',
                          '&:hover': {
                            background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                            transform: 'scale(1.02)'
                          },
                          transition: 'all 0.2s ease-in-out'
                        }}
                      >
                        üí∞ –ü–æ–≥–∞—Å–∏—Ç—å
                      </Button>
                    )}
                  </Box>
                  

                </Box>
              </Box>
            </Button>
          </Box>
        </motion.div>

        {/* 4. –ê–∫—Ç–∏–≤—ã */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: isMobile ? '10px' : '15px',
            padding: isMobile ? '15px' : '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Button
              variant="text"
              fullWidth
              onClick={() => {
                console.log('üíº [OriginalGameBoard] –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –Ω–∞–∂–∞—Ç–∞');
                openAssetsModal();
              }}
              sx={{
                p: 0,
                background: 'transparent',
                color: 'transparent',
                textTransform: 'none',
                '&:hover': {
                  background: 'rgba(255,255,255,0.05)'
                }
              }}
            >
              <Box sx={{ textAlign: 'center', width: '100%' }}>
                <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', mb: isMobile ? 1 : 2, display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
                  <Inventory /> –ê–∫—Ç–∏–≤—ã
                </Typography>
                <Typography variant={isMobile ? "h5" : "h4"} sx={{ color: '#10B981', fontWeight: 'bold', mb: isMobile ? 1 : 2 }}>
                  ${getTotalAssetsValue().toLocaleString()}
                </Typography>
                <Typography variant="body2" sx={{ color: '#94A3B8', mb: isMobile ? 1 : 2, fontSize: isMobile ? '0.8rem' : 'inherit' }}>
                  –î–æ—Ö–æ–¥: ${getTotalAssetsIncome().toLocaleString()}/–º–µ—Å
                </Typography>
                

                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –î–æ–º */}
                  {assets
                    .filter(asset => asset.type === 'house') // –¢–æ–ª—å–∫–æ –¥–æ–º
                    .map((asset) => (
                      <Chip 
                        key={asset.id}
                        label={`${asset.icon} ${asset.name}: $${asset.value.toLocaleString()}`} 
                        size="small" 
                        sx={{ 
                          background: `${asset.color}20`, 
                          color: asset.color,
                          border: `1px solid ${asset.color}40`,
                          '&:hover': {
                            background: `${asset.color}30`,
                            cursor: 'pointer'
                          }
                        }} 
                      />
                    ))}
                  
                  {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä—ã—Ç—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ */}
                  {assets.length > 1 && (
                    <Chip 
                      label={`+${assets.length - 1} –µ—â–µ...`}
                      size="small" 
                      sx={{ 
                        background: 'rgba(107, 114, 128, 0.2)', 
                        color: '#6B7280',
                        border: '1px solid rgba(107, 114, 128, 0.4)',
                        fontStyle: 'italic',
                        '&:hover': {
                          background: 'rgba(107, 114, 128, 0.3)',
                          cursor: 'pointer'
                        }
                      }} 
                    />
                  )}
                </Box>
              </Box>
            </Button>
          </Box>
        </motion.div>

        {/* 5. –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.5 }}
        >
          <Button
            variant="contained"
            onClick={canRollDice ? rollDice : passTurn}
            disabled={isRolling}
            sx={{
              width: '100%',
              height: '80px',
              background: canRollDice 
                ? 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)'
                : 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              borderRadius: '15px',
              fontSize: '18px',
              fontWeight: 'bold',
              boxShadow: canRollDice 
                ? '0 8px 25px rgba(139, 92, 246, 0.3)'
                : '0 8px 25px rgba(16, 185, 129, 0.3)',
              '&:hover': {
                background: canRollDice 
                  ? 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
                  : 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                boxShadow: canRollDice 
                  ? '0 12px 35px rgba(139, 92, 246, 0.4)'
                  : '0 12px 35px rgba(16, 185, 129, 0.4)'
              },
              '&:disabled': {
                background: canRollDice 
                  ? 'rgba(139, 92, 246, 0.5)'
                  : 'rgba(16, 185, 129, 0.5)'
              }
            }}
          >
            {isRolling ? (
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 0.5, repeat: Infinity, ease: "linear" }}
              >
                üé≤
              </motion.div>
            ) : canRollDice ? (
              <>
                üé≤ –ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö
                <br />
                <Typography variant="h4" sx={{ mt: 1 }}>
                  {diceValue}
                </Typography>
              </>
            ) : (
              <>
                ‚è≠Ô∏è –ü–ï–†–ï–•–û–î –•–û–î–ê
                <br />
                <Typography variant="caption" sx={{ opacity: 0.8 }}>
                  –ö—É–±–∏–∫ —É–∂–µ –±—Ä–æ—à–µ–Ω
                </Typography>
              </>
            )}
          </Button>
        </motion.div>

        {/* 6. –®–∫–∞–ª–∞ —Ç–∞–π–º–∏–Ω–≥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: isMobile ? '10px' : '15px',
            padding: isMobile ? '15px' : '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)'
          }}>
            <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', mb: isMobile ? 1 : 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Timer /> –í—Ä–µ–º—è —Ö–æ–¥–∞ {currentPlayer && `‚Ä¢ ${getPlayerName(currentPlayer)}`}
            </Typography>
            <LinearProgress 
              variant="determinate" 
              value={timerProgress} 
              sx={{
                height: 12,
                borderRadius: 6,
                background: 'rgba(255, 255, 255, 0.1)',
                '& .MuiLinearProgress-bar': {
                  background: turnTimeLeft > 60 
                    ? 'linear-gradient(90deg, #10B981 0%, #10B981 100%)' // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–µ—Ä–≤–æ–π –º–∏–Ω—É—Ç—ã
                    : turnTimeLeft > 20 
                    ? 'linear-gradient(90deg, #F59E0B 0%, #F59E0B 100%)' // –ñ–µ–ª—Ç—ã–π –¥–ª—è –≤—Ç–æ—Ä–æ–π –º–∏–Ω—É—Ç—ã
                    : 'linear-gradient(90deg, #EF4444 0%, #EF4444 100%)', // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Å–µ–∫—É–Ω–¥
                  borderRadius: 6,
                  transition: 'all 0.3s ease',
                  animation: isTurnEnding ? 'pulse 1s infinite' : 'none'
                }
              }}
            />
            <Typography variant="body2" sx={{ 
              color: turnTimeLeft > 60 ? '#10B981' : turnTimeLeft > 20 ? '#F59E0B' : '#EF4444', 
              mt: isMobile ? 0.5 : 1, 
              textAlign: 'center',
              fontWeight: 'bold',
              fontSize: isMobile ? '0.7rem' : 'inherit',
              animation: isTurnEnding ? 'shake 0.5s infinite' : 'none'
            }}>
              {Math.floor(turnTimeLeft / 60)}:{(turnTimeLeft % 60).toString().padStart(2, '0')} ‚Ä¢ {turnTimeLeft > 60 ? 'üü¢' : turnTimeLeft > 20 ? 'üü°' : 'üî¥'} {turnTimeLeft > 60 ? '–ü–µ—Ä–≤–∞—è –º–∏–Ω—É—Ç–∞' : turnTimeLeft > 20 ? '–í—Ç–æ—Ä–∞—è –º–∏–Ω—É—Ç–∞' : '–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–†–ï–ú–Ø!'}
            </Typography>
            
            {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ö–æ–¥–∞ */}
            <Button
              variant="contained"
              onClick={() => {
                console.log('üéØ [OriginalGameBoard] –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ –∑–∞–ø—Ä–æ—à–µ–Ω');
                socket.emit('endTurn', { roomId });
              }}
              disabled={!isMyTurn}
              sx={{
                mt: isMobile ? 1 : 2,
                background: isMyTurn 
                  ? 'linear-gradient(45deg, #10B981, #059669)' 
                  : 'linear-gradient(45deg, #6B7280, #4B5563)',
                color: 'white',
                fontWeight: 'bold',
                px: isMobile ? 2 : 3,
                py: isMobile ? 0.8 : 1,
                borderRadius: isMobile ? '20px' : '25px',
                fontSize: isMobile ? '0.9rem' : 'inherit',
                textTransform: 'uppercase',
                '&:hover': {
                  background: isMyTurn 
                    ? 'linear-gradient(45deg, #059669, #047857)' 
                    : 'linear-gradient(45deg, #6B7280, #4B5563)'
                }
              }}
            >
              ‚è≠Ô∏è –ü–ï–†–ï–•–û–î –•–û–î–ê
            </Button>
          </Box>
        </motion.div>

        {/* –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤–Ω–∏–∑ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.7 }}
        >
          <Box sx={{
            background: 'rgba(255, 255, 255, 0.1)',
            borderRadius: isMobile ? '10px' : '15px',
            padding: isMobile ? '15px' : '20px',
            border: '1px solid rgba(255, 255, 255, 0.2)',
            mb: isMobile ? 1 : 2
          }}>
            <Typography variant={isMobile ? "body1" : "h6"} sx={{ color: 'white', mb: isMobile ? 1 : 2, display: 'flex', alignItems: 'center', gap: 1 }}>
              <Group /> –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>
              <Button
                variant="outlined"
                size="small"
                onClick={() => {
                  console.log('üéÆ [OriginalGameBoard] –¢–µ–∫—É—â–∏–π gameState:', gameState);
                  console.log('üéÆ [OriginalGameBoard] –í—Å–µ –∏–≥—Ä–æ–∫–∏:', getAllPlayers());
                }}
                sx={{
                  color: 'rgba(255, 255, 255, 0.7)',
                  borderColor: 'rgba(255, 255, 255, 0.3)',
                  fontSize: '0.7rem'
                }}
              >
                üîç –û—Ç–ª–∞–¥–∫–∞
              </Button>
              <Button
                variant="outlined"
                size="small"
                onClick={() => {
                  const testPlayer = {
                    id: `test_${Date.now()}`,
                    name: `–¢–µ—Å—Ç_${Math.floor(Math.random() * 1000)}`,
                    profession: { name: '–¢–µ—Å—Ç–µ—Ä' },
                    color: '#FF6B6B'
                  };
                  console.log('üéÆ [OriginalGameBoard] –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', testPlayer);
                  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
                }}
                sx={{
                  color: 'rgba(255, 255, 255, 0.7)',
                  borderColor: 'rgba(255, 255, 255, 0.3)',
                  fontSize: '0.7rem'
                }}
              >
                ‚ûï –¢–µ—Å—Ç
              </Button>
              <Button
                variant="outlined"
                size="small"
                onClick={() => {
                  console.log('üîç [OriginalGameBoard] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã:', roomId);
                  console.log('üîç [OriginalGameBoard] Socket —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', socket.connected, socket.id);
                  socket.emit('checkRoomStatus', roomId);
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
                  setTimeout(() => {
                    console.log('üîç [OriginalGameBoard] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Ç–∞–π–º–∞—É—Ç 3 —Å–µ–∫)');
                  }, 3000);
                }}
                sx={{
                  color: 'rgba(255, 255, 255, 0.7)',
                  borderColor: 'rgba(255, 255, 255, 0.3)',
                  fontSize: '0.7rem'
                }}
              >
                üè† {roomName}
              </Button>
            </Box>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
              {(() => {
                const allPlayers = getAllPlayers();
                console.log('üéÆ [OriginalGameBoard] –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ:', allPlayers);
                console.log('üéÆ [OriginalGameBoard] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:', allPlayers.length);
                console.log('üéÆ [OriginalGameBoard] gameState.players:', gameState.players);
                
                if (allPlayers.length === 0) {
                  return (
                    <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.6)', textAlign: 'center', py: 2 }}>
                      –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... (Debug: getAllPlayers() –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤)
                    </Typography>
                  );
                }
                
                return allPlayers.map((player, index) => (
                  <Box
                    key={player.id}
                    onClick={() => handlePlayerTurn(index)}
                    sx={{
                      p: isMobile ? 0.5 : 1,
                      background: currentPlayer?.id === player.id ? '#8B5CF6' : 'transparent',
                      color: 'white',
                      borderRadius: isMobile ? '6px' : '8px',
                      fontSize: isMobile ? '0.8rem' : '0.9rem',
                      fontWeight: 'bold',
                      border: currentPlayer?.id === player.id ? 'none' : '1px solid rgba(255,255,255,0.3)',
                      cursor: 'pointer',
                      '&:hover': {
                        background: currentPlayer?.id === player.id ? '#7C3AED' : 'rgba(255,255,255,0.1)'
                      }
                    }}
                  >
                    {index + 1}. {player.username || player.name || '–ò–≥—Ä–æ–∫'} {currentPlayer?.id === player.id ? '(–•–æ–¥)' : ''}
                  </Box>
                ));
              })()}
            </Box>
            

          </Box>
        </motion.div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ */}
        <motion.div
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
        >
          <Button
            variant="contained"
            startIcon={<ExitToApp />}
            onClick={onExit}
            sx={{
              width: '100%',
              height: isMobile ? '45px' : '50px',
              background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
              color: 'white',
              borderRadius: isMobile ? '10px' : '15px',
              fontSize: isMobile ? '14px' : '16px',
              fontWeight: 'bold',
              boxShadow: '0 8px 25px rgba(239, 68, 68, 0.3)',
              '&:hover': {
                background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)',
                boxShadow: '0 12px 35px rgba(239, 68, 68, 0.4)'
              }
            }}
          >
            üö™ –í–´–•–û–î
          </Button>
        </motion.div>
      </Box>
        </motion.div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ */}
      <Dialog
        open={showPlayerModal}
        onClose={closeModals}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          {selectedPlayer && (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              
              {/* –ê–≤–∞—Ç–∞—Ä –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Box sx={{
                background: 'rgba(139, 92, 246, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(139, 92, 246, 0.3)',
                textAlign: 'center'
              }}>
                <Avatar sx={{ 
                  bgcolor: '#8B5CF6', 
                  width: 80, 
                  height: 80, 
                  fontSize: '2rem',
                  mx: 'auto',
                  mb: 2
                }}>
                  {(selectedPlayer.username || selectedPlayer.name)?.charAt(0) || '?'}
                </Avatar>
                <Typography variant="h4" sx={{ color: 'white', fontWeight: 'bold', mb: 1 }}>
                  {selectedPlayer.username || selectedPlayer.name || '–ò–≥—Ä–æ–∫'}
                </Typography>
                <Typography variant="h6" sx={{ color: '#94A3B8', mb: 2 }}>
                  {selectedPlayer.profession}
                </Typography>
                
                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
                <Button
                  variant="outlined"
                  size="small"
                  onClick={() => {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    let professionId = 'engineer'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if (selectedPlayer.profession?.includes('–£—á–∏—Ç–µ–ª—å')) professionId = 'teacher';
                    else if (selectedPlayer.profession?.includes('–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π')) professionId = 'police';
                    else if (selectedPlayer.profession?.includes('–î–≤–æ—Ä–Ω–∏–∫')) professionId = 'janitor';
                    else if (selectedPlayer.profession?.includes('–ò–Ω–∂–µ–Ω–µ—Ä')) professionId = 'engineer';
                    else if (selectedPlayer.profession?.includes('–í—Ä–∞—á')) professionId = 'doctor';
                    
                    openProfessionCard(professionId);
                  }}
                  sx={{
                    color: '#8B5CF6',
                    borderColor: '#8B5CF6',
                    borderRadius: '8px',
                    textTransform: 'none',
                    fontSize: '0.8rem',
                    fontWeight: '500',
                    '&:hover': {
                      backgroundColor: 'rgba(139, 92, 246, 0.1)',
                      borderColor: '#7C3AED'
                    }
                  }}
                >
                  üìã –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
                </Button>
                
                {/* –°—Ç–∞—Ç—É—Å —Ö–æ–¥–∞ */}
                <Box sx={{
                                      background: currentPlayer === players.findIndex(p => (p.username || p.name) === (selectedPlayer.username || selectedPlayer.name)) 
                    ? 'rgba(16, 185, 129, 0.2)' 
                    : 'rgba(107, 114, 128, 0.2)',
                  borderRadius: '10px',
                  padding: '8px 16px',
                  display: 'inline-block'
                }}>
                  <Typography variant="body2" sx={{ 
                    color: currentPlayer === players.findIndex(p => (p.username || p.name) === (selectedPlayer.username || selectedPlayer.name)) 
                      ? '#10B981' 
                      : '#6B7280',
                    fontWeight: 'bold'
                  }}>
                    {currentPlayer === players.findIndex(p => (p.username || p.name) === (selectedPlayer.username || selectedPlayer.name)) 
                      ? 'üéØ –ê–∫—Ç–∏–≤–Ω—ã–π —Ö–æ–¥' 
                      : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞'}
                  </Typography>
                </Box>
              </Box>

              {/* –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <Box sx={{
                background: 'rgba(16, 185, 129, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(16, 185, 129, 0.3)'
              }}>
                <Typography variant="h6" sx={{ color: '#10B981', mb: 2, textAlign: 'center' }}>
                  üìä –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                </Typography>
                
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>–ü–æ–∑–∏—Ü–∏—è –Ω–∞ –ø–æ–ª–µ:</Typography>
                    <Typography sx={{ color: '#10B981', fontWeight: 'bold' }}>
                      –ö–ª–µ—Ç–∫–∞ {selectedPlayer.position}
                    </Typography>
                  </Box>
                  
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>–¶–≤–µ—Ç —Ñ–∏—à–∫–∏:</Typography>
                    <Box sx={{ 
                      width: 20, 
                      height: 20, 
                      borderRadius: '50%', 
                      background: selectedPlayer.color,
                      border: '2px solid rgba(255, 255, 255, 0.3)'
                    }} />
                  </Box>
                  
                  <Box sx={{ 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center',
                    padding: '12px',
                    background: 'rgba(255, 255, 255, 0.05)',
                    borderRadius: '8px'
                  }}>
                    <Typography sx={{ color: 'white' }}>ID –∏–≥—Ä–æ–∫–∞:</Typography>
                    <Typography sx={{ color: '#94A3B8', fontWeight: 'bold' }}>
                      #{selectedPlayer.id}
                    </Typography>
                  </Box>
                </Box>
              </Box>

              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <Box sx={{
                background: 'rgba(59, 130, 246, 0.1)',
                borderRadius: '15px',
                padding: '20px',
                border: '1px solid rgba(59, 130, 246, 0.3)'
              }}>
                <Typography variant="h6" sx={{ color: '#3B82F6', mb: 2, textAlign: 'center' }}>
                  ‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                </Typography>
                
                <Typography variant="body2" sx={{ color: '#94A3B8', textAlign: 'center', lineHeight: 1.6 }}>
                  –ò–≥—Ä–æ–∫ {selectedPlayer.username || selectedPlayer.name || '–ò–≥—Ä–æ–∫'} —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∏–≥—Ä–µ "Energy of Money". 
                  {selectedPlayer.profession && ` –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${selectedPlayer.profession}.`}
                                      {currentPlayer === players.findIndex(p => (p.username || p.name) === (selectedPlayer.username || selectedPlayer.name)) 
                    ? ' –°–µ–π—á–∞—Å –µ–≥–æ —Ö–æ–¥!' 
                    : ' –û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏.'}
                </Typography>
              </Box>
            </Box>
          )}
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–æ–≤ */}
      <Dialog
        open={showAssetsModal}
        onClose={closeModals}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å –∞–∫—Ç–∏–≤–æ–≤
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            
            {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Box sx={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(16, 185, 129, 0.3)',
              textAlign: 'center'
            }}>
              <Typography variant="h5" sx={{ color: '#10B981', mb: 2, fontWeight: 'bold' }}>
                üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤
              </Typography>
              <Typography variant="h3" sx={{ color: '#10B981', fontWeight: 'bold', mb: 1 }}>
                ${getTotalAssetsValue().toLocaleString()}
              </Typography>
              <Typography variant="h6" sx={{ color: '#94A3B8' }}>
                üìà –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: ${getTotalAssetsIncome().toLocaleString()}/–º–µ—Å
              </Typography>
            </Box>

            {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ */}
            <Box sx={{
              background: 'rgba(139, 92, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(139, 92, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#8B5CF6', mb: 3, textAlign: 'center' }}>
                üéØ –î–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–æ–≤
              </Typography>
              
              <Box sx={{ display: 'grid', gap: 2 }}>
                {assets.map((asset) => (
                  <Box
                    key={asset.id}
                    sx={{
                      background: 'rgba(255, 255, 255, 0.05)',
                      borderRadius: '15px',
                      padding: '20px',
                      border: `1px solid ${asset.color}40`,
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        background: 'rgba(255, 255, 255, 0.08)',
                        transform: 'translateY(-2px)',
                        boxShadow: `0 8px 25px ${asset.color}30`
                      }
                    }}
                  >
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
                      <Box sx={{
                        fontSize: '2rem',
                        width: 50,
                        height: 50,
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        background: `${asset.color}20`,
                        borderRadius: '12px',
                        border: `2px solid ${asset.color}40`
                      }}>
                        {asset.icon}
                      </Box>
                      <Box sx={{ flex: 1 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 0.5 }}>
                          <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                            {asset.name}
                          </Typography>
                          {asset.quantity > 1 && (
                            <Chip 
                              label={`x${asset.quantity}`}
                              size="small"
                              sx={{
                                backgroundColor: asset.color,
                                color: 'white',
                                fontWeight: 'bold',
                                fontSize: '0.8rem'
                              }}
                            />
                          )}
                        </Box>
                        <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                          {asset.description}
                        </Typography>
                        {asset.isDividendStock && (
                          <Chip 
                            label="üíé –î–∏–≤–∏–¥–µ–Ω–¥–Ω—ã–µ"
                            size="small"
                            sx={{
                              backgroundColor: '#10B981',
                              color: 'white',
                              fontWeight: 'bold',
                              fontSize: '0.7rem',
                              mt: 0.5
                            }}
                          />
                        )}
                      </Box>
                    </Box>
                    
                    <Box sx={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 2 }}>
                      <Box sx={{
                        background: 'rgba(16, 185, 129, 0.1)',
                        borderRadius: '8px',
                        padding: '12px',
                        textAlign: 'center',
                        border: '1px solid rgba(16, 185, 129, 0.3)'
                      }}>
                        <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                          üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å
                        </Typography>
                        <Typography variant="h6" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                          ${asset.value.toLocaleString()}
                        </Typography>
                      </Box>
                      
                      <Box sx={{
                        background: 'rgba(59, 130, 246, 0.1)',
                        borderRadius: '8px',
                        padding: '12px',
                        textAlign: 'center',
                        border: '1px solid rgba(59, 130, 246, 0.3)'
                      }}>
                        <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                          {asset.isExpense ? 'üîß –†–∞—Å—Ö–æ–¥—ã' : asset.income === 0 ? 'üíù –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' : asset.isDividendStock ? 'üíé –î–∏–≤–∏–¥–µ–Ω–¥—ã/–º–µ—Å' : 'üìà –î–æ—Ö–æ–¥/–º–µ—Å'}
                        </Typography>
                        <Typography variant="h6" sx={{ color: asset.isExpense ? '#EF4444' : asset.income === 0 ? '#F59E0B' : '#3B82F6', fontWeight: 'bold' }}>
                          {asset.isExpense ? '–¢–æ–ª—å–∫–æ —Ç—Ä–∞—Ç—ã' : asset.income === 0 ? '–ë–µ–∑ –¥–æ—Ö–æ–¥–∞' : `$${(asset.isDividendStock ? asset.dividendYield : asset.income).toLocaleString()}`}
                        </Typography>
                      </Box>
                    </Box>
                    
                    <Box sx={{
                      background: 'rgba(139, 92, 246, 0.1)',
                      borderRadius: '8px',
                      padding: '12px',
                      mt: 2,
                      textAlign: 'center',
                      border: '1px solid rgba(139, 92, 246, 0.3)'
                    }}>
                      <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                        üéØ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
                      </Typography>
                      <Typography variant="h6" sx={{ color: '#8B5CF6', fontWeight: 'bold' }}>
                        ${asset.cost.toLocaleString()}
                      </Typography>
                    </Box>
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–∫—Ç–∏–≤–æ–º */}
                    <Box sx={{ mt: 2, display: 'flex', gap: 1, justifyContent: 'center' }}>
                      <Button
                        variant="outlined"
                        onClick={() => handleTransferAsset(asset)}
                        sx={{
                          borderColor: '#EF4444',
                          color: '#EF4444',
                          '&:hover': {
                            borderColor: '#DC2626',
                            backgroundColor: 'rgba(239, 68, 68, 0.1)'
                          }
                        }}
                      >
                        üîÑ –ø–µ—Ä–µ–¥–∞—Ç—å
                      </Button>
                      
                      <Button
                        variant="outlined"
                        onClick={() => handleSellAsset(asset, true)}
                        disabled={asset.income === 0 || asset.isExpense || (!asset.isDividendStock && false)}
                        sx={{
                          borderColor: asset.isExpense ? '#EF4444' : asset.income === 0 ? '#6B7280' : asset.isDividendStock ? '#10B981' : '#F59E0B',
                          color: asset.isExpense ? '#EF4444' : asset.income === 0 ? '#6B7280' : asset.isDividendStock ? '#10B981' : '#F59E0B',
                          '&:hover': {
                            borderColor: asset.isExpense ? '#DC2626' : asset.income === 0 ? '#6B7280' : asset.isDividendStock ? '#059669' : '#D97706',
                            backgroundColor: asset.isExpense ? 'rgba(239, 68, 68, 0.1)' : asset.income === 0 ? 'rgba(107, 114, 128, 0.1)' : asset.isDividendStock ? 'rgba(16, 185, 129, 0.1)' : 'rgba(245, 158, 11, 0.1)'
                          },
                          '&:disabled': {
                            borderColor: '#6B7280',
                            color: '#6B7280'
                          }
                        }}
                        title={asset.isExpense ? '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ - –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å' : asset.income === 0 ? '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å' : asset.isDividendStock ? '–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è' : '–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ–π —Ö–æ–¥'}
                      >
                        üí∞ –ø—Ä–æ–¥–∞—Ç—å
                      </Button>
                    </Box>
                  </Box>
                ))}
              </Box>
            </Box>
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫—Ç–∏–≤–æ–≤ */}
      <Dialog
        open={showAssetTransferModal}
        onClose={() => setShowAssetTransferModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '2px solid #6B7280',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid #6B7280',
          pb: 2
        }}>
          üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –∞–∫—Ç–∏–≤
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          {selectedAssetForTransfer && (
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ color: 'white', mb: 2 }}>
                {selectedAssetForTransfer.icon} {selectedAssetForTransfer.name}
              </Typography>
              <Typography variant="body2" sx={{ color: '#94A3B8', mb: 3 }}>
                –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤:
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                {players.map((player, index) => (
                  index !== currentPlayer && (
                    <Button
                      key={player.id}
                      onClick={() => handleTransferAssetToPlayer(index)}
                      sx={{
                        background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                        color: 'white',
                        py: 2,
                        borderRadius: '15px',
                        fontSize: '16px',
                        fontWeight: 'bold',
                        '&:hover': {
                          background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)',
                          transform: 'scale(1.02)'
                        },
                        transition: 'all 0.2s ease-in-out'
                      }}
                    >
                      üéØ {player.username || player.name || '–ò–≥—Ä–æ–∫'}
                    </Button>
                  )
                ))}
              </Box>
            </Box>
          )}
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #6B7280',
          justifyContent: 'center'
        }}>
          <Button
            onClick={() => setShowAssetTransferModal(false)}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–∞–Ω–∫–∞ */}
      <Dialog
        open={showBankModal}
        onClose={closeModals}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2
        }}>
          üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
            
            {/* 1. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å */}
            <Box sx={{
              background: 'rgba(16, 185, 129, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(16, 185, 129, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#10B981', mb: 1, textAlign: 'center' }}>
                üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
              </Typography>
              <Typography variant="h3" sx={{ color: '#10B981', fontWeight: 'bold', textAlign: 'center' }}>
                ${bankBalance.toLocaleString()}
              </Typography>
            </Box>

            {/* 2. –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ */}
            <Box sx={{
              background: 'rgba(139, 92, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(139, 92, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#8B5CF6', mb: 2, textAlign: 'center' }}>
                üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
              </Typography>
              
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                {/* –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è */}
                <FormControl fullWidth>
                  <InputLabel sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                    –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                  </InputLabel>
                  <Select
                    value={selectedRecipient}
                    onChange={(e) => setSelectedRecipient(e.target.value)}
                    sx={{
                      color: 'white',
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255, 255, 255, 0.3)'
                      },
                      '&:hover .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'rgba(255, 255, 255, 0.5)'
                      },
                      '& .MuiSvgIcon-root': {
                        color: 'rgba(255, 255, 255, 0.7)'
                      }
                    }}
                  >
                    {players.map((player, index) => (
                                          <MenuItem key={index} value={player.username || player.name} disabled={index === currentPlayer}>
                      {player.username || player.name || '–ò–≥—Ä–æ–∫'} {index === currentPlayer ? '(–í—ã)' : ''}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>

                {/* –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ */}
                <TextField
                  fullWidth
                  label="–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ ($)"
                  type="number"
                  value={transferAmount}
                  onChange={(e) => setTransferAmount(e.target.value)}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      color: 'white',
                      '& fieldset': {
                        borderColor: 'rgba(255, 255, 255, 0.3)'
                      },
                      '&:hover fieldset': {
                        borderColor: 'rgba(255, 255, 255, 0.5)'
                      },
                      '& .MuiInputLabel-root': {
                        color: 'rgba(255, 255, 255, 0.7)'
                      }
                    }
                  }}
                />

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>
                  <Button
                    variant="contained"
                    onClick={handleTransfer}
                    disabled={!transferAmount || !selectedRecipient}
                    sx={{
                      flex: 1,
                      background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                      color: 'white',
                      '&:hover': {
                        background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
                      },
                      '&:disabled': {
                        background: 'rgba(139, 92, 246, 0.5)'
                      }
                    }}
                  >
                    üí∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={resetTransferForm}
                    sx={{
                      borderColor: 'rgba(255, 255, 255, 0.3)',
                      color: 'rgba(255, 255, 255, 0.7)',
                      '&:hover': {
                        borderColor: 'rgba(255, 255, 255, 0.5)',
                        background: 'rgba(255, 255, 255, 0.05)'
                      }
                    }}
                  >
                    üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                  </Button>
                </Box>
              </Box>
            </Box>

            {/* 3. –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ */}
            <Box sx={{
              background: 'rgba(59, 130, 246, 0.1)',
              borderRadius: '15px',
              padding: '20px',
              border: '1px solid rgba(59, 130, 246, 0.3)'
            }}>
              <Typography variant="h6" sx={{ color: '#3B82F6', mb: 2, textAlign: 'center' }}>
                üìã –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
              </Typography>
              
              <List sx={{ maxHeight: '200px', overflow: 'auto' }}>
                {transferHistory.map((transfer, index) => (
                  <React.Fragment key={transfer.id}>
                    <ListItem sx={{ 
                      background: 'rgba(255, 255, 255, 0.05)',
                      borderRadius: '8px',
                      mb: 1
                    }}>
                      <ListItemText
                        primary={
                          <Typography sx={{ color: 'white', fontWeight: 'bold' }}>
                            {transfer.from} ‚Üí {transfer.to}
                          </Typography>
                        }
                        secondary={
                          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <Typography sx={{ color: '#10B981', fontWeight: 'bold' }}>
                              ${transfer.amount.toLocaleString()}
                            </Typography>
                            <Typography sx={{ color: 'rgba(255, 255, 255, 0.6)', fontSize: '0.8rem' }}>
                              {transfer.date} {transfer.time}
                            </Typography>
                          </Box>
                        }
                      />
                    </ListItem>
                    {index < transferHistory.length - 1 && <Divider sx={{ background: 'rgba(255, 255, 255, 0.1)' }} />}
                  </React.Fragment>
                ))}
              </List>
            </Box>
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.1)',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeModals}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚úã –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* Toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={toast.open}
        autoHideDuration={3000}
        onClose={() => setToast({ ...toast, open: false })}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert 
          onClose={() => setToast({ ...toast, open: false })} 
          severity={toast.severity}
          sx={{ width: '100%' }}
        >
          {toast.message}
        </Alert>
      </Snackbar>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ */}
      <Dialog
        open={showChildModal}
        onClose={() => setShowChildModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%)',
            borderRadius: '20px',
            border: '2px solid #F59E0B',
            boxShadow: '0 25px 50px rgba(245, 158, 11, 0.3)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: '#92400E', 
          textAlign: 'center',
          borderBottom: '1px solid #F59E0B',
          pb: 2
        }}>
          üë∂ –ö–ª–µ—Ç–∫–∞ "–†–µ–±–µ–Ω–æ–∫"
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: '#92400E', mb: 2 }}>
            {players[currentPlayer]?.name}, –≤—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É "–†–µ–±–µ–Ω–æ–∫"!
          </Typography>
          <Typography variant="body1" sx={{ color: '#92400E', mb: 3 }}>
            –ë—Ä–æ—Å—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—É–±–∏–∫, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Ä–æ–¥–∏–ª—Å—è –ª–∏ —Ä–µ–±–µ–Ω–æ–∫:
          </Typography>
          <Typography variant="body2" sx={{ color: '#92400E', mb: 3 }}>
            üé≤ 1-4: –†–µ–±–µ–Ω–æ–∫ —Ä–æ–¥–∏–ª—Å—è! +$5,000 –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            <br />
            üé≤ 5-6: –†–µ–±–µ–Ω–æ–∫ –Ω–µ —Ä–æ–¥–∏–ª—Å—è
          </Typography>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #F59E0B',
          justifyContent: 'center'
        }}>
          <Button
            onClick={handleChildBirth}
            sx={{
              background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
              }
            }}
          >
            üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <Dialog
        open={showCharityModal}
        onClose={() => setShowCharityModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%)',
            borderRadius: '20px',
            border: '2px solid #F59E0B',
            boxShadow: '0 25px 50px rgba(245, 158, 11, 0.3)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: '#92400E', 
          textAlign: 'center',
          borderBottom: '1px solid #F59E0B',
          pb: 2
        }}>
          ‚ù§Ô∏è –ö–ª–µ—Ç–∫–∞ "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: '#92400E', mb: 2 }}>
            {players[currentPlayer]?.name}, –≤—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫—É "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"!
          </Typography>
          <Typography variant="body1" sx={{ color: '#92400E', mb: 3 }}>
            –°—Ç–æ–∏–º–æ—Å—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: <strong>${charityCost.toLocaleString()}</strong>
          </Typography>
          <Typography variant="body2" sx={{ color: '#92400E', mb: 3 }}>
            {isOnBigCircle ? (
              <>
                üíù –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ –¥–µ–Ω—å–≥–∏, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∞—Ç—å 1, 2 –∏–ª–∏ 3 –∫—É–±–∏–∫–∞ –Ω–∞ –≤—ã–±–æ—Ä!
                <br />
                üé≤ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∫—É–±–∏–∫—É, –ø–æ —Å—É–º–º–µ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ –∏–ª–∏ –ø–æ —Å—É–º–º–µ —Ç—Ä–µ—Ö –∫—É–±–∏–∫–æ–≤
                <br />
                <strong>–ë–æ–Ω—É—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã!</strong>
              </>
            ) : (
              <>
                üíù –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ –¥–µ–Ω—å–≥–∏, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∞—Ç—å 2 –∫—É–±–∏–∫–∞ –∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ö–æ–¥!
                <br />
                üé≤ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É –∫—É–±–∏–∫—É –∏–ª–∏ –ø–æ —Å—É–º–º–µ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤
              </>
            )}
          </Typography>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #F59E0B',
          justifyContent: 'center',
          gap: 2
        }}>
          <Button
            onClick={handleCharityAccept}
            disabled={(isOnBigCircle ? bigCircleBalance : playerMoney) < charityCost}
            sx={{
              background: (isOnBigCircle ? bigCircleBalance : playerMoney) >= charityCost 
                ? 'linear-gradient(135deg, #10B981 0%, #059669 100%)'
                : 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: (isOnBigCircle ? bigCircleBalance : playerMoney) >= charityCost 
                  ? 'linear-gradient(135deg, #059669 0%, #047857 100%)'
                  : 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚ù§Ô∏è –ü—Ä–∏–Ω—è—Ç—å (${charityCost.toLocaleString()})
          </Button>
          <Button
            onClick={handleCharityDecline}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            üòî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫—É–±–∏–∫–æ–≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <Dialog
        open={showCharityDiceModal}
        onClose={() => setShowCharityDiceModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #3B82F6 0%, #2563EB 100%)',
            borderRadius: '20px',
            border: '2px solid #3B82F6',
            boxShadow: '0 25px 50px rgba(59, 130, 246, 0.3)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.2)',
          pb: 2
        }}>
          üé≤ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –í—ã–±–æ—Ä —Ö–æ–¥–∞
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: 'white', mb: 2 }}>
            {isOnBigCircle ? (
              <>–í—ã–ø–∞–ª–æ: <strong>{charityDiceValues.dice1}</strong>, <strong>{charityDiceValues.dice2}</strong> –∏ <strong>{charityDiceValues.dice3}</strong></>
            ) : (
              <>–í—ã–ø–∞–ª–æ: <strong>{charityDiceValues.dice1}</strong> –∏ <strong>{charityDiceValues.dice2}</strong></>
            )}
          </Typography>
          <Typography variant="body1" sx={{ color: 'white', mb: 3 }}>
            –í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Ö–æ—Ç–∏—Ç–µ —Ö–æ–¥–∏—Ç—å:
          </Typography>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid rgba(255, 255, 255, 0.2)',
          justifyContent: 'center',
          gap: 2,
          flexWrap: 'wrap'
        }}>
          <Button
            onClick={() => handleCharityDiceChoice(charityDiceValues.dice1)}
            sx={{
              background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
              }
            }}
          >
            üé≤ –•–æ–¥–∏—Ç—å –Ω–∞ {charityDiceValues.dice1}
          </Button>
          <Button
            onClick={() => handleCharityDiceChoice(charityDiceValues.dice2)}
            sx={{
              background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
              }
            }}
          >
            üé≤ –•–æ–¥–∏—Ç—å –Ω–∞ {charityDiceValues.dice2}
          </Button>
          {isOnBigCircle && (
            <Button
              onClick={() => handleCharityDiceChoice(charityDiceValues.dice3)}
              sx={{
                background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                color: 'white',
                px: 4,
                py: 1.5,
                borderRadius: '10px',
                fontSize: '16px',
                fontWeight: 'bold',
                '&:hover': {
                  background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
                }
              }}
            >
              üé≤ –•–æ–¥–∏—Ç—å –Ω–∞ {charityDiceValues.dice3}
            </Button>
          )}
          <Button
            onClick={() => handleCharityDiceChoice(charityDiceValues.dice1 + charityDiceValues.dice2)}
            sx={{
              background: 'linear-gradient(135deg, #F59E0B 0%, #D97706 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #D97706 0%, #B45309 100%)'
              }
            }}
          >
            üé≤ –•–æ–¥–∏—Ç—å –Ω–∞ {charityDiceValues.dice1 + charityDiceValues.dice2} (—Å—É–º–º–∞ 2)
          </Button>
          {isOnBigCircle && (
            <Button
              onClick={() => handleCharityDiceChoice(charityDiceValues.sum)}
              sx={{
                background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                color: 'white',
                px: 4,
                py: 1.5,
                borderRadius: '10px',
                fontSize: '16px',
                fontWeight: 'bold',
                '&:hover': {
                  background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
                }
              }}
            >
              üé≤ –•–æ–¥–∏—Ç—å –Ω–∞ {charityDiceValues.sum} (—Å—É–º–º–∞ 3)
            </Button>
          )}
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ */}
      <Dialog
        open={showDealTypeModal}
        onClose={() => setShowDealTypeModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '2px solid #6B7280',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid #6B7280',
          pb: 2
        }}>
          üéØ –ö–ª–µ—Ç–∫–∞ "–°–¥–µ–ª–∫–∞"
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: 'white', mb: 3 }}>
            {players[currentPlayer]?.name}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:
          </Typography>
          
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center' }}>
            <Button
              onClick={() => handleDealTypeSelection('small')}
              sx={{
                background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                color: 'white',
                px: 4,
                py: 2,
                borderRadius: '15px',
                fontSize: '16px',
                fontWeight: 'bold',
                minWidth: '150px',
                '&:hover': {
                  background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
                }
              }}
            >
              üè™ –ú–∞–ª–∞—è —Å–¥–µ–ª–∫–∞
            </Button>
            
            <Button
              onClick={() => handleDealTypeSelection('big')}
              sx={{
                background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                color: 'white',
                px: 4,
                py: 2,
                borderRadius: '15px',
                fontSize: '16px',
                fontWeight: 'bold',
                minWidth: '150px',
                '&:hover': {
                  background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
                }
              }}
            >
              üè¢ –ë–æ–ª—å—à–∞—è —Å–¥–µ–ª–∫–∞
            </Button>
          </Box>
        </DialogContent>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–¥–µ–ª–∫–∏ */}
      <Dialog
        open={showDealModal}
        onClose={() => handleCancelDeal()}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '2px solid #6B7280',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid #6B7280',
          pb: 2
        }}>
          üíº –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–¥–µ–ª–∫–∏
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          {currentDealCard && (
            <Box>
              <Typography variant="h5" sx={{ color: 'white', mb: 2, fontWeight: 'bold' }}>
                {currentDealCard.name}
              </Typography>
              <Typography variant="body1" sx={{ color: '#94A3B8', mb: 3 }}>
                {currentDealCard.description}
              </Typography>
              
              <Box sx={{ 
                background: 'rgba(255, 255, 255, 0.1)', 
                borderRadius: '15px', 
                p: 3, 
                mb: 3 
              }}>
                <Typography variant="h6" sx={{ color: '#10B981', mb: 1 }}>
                  –°—Ç–æ–∏–º–æ—Å—Ç—å: ${currentDealCard.cost.toLocaleString()}
                </Typography>
                <Typography variant="h6" sx={{ color: '#3B82F6' }}>
                  –î–æ—Ö–æ–¥: ${currentDealCard.income.toLocaleString()}/–º–µ—Å
                </Typography>
              </Box>
              
              <Typography variant="body2" sx={{ color: '#94A3B8', mb: 3 }}>
                –£ –≤–∞—Å: ${playerMoney.toLocaleString()}
              </Typography>
            </Box>
          )}
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #6B7280',
          justifyContent: 'center',
          gap: 2,
          flexWrap: 'wrap'
        }}>
          <Button
            onClick={handleCancelDeal}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 3,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '14px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </Button>
          
          <Button
            onClick={handleBuyDeal}
            disabled={!currentDealCard || playerMoney < currentDealCard.cost}
            sx={{
              background: playerMoney >= (currentDealCard?.cost || 0)
                ? 'linear-gradient(135deg, #10B981 0%, #059669 100%)'
                : 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 3,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '14px',
              fontWeight: 'bold',
              '&:hover': {
                background: playerMoney >= (currentDealCard?.cost || 0)
                  ? 'linear-gradient(135deg, #059669 0%, #047857 100%)'
                  : 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            üí∞ –ö—É–ø–∏—Ç—å
          </Button>

          <Button
            onClick={() => {
              setCreditModalFromDeal(true);
              setShowCreditModal(true);
            }}
            sx={{
              background: 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)',
              color: 'white',
              px: 3,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '14px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)'
              }
            }}
          >
            üí≥ –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
          </Button>

          <Button
            onClick={handlePassCardToPlayer}
            sx={{
              background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
              color: 'white',
              px: 3,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '14px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)'
              }
            }}
          >
            üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –∏–≥—Ä–æ–∫—É
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <Dialog
        open={showPlayerSelectionModal}
        onClose={() => setShowPlayerSelectionModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '2px solid #6B7280',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid #6B7280',
          pb: 2
        }}>
          üéÅ –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫—É
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: 'white', mb: 3 }}>
            –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É "{currentDealCard?.name}":
          </Typography>
          
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
            {players.map((player, index) => (
              index !== currentPlayer && (
                <Button
                  key={player.id}
                  onClick={() => handlePassCardToSpecificPlayer(index)}
                  sx={{
                    background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                    color: 'white',
                    py: 2,
                    borderRadius: '15px',
                    fontSize: '16px',
                    fontWeight: 'bold',
                    '&:hover': {
                      background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)',
                      transform: 'scale(1.02)'
                    },
                    transition: 'all 0.2s ease-in-out'
                  }}
                >
                                      üéØ {player.username || player.name || '–ò–≥—Ä–æ–∫'}
                </Button>
              )
            ))}
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #6B7280',
          justifyContent: 'center'
        }}>
          <Button
            onClick={() => setShowPlayerSelectionModal(false)}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚ùå –û—Ç–º–µ–Ω–∞
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ */}
      <Dialog
        open={showCreditModal}
        onClose={closeCreditModal}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #374151 100%)',
            borderRadius: '20px',
            border: '2px solid #6B7280',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid #6B7280',
          pb: 2
        }}>
          üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Grid container spacing={3}>
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Grid item xs={12} md={6}>
              <Box sx={{ 
                background: 'rgba(255, 255, 255, 0.1)', 
                borderRadius: '15px', 
                p: 3, 
                mb: 3 
              }}>
                <Typography variant="h6" sx={{ color: 'white', mb: 2, textAlign: 'center' }}>
                  üìä –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </Typography>
                <Typography variant="body1" sx={{ color: '#94A3B8', mb: 1 }}>
                  üí∞ –î–µ–Ω—å–≥–∏: ${playerMoney.toLocaleString()}
                </Typography>
                <Typography variant="body1" sx={{ color: '#94A3B8', mb: 1 }}>
                  üí≥ –¢–µ–∫—É—â–∏–π –∫—Ä–µ–¥–∏—Ç: ${playerCredit.toLocaleString()}
                </Typography>
                <Typography variant="body1" sx={{ color: '#94A3B8', mb: 1 }}>
                  üìà –î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: ${getCashFlow().toLocaleString()}/–º–µ—Å
                </Typography>
                <Typography variant="body1" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                  üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç: ${getMaxCredit().toLocaleString()}
                </Typography>
              </Box>
            </Grid>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –î–µ–π—Å—Ç–≤–∏—è */}
            <Grid item xs={12} md={6}>
              <Box sx={{ 
                background: 'rgba(255, 255, 255, 0.1)', 
                borderRadius: '15px', 
                p: 3 
              }}>
                <Typography variant="h6" sx={{ color: 'white', mb: 2, textAlign: 'center' }}>
                  üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                </Typography>
                
                {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã –¥–ª—è –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞ */}
                <Typography variant="body2" sx={{ color: '#94A3B8', mb: 2 }}>
                  –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç:
                </Typography>
                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
                  {[1000, 2000, 5000, 10000].map((amount) => {
                    const maxCredit = getMaxCredit();
                    const canTake = amount <= maxCredit && (playerCredit + amount) <= maxCredit;
                    return (
                      <Button
                        key={amount}
                        onClick={() => creditModalFromDeal ? handleTakeCreditFromDeal(amount) : handleTakeCredit(amount)}
                        disabled={!canTake}
                        size="small"
                        sx={{
                          background: canTake 
                            ? 'linear-gradient(135deg, #10B981 0%, #059669 100%)'
                            : 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
                          color: 'white',
                          px: 2,
                          py: 1,
                          borderRadius: '8px',
                          fontSize: '12px',
                          fontWeight: 'bold',
                          '&:hover': {
                            background: canTake 
                              ? 'linear-gradient(135deg, #059669 0%, #047857 100%)'
                              : 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
                          }
                        }}
                      >
                        ${amount.toLocaleString()}
                      </Button>
                    );
                  })}
                </Box>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã */}
                <Box sx={{ mb: 3 }}>
                  <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                    –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É:
                  </Typography>
                  <TextField
                    fullWidth
                    placeholder="—Å—É–º–º–∞"
                    type="number"
                    value={customCreditAmount}
                    onChange={(e) => setCustomCreditAmount(e.target.value)}
                    sx={{
                      '& .MuiOutlinedInput-root': {
                        color: 'white',
                        '& fieldset': {
                          borderColor: 'rgba(255, 255, 255, 0.3)',
                        },
                        '&:hover fieldset': {
                          borderColor: 'rgba(255, 255, 255, 0.5)',
                        },
                        '& .MuiInputLabel-root': {
                          color: 'rgba(255, 255, 255, 0.7)',
                        },
                        '& .MuiInputBase-input': {
                          '&::placeholder': {
                            color: '#EF4444',
                            opacity: 1,
                          },
                        },
                      },
                    }}
                  />
                  <Button
                    variant="contained"
                    onClick={() => creditModalFromDeal ? handleCustomCreditFromDeal() : handleCustomCredit()}
                    disabled={!customCreditAmount || customCreditAmount <= 0}
                    fullWidth
                    sx={{
                      mt: 1,
                      background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                      color: 'white',
                      py: 1,
                      borderRadius: '8px',
                      fontSize: '12px',
                      fontWeight: 'bold',
                      '&:hover': {
                        background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                      },
                      '&:disabled': {
                        background: 'rgba(107, 114, 128, 0.5)',
                      },
                    }}
                  >
                    üí≥ –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç
                  </Button>
                </Box>

                {/* –ü–æ–ª–µ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ */}
                {playerCredit > 0 && (
                  <Box sx={{ mb: 3 }}>
                    <Typography variant="body2" sx={{ color: '#94A3B8', mb: 1 }}>
                      –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç:
                    </Typography>
                    <TextField
                      fullWidth
                      placeholder="—Å—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è"
                      type="number"
                      value={customPayoffAmount}
                      onChange={(e) => setCustomPayoffAmount(e.target.value)}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          color: 'white',
                          '& fieldset': {
                            borderColor: 'rgba(255, 255, 255, 0.3)',
                          },
                          '&:hover fieldset': {
                            borderColor: 'rgba(255, 255, 255, 0.5)',
                          },
                          '& .MuiInputLabel-root': {
                            color: 'rgba(255, 255, 255, 0.7)',
                          },
                          '& .MuiInputBase-input': {
                            '&::placeholder': {
                              color: '#10B981',
                              opacity: 1,
                            },
                          },
                        },
                      }}
                    />
                    <Button
                      variant="contained"
                      onClick={() => handlePayOffCredit(parseInt(customPayoffAmount) || 0)}
                      disabled={!customPayoffAmount || customPayoffAmount <= 0 || parseInt(customPayoffAmount) > playerCredit || parseInt(customPayoffAmount) > playerMoney}
                      fullWidth
                      sx={{
                        mt: 1,
                        background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                        color: 'white',
                        py: 1,
                        borderRadius: '8px',
                        fontSize: '12px',
                        fontWeight: 'bold',
                        '&:hover': {
                          background: 'linear-gradient(135deg, #059669 0%, #047857 100%)',
                        },
                        '&:disabled': {
                          background: 'rgba(107, 114, 128, 0.5)',
                        },
                      }}
                    >
                      üí∞ –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç
                    </Button>
                  </Box>
                )}

                                {/* –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ */}
                {playerCredit > 0 && (
                  <>
                    <Typography variant="body2" sx={{ color: '#94A3B8', mb: 2 }}>
                      –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç:
                    </Typography>
                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 3 }}>
                      {[1000, 2000, 5000, 10000].map((amount) => {
                        const canPay = amount <= playerCredit && amount <= playerMoney;
                        return (
                          <Button
                            key={amount}
                            onClick={() => handleQuickPayoff(amount)}
                            disabled={!canPay}
                            size="small"
                            sx={{
                              background: canPay 
                                ? 'linear-gradient(135deg, #F59E0B 0%, #D97706 100%)'
                                : 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
                              color: 'white',
                              px: 2,
                              py: 1,
                              borderRadius: '8px',
                              fontSize: '12px',
                              fontWeight: 'bold',
                              '&:hover': {
                                background: canPay 
                                  ? 'linear-gradient(135deg, #D97706 0%, #B45309 100%)'
                                  : 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
                              }
                            }}
                          >
                            ${amount.toLocaleString()}
                          </Button>
                        );
                      })}
                    </Box>
                    

                  </>
                )}

                {/* –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞ */}
                {playerCredit > 0 && (
                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                    {/* –ü–æ–≥–∞—Å–∏—Ç—å –≤–µ—Å—å –∫—Ä–µ–¥–∏—Ç */}
                    <Button
                      onClick={() => handlePayOffCredit(playerCredit)}
                      disabled={playerMoney < playerCredit}
                      fullWidth
                      sx={{
                        background: playerMoney >= playerCredit
                          ? 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)'
                          : 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
                        color: 'white',
                        py: 1.5,
                        borderRadius: '10px',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        '&:hover': {
                          background: playerMoney >= playerCredit
                            ? 'linear-gradient(135deg, #DC2626 0%, #B91C1C 100%)'
                            : 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
                        }
                      }}
                    >
                      üí∞ –ü–æ–≥–∞—Å–∏—Ç—å –≤–µ—Å—å –∫—Ä–µ–¥–∏—Ç (${playerCredit.toLocaleString()})
                    </Button>
                  </Box>
                )}
              </Box>
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          borderTop: '1px solid #6B7280',
          justifyContent: 'center'
        }}>
          <Button
            onClick={closeCreditModal}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            ‚ùå –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–µ—Ç–∏ */}
      {showConfetti && (
        <Box
          sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            width: '100vw',
            height: '100vh',
            pointerEvents: 'none',
            zIndex: 9999,
            overflow: 'hidden'
          }}
        >
          {[...Array(50)].map((_, i) => (
            <motion.div
              key={i}
              initial={{ 
                x: Math.random() * window.innerWidth, 
                y: -20,
                rotate: 0
              }}
              animate={{ 
                y: window.innerHeight + 20,
                rotate: 360,
                x: Math.random() * window.innerWidth
              }}
              transition={{ 
                duration: 3 + Math.random() * 2,
                ease: "easeIn"
              }}
              style={{
                position: 'absolute',
                fontSize: '20px',
                color: ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD'][Math.floor(Math.random() * 6)]
              }}
            >
              {['üéâ', 'üéä', 'üéà', '‚ú®', 'üí´', 'üåü'][Math.floor(Math.random() * 6)]}
            </motion.div>
          ))}
        </Box>
      )}

      {/* –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
      <FullProfessionCard
        open={showProfessionCard}
        onClose={() => setShowProfessionCard(false)}
        professionId={selectedProfessionId}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä—ã–Ω–∫–∞ */}
      <MarketCardModal
        open={showMarketCardModal}
        onClose={() => setShowMarketCardModal(false)}
        marketCard={currentMarketCard}
        playerAssets={currentPlayerAssets}
        onAccept={handleMarketAccept}
        onDecline={handleMarketDecline}
        currentPlayer={players[currentPlayer]}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ */}
      <ExpenseCardModal
        open={showExpenseCardModal}
        onClose={() => setShowExpenseCardModal(false)}
        expenseCard={currentExpenseCard}
        currentPlayer={players[currentPlayer]}
        onPay={handleExpensePay}
        onTakeCredit={handleExpenseTakeCredit}
      />



      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã */}
      <Dialog
        open={showVictoryModal}
        onClose={() => setShowVictoryModal(false)}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%)',
            borderRadius: '20px',
            border: '2px solid #F59E0B',
            boxShadow: '0 25px 50px rgba(245, 158, 11, 0.3)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: '#92400E', 
          textAlign: 'center',
          borderBottom: '1px solid #F59E0B',
          pb: 2
        }}>
          üèÜ –ü–û–ë–ï–î–ê!
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h4" sx={{ color: '#92400E', mb: 2, fontWeight: 'bold' }}>
            üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!
          </Typography>
          <Typography variant="h6" sx={{ color: '#92400E', mb: 3 }}>
            {victoryReason}
          </Typography>
          <Typography variant="body1" sx={{ color: '#92400E', mb: 3 }}>
            –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã –∏ —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏–≥—Ä—ã!
          </Typography>
        </DialogContent>
        
        <DialogActions sx={{
          p: 3,
          borderTop: '1px solid #F59E0B',
          justifyContent: 'center'
        }}>
          <Button
            onClick={() => {
              setShowVictoryModal(false);
              endGame();
            }}
            sx={{
              background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
              }
            }}
          >
            üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ */}
      <Dialog
        open={showRankingsModal}
        onClose={() => setShowRankingsModal(false)}
        maxWidth="lg"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #1F2937 0%, #111827 100%)',
            borderRadius: '20px',
            border: '2px solid #374151'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: '#FFFFFF', 
          textAlign: 'center',
          borderBottom: '1px solid #374151',
          pb: 2
        }}>
          üèÜ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä—ã
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3 }}>
          <Grid container spacing={2}>
            {playerRankings.map((player, index) => (
              <Grid item xs={12} key={player.id}>
                <Box sx={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between',
                  p: 2,
                  background: index === 0 
                    ? 'linear-gradient(135deg, rgba(245, 158, 11, 0.2), rgba(217, 119, 6, 0.2))'
                    : index === 1
                    ? 'linear-gradient(135deg, rgba(156, 163, 175, 0.2), rgba(107, 114, 128, 0.2))'
                    : index === 2
                    ? 'linear-gradient(135deg, rgba(180, 83, 9, 0.2), rgba(146, 64, 14, 0.2))'
                    : 'rgba(255, 255, 255, 0.05)',
                  borderRadius: '10px',
                  border: index === 0 
                    ? '2px solid #F59E0B'
                    : index === 1
                    ? '2px solid #9CA3AF'
                    : index === 2
                    ? '2px solid #B45309'
                    : '1px solid #374151'
                }}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                    <Typography variant="h4" sx={{ 
                      color: index === 0 ? '#F59E0B' : index === 1 ? '#9CA3AF' : index === 2 ? '#B45309' : '#6B7280',
                      fontWeight: 'bold',
                      minWidth: '40px'
                    }}>
                      #{player.rank}
                    </Typography>
                    <Avatar sx={{ 
                      bgcolor: player.color,
                      width: 40,
                      height: 40
                    }}>
                      {(player.username || player.name || '?').charAt(0)}
                    </Avatar>
                    <Box>
                      <Typography variant="h6" sx={{ color: '#FFFFFF', fontWeight: 'bold' }}>
                        {player.username || player.name || '–ò–≥—Ä–æ–∫'}
                        {player.hasWon && <span style={{ color: '#F59E0B', marginLeft: '8px' }}>üëë</span>}
                      </Typography>
                      <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                        {player.isOnBigCircle ? 'üéØ –ë–æ–ª—å—à–æ–π –∫—Ä—É–≥' : 'üîÑ –ú–∞–ª—ã–π –∫—Ä—É–≥'}
                      </Typography>
                    </Box>
                  </Box>
                  
                  <Box sx={{ textAlign: 'right' }}>
                    <Typography variant="h6" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                      +{player.points} –æ—á–∫–æ–≤
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                      –î–æ—Ö–æ–¥: ${player.passiveIncome.toLocaleString()}
                    </Typography>
                    <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                      –ë–∞–ª–∞–Ω—Å: ${player.balance.toLocaleString()}
                    </Typography>
                    {player.isOnBigCircle && (
                      <Typography variant="body2" sx={{ color: '#94A3B8' }}>
                        –ë–∏–∑–Ω–µ—Å–æ–≤: {player.businessCount}, –ú–µ—á—Ç: {player.dreamCount}
                      </Typography>
                    )}
                  </Box>
                </Box>
              </Grid>
            ))}
          </Grid>
        </DialogContent>
        
        <DialogActions sx={{
          p: 3,
          borderTop: '1px solid #374151',
          justifyContent: 'center'
        }}>
          <Button
            onClick={() => setShowRankingsModal(false)}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <Dialog
        open={showFreeCardsModal}
        onClose={() => setShowFreeCardsModal(false)}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%)',
            borderRadius: '20px',
            border: '2px solid #F59E0B',
            boxShadow: '0 25px 50px rgba(245, 158, 11, 0.3)'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: '#92400E', 
          textAlign: 'center',
          borderBottom: '1px solid #F59E0B',
          pb: 2
        }}>
          üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç –¥—Ä—É–≥–∞
        </DialogTitle>
        
        <DialogContent sx={{ pt: 3, textAlign: 'center' }}>
          <Typography variant="h6" sx={{ color: '#92400E', mb: 2 }}>
            –í–∞—à –¥—Ä—É–≥ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω, —á—Ç–æ –¥–∞—Ä–∏—Ç –≤–∞–º:
          </Typography>
          <Typography variant="body1" sx={{ color: '#92400E', mb: 3 }}>
            ‚Ä¢ 1 –∫–∞—Ä—Ç–æ—á–∫—É –º–∞–ª–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            <br />
            ‚Ä¢ 1 –∫–∞—Ä—Ç–æ—á–∫—É –±–æ–ª—å—à–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
          </Typography>
          <Typography variant="body2" sx={{ color: '#92400E', mb: 3 }}>
            –ö–∞—Ä—Ç–æ—á–∫–∏ –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –≤–∞—à–∏–º –∞–∫—Ç–∏–≤–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
          </Typography>
        </DialogContent>
        
        <DialogActions sx={{
          p: 3,
          borderTop: '1px solid #F59E0B',
          justifyContent: 'center',
          gap: 2
        }}>
          <Button
            onClick={handleUseFreeCards}
            sx={{
              background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #059669 0%, #047857 100%)'
              }
            }}
          >
            üéÅ –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
          </Button>
          
          <Button
            onClick={() => setShowFreeCardsModal(false)}
            sx={{
              background: 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)',
              color: 'white',
              px: 4,
              py: 1.5,
              borderRadius: '10px',
              fontSize: '16px',
              fontWeight: 'bold',
              '&:hover': {
                background: 'linear-gradient(135deg, #4B5563 0%, #374151 100%)'
              }
            }}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
    </Fragment>
  );
};

export default OriginalGameBoard;
