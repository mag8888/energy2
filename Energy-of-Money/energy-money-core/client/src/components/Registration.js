import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { connectSocket } from '../socket';
import {
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  Alert,
  CircularProgress,
  Stepper,
  Step,
  StepLabel
} from '@mui/material';
import {
  Email as EmailIcon,
  Person as PersonIcon,
  Lock as LockIcon,
  CheckBox as CheckBoxIcon,
  CheckBoxOutlineBlank as CheckBoxOutlineBlankIcon
} from '@mui/icons-material';

const Registration = ({ onRegister }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
  const [rememberMe, setRememberMe] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI
  const [currentStep, setCurrentStep] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [isExistingUser, setIsExistingUser] = useState(false);
  const [isResettingPassword, setIsResettingPassword] = useState(false);
  const [resetPasswordMessage, setResetPasswordMessage] = useState('');

  // –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const steps = ['Email', 'Username', 'Password'];

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Socket.IO –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üîå [Registration] Component mounted, connecting to socket...');
    connectSocket().catch(console.error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞
    const savedCredentials = localStorage.getItem('energy_of_money_remember_me');
    if (savedCredentials) {
      try {
        const credentials = JSON.parse(savedCredentials);
        console.log('üîê [Registration] –ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞:', credentials.email);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setFormData(prev => ({
          ...prev,
          email: credentials.email || '',
          password: credentials.password || ''
        }));
        setRememberMe(true);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        setTimeout(() => {
          if (credentials.email && credentials.password) {
            console.log('üîê [Registration] –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥...');
            handleAutoLogin(credentials.email, credentials.password);
          }
        }, 1000);
      } catch (error) {
        console.error('‚ùå [Registration] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        localStorage.removeItem('energy_of_money_remember_me');
      }
    }
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
  useEffect(() => {
    setError('');
  }, [currentStep]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleInputChange = useCallback((field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setError(''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
  }, []);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const validateEmail = useCallback((email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email.trim());
  }, []);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è username
  const validateUsername = useCallback((username) => {
    return username.trim().length >= 2;
  }, []);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è password
  const validatePassword = useCallback((password) => {
    return password.length >= 6;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
  const handleAutoLogin = useCallback(async (email, password) => {
    console.log('üîê [Registration] –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –¥–ª—è:', email);
    setIsLoading(true);
    setError('');

    try {
      const socket = await connectSocket();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.emit('checkUserExists', email, (response) => {
        if (response.exists) {
          console.log('üîê [Registration] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...');
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
          socket.emit('authenticateUser', '', email, password, (authResponse) => {
            if (authResponse.success) {
              console.log('‚úÖ [Registration] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', authResponse.userData);
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
              if (rememberMe) {
                const credentials = { email, password };
                localStorage.setItem('energy_of_money_remember_me', JSON.stringify(credentials));
                console.log('üíæ [Registration] –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
              }
              
              onRegister(authResponse.userData);
            } else {
              console.log('‚ùå [Registration] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è:', authResponse.error);
              setError('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.');
              // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              localStorage.removeItem('energy_of_money_remember_me');
            }
            setIsLoading(false);
          });
        } else {
          console.log('‚ùå [Registration] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞');
          setError('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.');
          localStorage.removeItem('energy_of_money_remember_me');
          setIsLoading(false);
        }
      });
    } catch (error) {
      console.error('‚ùå [Registration] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞:', error);
      setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤—Ä—É—á–Ω—É—é.');
      setIsLoading(false);
    }
  }, [rememberMe, onRegister]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const checkUserExists = useCallback(async () => {
    if (!validateEmail(formData.email)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const socket = await connectSocket();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket
      socket.emit('checkUserExists', formData.email, (response) => {
        if (response.exists) {
          setIsExistingUser(true);
          setCurrentStep(1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username
          console.log('üîç [Registration] User exists, proceeding to username step');
        } else {
          setIsExistingUser(false);
          setCurrentStep(1); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É username –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log('üîç [Registration] New user, proceeding to username step');
        }
        setIsLoading(false);
      });
    } catch (error) {
      console.error('‚ùå [Registration] Error checking user:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setIsLoading(false);
    }
  }, [formData.email, validateEmail]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
  const checkUsernameUnique = useCallback(async () => {
    if (!validateUsername(formData.username)) {
      setError('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const socket = await connectSocket();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username —á–µ—Ä–µ–∑ WebSocket
      socket.emit('checkUsernameUnique', formData.username, (response) => {
        if (response.unique) {
          if (isExistingUser) {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
            setCurrentStep(2);
            console.log('‚úÖ [Registration] Username confirmed for existing user');
          } else {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
            setCurrentStep(2);
            console.log('‚úÖ [Registration] Username is unique for new user');
          }
        } else {
          setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
        }
        setIsLoading(false);
      });
    } catch (error) {
      console.error('‚ùå [Registration] Error checking username:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setIsLoading(false);
    }
  }, [formData.username, validateUsername, isExistingUser]);

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  const handleFinalSubmit = useCallback(async () => {
    if (isExistingUser) {
      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å
      if (!validatePassword(formData.password)) {
        setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
      }
    } else {
      // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º username –∏ –ø–∞—Ä–æ–ª—å
      if (!validateUsername(formData.username)) {
        setError('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        return;
      }
      if (!validatePassword(formData.password)) {
        setError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        return;
      }
    }

    setIsLoading(true);
    setError('');

    try {
      const socket = await connectSocket();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket
      socket.emit('authenticateUser', formData.username, formData.email, formData.password, (response) => {
        if (response.success) {
          console.log('‚úÖ [Registration] User authenticated:', response.userData);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è"
          if (rememberMe) {
            const credentials = { 
              email: formData.email, 
              password: formData.password 
            };
            localStorage.setItem('energy_of_money_remember_me', JSON.stringify(credentials));
            console.log('üíæ [Registration] –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
          } else {
            // –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" –æ—Ç–∫–ª—é—á–µ–Ω–æ
            localStorage.removeItem('energy_of_money_remember_me');
            console.log('üóëÔ∏è [Registration] –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞ —É–¥–∞–ª–µ–Ω—ã');
          }
          
          onRegister(response.userData);
        } else {
          setError(response.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
        setIsLoading(false);
      });
    } catch (error) {
      console.error('‚ùå [Registration] Error during authentication:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      setIsLoading(false);
    }
  }, [formData, validatePassword, validateUsername, isExistingUser, rememberMe, onRegister]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = useCallback((e) => {
    e.preventDefault();
    console.log('üéØ [Registration] Form submitted at step:', currentStep);

    switch (currentStep) {
      case 0:
        checkUserExists();
        break;
      case 1:
        if (isExistingUser) {
          // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Å—Ä–∞–∑—É —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
          handleFinalSubmit();
        } else {
          // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ username
          checkUsernameUnique();
        }
        break;
      case 2:
        handleFinalSubmit();
        break;
      default:
        console.error('‚ùå [Registration] Invalid step:', currentStep);
    }
  }, [currentStep, checkUserExists, checkUsernameUnique, handleFinalSubmit, isExistingUser]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  const handleResetPassword = useCallback(async () => {
    if (!validateEmail(formData.email)) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è');
      return;
    }

    setIsResettingPassword(true);
    setError('');

    try {
      // –≠–º—É–ª–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setResetPasswordMessage('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±—Ä–æ—Å—É –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email');
      console.log('üìß [Registration] Password reset requested for:', formData.email);
    } catch (error) {
      console.error('‚ùå [Registration] Error resetting password:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsResettingPassword(false);
    }
  }, [formData.email, validateEmail]);

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
  const goToPreviousStep = useCallback(() => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      setError('');
    }
  }, [currentStep]);

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  const goToNextStep = useCallback(() => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
      setError('');
    }
  }, [currentStep, steps.length]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const getStepTitle = useCallback(() => {
    if (currentStep === 0) return '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email';
    if (currentStep === 1) return isExistingUser ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    if (currentStep === 2) return isExistingUser ? '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' : '–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å';
    return '';
  }, [currentStep, isExistingUser]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const getStepDescription = useCallback(() => {
    if (currentStep === 0) return '–ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç';
    if (currentStep === 1) return isExistingUser ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∏–≥—Ä—ã';
    if (currentStep === 2) return isExistingUser ? '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å';
    return '';
  }, [currentStep, isExistingUser]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ Enter
  const handleKeyPress = useCallback((event) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      switch (currentStep) {
        case 0:
          if (formData.email.trim() && !isLoading) {
            checkUserExists();
          }
          break;
        case 1:
          if (isExistingUser) {
            if (formData.password && !isLoading) {
              handleFinalSubmit();
            }
          } else {
            if (formData.username.trim() && !isLoading) {
              checkUsernameUnique();
            }
          }
          break;
        case 2:
          if (formData.password && !isLoading) {
            handleFinalSubmit();
          }
          break;
        default:
          break;
      }
    }
  }, [currentStep, formData, isLoading, checkUserExists, checkUsernameUnique, handleFinalSubmit, isExistingUser]);

  return (
    <Box
      component={motion.div}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        padding: 2
      }}
    >
      <Paper
        elevation={8}
        sx={{
          maxWidth: 500,
          width: '100%',
          padding: 4,
          borderRadius: 3,
          background: 'rgba(255, 255, 255, 0.95)',
          backdropFilter: 'blur(10px)'
        }}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Box textAlign="center" mb={4}>
          <Box
            component={motion.div}
            animate={{ rotate: [0, 5, -5, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
            sx={{ fontSize: '3rem', mb: 2 }}
          >
            üéÆ
          </Box>
          <Typography variant="h4" component="h1" gutterBottom fontWeight="bold">
            Energy of Money
          </Typography>
          <Typography variant="body1" color="text.secondary">
            {getStepTitle()}
          </Typography>
          <Typography variant="body2" color="text.secondary" mt={1}>
            {getStepDescription()}
          </Typography>
        </Box>

        {/* Stepper */}
        <Stepper activeStep={currentStep} sx={{ mb: 4 }}>
          {steps.map((label, index) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {/* –§–æ—Ä–º–∞ */}
        <Box component="form" onSubmit={handleSubmit}>
          {/* –®–∞–≥ 0: Email */}
          {currentStep === 0 && (
            <Box>
              <TextField
                fullWidth
                label="Email"
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="example@email.com"
                InputProps={{
                  startAdornment: <EmailIcon sx={{ mr: 1, color: 'text.secondary' }} />
                }}
                sx={{ mb: 2 }}
                disabled={isLoading}
              />
              
              <Button
                fullWidth
                variant="contained"
                size="large"
                type="submit"
                disabled={isLoading || !formData.email.trim()}
                sx={{ mb: 2 }}
              >
                {isLoading ? <CircularProgress size={24} /> : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
              </Button>

              <Button
                fullWidth
                variant="text"
                onClick={handleResetPassword}
                disabled={isResettingPassword || !formData.email.trim()}
                size="small"
              >
                {isResettingPassword ? <CircularProgress size={16} /> : '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?'}
              </Button>
            </Box>
          )}

          {/* –®–∞–≥ 1: Username (–¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –∏–ª–∏ Password (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö) */}
          {currentStep === 1 && (
            <Box>
              {!isExistingUser ? (
                // –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–ª–µ username
                <>
                  <TextField
                    fullWidth
                    label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    value={formData.username}
                    onChange={(e) => handleInputChange('username', e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                    InputProps={{
                      startAdornment: <PersonIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    }}
                    sx={{ mb: 2 }}
                    disabled={isLoading}
                  />
                  
                  <Box sx={{ display: 'flex', gap: 2 }}>
                    <Button
                      variant="outlined"
                      onClick={goToPreviousStep}
                      disabled={isLoading}
                      sx={{ flex: 1 }}
                    >
                      –ù–∞–∑–∞–¥
                    </Button>
                    <Button
                      variant="contained"
                      onClick={goToNextStep}
                      disabled={isLoading || !formData.username.trim()}
                      sx={{ flex: 1 }}
                    >
                      {isLoading ? <CircularProgress size={24} /> : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
                    </Button>
                  </Box>
                </>
              ) : (
                // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–ª–µ password
                <>
                  <TextField
                    fullWidth
                    label="–ü–∞—Ä–æ–ª—å"
                    type="password"
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    InputProps={{
                      startAdornment: <LockIcon sx={{ mr: 1, color: 'text.secondary' }} />
                    }}
                    sx={{ mb: 2 }}
                    disabled={isLoading}
                  />
                  
                  {/* –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                  <Box sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    mb: 2,
                    cursor: 'pointer',
                    '&:hover': { opacity: 0.8 }
                  }}
                  onClick={() => setRememberMe(!rememberMe)}
                  >
                    {rememberMe ? (
                      <CheckBoxIcon sx={{ color: '#667eea', mr: 1 }} />
                    ) : (
                      <CheckBoxOutlineBlankIcon sx={{ color: '#667eea', mr: 1 }} />
                    )}
                    <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                      –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
                    </Typography>
                  </Box>
                  
                  <Box sx={{ display: 'flex', gap: 2 }}>
                    <Button
                      variant="outlined"
                      onClick={goToPreviousStep}
                      disabled={isLoading}
                      sx={{ flex: 1 }}
                    >
                      –ù–∞–∑–∞–¥
                    </Button>
                    <Button
                      variant="contained"
                      type="submit"
                      disabled={isLoading || !formData.password}
                      sx={{ flex: 1 }}
                    >
                      {isLoading ? <CircularProgress size={24} /> : '–í–æ–π—Ç–∏'}
                    </Button>
                  </Box>
                </>
              )}
            </Box>
          )}

          {/* –®–∞–≥ 2: Password */}
          {currentStep === 2 && (
            <Box>
              <TextField
                fullWidth
                label={isExistingUser ? "–ü–∞—Ä–æ–ª—å" : "–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"}
                type="password"
                value={formData.password}
                onChange={(e) => handleInputChange('password', e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={isExistingUser ? "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" : "–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"}
                InputProps={{
                  startAdornment: <LockIcon sx={{ mr: 1, color: 'text.secondary' }} />
                }}
                sx={{ mb: 2 }}
                disabled={isLoading}
              />
              
              {/* –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è" (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) */}
              {isExistingUser && (
                <Box sx={{ 
                  display: 'flex', 
                  alignItems: 'center', 
                  mb: 2,
                  cursor: 'pointer',
                  '&:hover': { opacity: 0.8 }
                }}
                onClick={() => setRememberMe(!rememberMe)}
                >
                  {rememberMe ? (
                    <CheckBoxIcon sx={{ color: '#667eea', mr: 1 }} />
                  ) : (
                    <CheckBoxOutlineBlankIcon sx={{ color: '#667eea', mr: 1 }} />
                  )}
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
                  </Typography>
                </Box>
              )}
              
              <Box sx={{ display: 'flex', gap: 2 }}>
                <Button
                  variant="outlined"
                  onClick={goToPreviousStep}
                  disabled={isLoading}
                  sx={{ flex: 1 }}
                >
                  –ù–∞–∑–∞–¥
                </Button>
                <Button
                  variant="contained"
                  type="submit"
                  disabled={isLoading || !formData.password}
                  sx={{ flex: 1 }}
                >
                  {isLoading ? <CircularProgress size={24} /> : (isExistingUser ? '–í–æ–π—Ç–∏' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')}
                </Button>
              </Box>
            </Box>
          )}
        </Box>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
        {error && (
          <Alert severity="error" sx={{ mt: 2 }}>
            {error}
          </Alert>
        )}

        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è */}
        {resetPasswordMessage && (
          <Alert severity="success" sx={{ mt: 2 }}>
            {resetPasswordMessage}
          </Alert>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∞–≥–µ */}
        <Box textAlign="center" mt={3}>
          <Typography variant="body2" color="text.secondary">
            –®–∞–≥ {currentStep + 1} –∏–∑ {steps.length}
          </Typography>
        </Box>
      </Paper>
    </Box>
  );
};

export default Registration;
