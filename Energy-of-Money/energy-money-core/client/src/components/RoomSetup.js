import React, { useState, useEffect } from 'react';
import { 
  Box, 
  Typography, 
  TextField, 
  Button, 
  Container,
  Paper, 
  Grid,
  Alert,
  Snackbar,
  FormControlLabel,
  Switch,
  FormControl,
  Select, 
  MenuItem, 
  Chip,
  Card,
  CardContent,
  Avatar
} from '@mui/material';
import { motion } from 'framer-motion';
import { useParams, useNavigate } from 'react-router-dom';
import socket from '../socket';

const RoomSetup = ({ playerData, onRoomSetup }) => {
  const { roomId } = useParams();
  const navigate = useNavigate();
  
  // –í—Å–µ —Ö—É–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –¥–æ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
  const [roomName, setRoomName] = useState('');
  const [isPublic, setIsPublic] = useState(true);
  const [roomPassword, setRoomPassword] = useState('');
  const [professionType, setProfessionType] = useState('individual');
  
  // –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –º–µ—á—Ç—ã
  const [selectedProfession, setSelectedProfession] = useState(null);
  const [selectedDream, setSelectedDream] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  const [isReady, setIsReady] = useState(false);
  const [playerName, setPlayerName] = useState('');
  const [isHost, setIsHost] = useState(false);
  
  // –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  const [players, setPlayers] = useState([]);
  const [canStart, setCanStart] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è players
  useEffect(() => {
    console.log('üë• [RoomSetup] –°–æ—Å—Ç–æ—è–Ω–∏–µ players –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', players);
    console.log('üë• [RoomSetup] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ UI:', players.length);
  }, [players]);
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ playerData –∏–ª–∏ localStorage
  useEffect(() => {
    if (playerData?.username) {
      setPlayerName(playerData.username);
      console.log('üë§ [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–∑ playerData:', playerData.username);
    } else {
      const savedPlayerName = localStorage.getItem('energy_of_money_player_name');
      if (savedPlayerName) {
        setPlayerName(savedPlayerName);
        console.log('üíæ [RoomSetup] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:', savedPlayerName);
      } else {
        const randomName = `–ò–≥—Ä–æ–∫ ${Math.floor(Math.random() * 9000) + 1000}`;
        setPlayerName(randomName);
        console.log('üé≤ [RoomSetup] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è:', randomName);
      }
    }
    
    console.log('üè† [RoomSetup] –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–º–µ–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞...');
  }, [playerData]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.IO —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!roomId || !playerName || !playerData) {
      console.log('‚è≥ [RoomSetup] –û–∂–∏–¥–∞–µ–º roomId, playerName –∏–ª–∏ playerData:', { roomId, playerName, playerData });
      return;
    }

    console.log('üîó [RoomSetup] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –∏–º–µ–Ω–µ–º:', playerName);
    console.log('üîó [RoomSetup] playerData:', playerData);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.emit('joinRoom', roomId, {
      username: playerName,
      roomId: roomId
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('roomJoined', (data) => {
      console.log('‚úÖ [RoomSetup] –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', data);
      if (data.success) {
        console.log('üè† [RoomSetup] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        socket.emit('getRoomData', roomId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    socket.on('joinRoomError', (data) => {
      console.error('‚ùå [RoomSetup] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', data);
      setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomData', (data) => {
      console.log('üè† [RoomSetup] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
      console.log('üè† [RoomSetup] data.displayName:', data.displayName);
      console.log('üè† [RoomSetup] data.roomId:', data.roomId);
      console.log('üè† [RoomSetup] data.hostId:', data.hostId);
      console.log('üë• [RoomSetup] data.currentPlayers:', data.currentPlayers);
      
      if (data.displayName) {
        setRoomName(data.displayName);
        console.log('üè† [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã:', data.displayName);
      } else {
        console.log('‚ö†Ô∏è [RoomSetup] displayName –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã');
      }
      
      setIsPublic(data.isPublic !== false);
      setRoomPassword(data.password || '');
      setProfessionType(data.professionType || 'individual');
      
      // –ï—Å–ª–∏ –≤ roomData –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (data.currentPlayers && Array.isArray(data.currentPlayers)) {
        console.log('üë• [RoomSetup] –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ roomData:', data.currentPlayers.length);
        setPlayers(data.currentPlayers);
        
        const readyPlayers = data.currentPlayers.filter(p => p.ready);
        console.log('‚úÖ [RoomSetup] –ì–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ roomData:', readyPlayers.length);
        setCanStart(readyPlayers.length >= 2);
        
        const currentPlayer = data.currentPlayers.find(p => p.socketId === socket.id);
        if (currentPlayer) {
          console.log('üë§ [RoomSetup] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ roomData:', currentPlayer);
          setIsReady(currentPlayer.ready || false);
        }
      }
      
      if (data.hostProfession && data.hostProfession !== 'none') {
        setSelectedProfession(data.hostProfession);
        console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ö–æ—Å—Ç–∞ –∏–∑ roomData:', data.hostProfession);
      }

      if (data.hostId === socket.id) {
        setIsHost(true);
        console.log('üëë [RoomSetup] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º');
      } else {
        setIsHost(false);
      }

      if (data.status === 'determining_order') {
        setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...');
        setTimeout(() => {
          navigate(`/room/${roomId}/game`);
        }, 2000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomCreated', (data) => {
      console.log('üè† [RoomSetup] –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', data);
      if (data.displayName) {
        setRoomName(data.displayName);
        console.log('üè† [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã:', data.displayName);
      }
      
      if (data.hostProfession && data.hostProfession !== 'none') {
        setSelectedProfession(data.hostProfession);
        console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ö–æ—Å—Ç–∞:', data.hostProfession);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersUpdate', (updatedPlayers) => {
      console.log('üë• [RoomSetup] –ü–æ–ª—É—á–µ–Ω playersUpdate:', updatedPlayers);
      console.log('üë• [RoomSetup] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:', updatedPlayers.length);
      
      setPlayers(updatedPlayers);
      
      const readyPlayers = updatedPlayers.filter(p => p.ready);
      console.log('‚úÖ [RoomSetup] –ì–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', readyPlayers.length);
      setCanStart(readyPlayers.length >= 2);
      
      const currentPlayer = updatedPlayers.find(p => p.socketId === socket.id);
      if (currentPlayer) {
        console.log('üë§ [RoomSetup] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω:', currentPlayer);
        setIsReady(currentPlayer.ready || false);
        
        if (currentPlayer.profession && currentPlayer.profession !== 'none') {
          setSelectedProfession(currentPlayer.profession);
          console.log('üíº [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', currentPlayer.profession);
        }
        
        if (currentPlayer.dream && currentPlayer.dream !== 'none') {
          setSelectedDream(currentPlayer.dream);
          console.log('‚≠ê [RoomSetup] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–µ—á—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', currentPlayer.dream);
        }
      } else {
        console.log('‚ö†Ô∏è [RoomSetup] –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∏–≥—Ä–æ–∫–æ–≤');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    socket.on('roomNotFound', () => {
      setError('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    });

    socket.on('error', (error) => {
      console.error('‚ùå [RoomSetup] Socket error:', error);
      setError(`–û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setTimeout(() => setError(''), 5000);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('‚úÖ [RoomSetup] Socket reconnected, restoring room state...');
      setIsConnected(true);
      setError('');
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
      if (roomId) {
        socket.emit('restoreRoomState', roomId);
      }
    });

    socket.on('disconnect', (reason) => {
      console.warn('‚ö†Ô∏è [RoomSetup] Socket disconnected:', reason);
      setIsConnected(false);
      if (reason === 'io server disconnect') {
        // –°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        console.log('üîÑ [RoomSetup] Server disconnected, attempting to reconnect...');
        setTimeout(() => {
          socket.connect();
        }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    socket.on('gameStarted', (data) => {
      console.log('üéÆ [RoomSetup] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞:', data);
      setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
      setTimeout(() => {
        navigate(`/room/${roomId}/game`);
      }, 2000);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
    socket.on('orderDeterminationStarted', (data) => {
      console.log('üé≤ [RoomSetup] –ù–∞—á–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏:', data);
      setSuccess('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
      setTimeout(() => {
        navigate(`/room/${roomId}/game`);
      }, 2000);
    });

    console.log('üè† [RoomSetup] –û–∂–∏–¥–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');

    return () => {
      socket.off('roomData');
      socket.off('roomCreated');
      socket.off('playersUpdate');
      socket.off('roomNotFound');
      socket.off('error');
      socket.off('gameStarted');
      socket.off('orderDeterminationStarted');
      socket.off('roomJoined');
      socket.off('joinRoomError');
      socket.off('connect');
      socket.off('disconnect');
    };
  }, [roomId, playerName, roomName, navigate, playerData, isConnected]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ playerData –ø–µ—Ä–µ–¥–∞–Ω (–ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤)
  if (!playerData) {
    console.error('‚ùå [RoomSetup] playerData –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
    return (
      <Container maxWidth="md" sx={{ mt: 4 }}>
        <Alert severity="error">
          –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
        </Alert>
      </Container>
    );
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  const handlePublicToggle = () => {
    const newPublicState = !isPublic;
    setIsPublic(newPublicState);
    
    if (!newPublicState) {
      setRoomPassword('');
    }
    
    socket.emit('updateRoomPublic', roomId, newPublicState);
    setSuccess(`–ö–æ–º–Ω–∞—Ç–∞ ${newPublicState ? '–æ—Ç–∫—Ä—ã—Ç–∞' : '–∑–∞–∫—Ä—ã—Ç–∞'}!`);
  };

  const handlePasswordChange = () => {
    if (roomPassword.trim()) {
      socket.emit('updateRoomPassword', roomId, roomPassword.trim());
      setSuccess('–ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
  };

  const handleProfessionSelect = (profession) => {
    setSelectedProfession(profession);
    socket.emit('updateProfession', roomId, profession);
    setSuccess(`–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞: ${profession.name}!`);
  };

  const handleDreamSelect = (dream) => {
    setSelectedDream(dream);
    socket.emit('updateDream', roomId, dream);
    setSuccess(`–ú–µ—á—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: ${dream.name}!`);
  };

  const handleToggleReady = () => {
    const newReadyState = !isReady;
    setIsReady(newReadyState);
    
    if (newReadyState) {
      socket.emit('playerReady', roomId, socket.id);
      setSuccess('–í—ã –≥–æ—Ç–æ–≤—ã!');
    } else {
      setSuccess('–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–Ω—è—Ç–∞');
    }
  };

  const handleStartGame = () => {
    console.log('üöÄ [RoomSetup] –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
    
    // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
    setSuccess('–ò–≥—Ä–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    socket.emit('startGame', roomId);
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
    setTimeout(() => {
      navigate(`/room/${roomId}/game`);
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏ –º–µ—á—Ç
  const professions = [
    { id: 1, name: '–î–≤–æ—Ä–Ω–∏–∫', salary: 2000, expenses: 200, description: '–£–±–æ—Ä–∫–∞ —É–ª–∏—Ü –∏ –¥–≤–æ—Ä–æ–≤' },
    { id: 2, name: '–ö—É—Ä—å–µ—Ä', salary: 2500, expenses: 300, description: '–î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' },
    { id: 3, name: '–í–æ–¥–∏—Ç–µ–ª—å', salary: 3000, expenses: 400, description: '–ü–µ—Ä–µ–≤–æ–∑–∫–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤' },
    { id: 4, name: '–ü—Ä–æ–¥–∞–≤–µ—Ü', salary: 3500, expenses: 500, description: '–ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤' },
    { id: 5, name: '–û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫', salary: 4000, expenses: 600, description: '–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ' }
  ];

  const dreams = [
    { id: 1, name: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É', cost: 50000, description: '–ü–æ—Å–µ—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã' },
    { id: 2, name: '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ–º', cost: 200000, description: '–ö—É–ø–∏—Ç—å –¥–æ–º —Å–≤–æ–µ–π –º–µ—á—Ç—ã' },
    { id: 3, name: '–ë–∏–∑–Ω–µ—Å', cost: 100000, description: '–û—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ–ª–æ' },
    { id: 4, name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', cost: 30000, description: '–ü–æ–ª—É—á–∏—Ç—å –≤—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
    { id: 5, name: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', cost: 75000, description: '–ü–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º' }
  ];

  return (
    <Container maxWidth="lg">
      <Box
        sx={{
          minHeight: '100vh',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          py: 4,
          '@keyframes pulse': {
            '0%': { opacity: 1 },
            '50%': { opacity: 0.5 },
            '100%': { opacity: 1 }
          }
        }}
      >
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Paper
            elevation={8}
            sx={{
              p: 4,
              borderRadius: 3,
              background: 'rgba(255, 255, 255, 0.95)',
              backdropFilter: 'blur(10px)'
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 4 }}>
              <Typography variant="h4" sx={{ color: '#333', fontWeight: 'bold' }}>
                üè† –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
              </Typography>
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Box
                  sx={{
                    width: 12,
                    height: 12,
                    borderRadius: '50%',
                    bgcolor: isConnected ? '#4caf50' : '#ff9800',
                    animation: isConnected ? 'none' : 'pulse 2s infinite'
                  }}
                />
                <Typography variant="body2" sx={{ color: isConnected ? '#4caf50' : '#ff9800' }}>
                  {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
                </Typography>
              </Box>
            </Box>

            {/* –ò–º—è –∫–æ–º–Ω–∞—Ç—ã */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                üè† –ò–º—è –∫–æ–º–Ω–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
              </Typography>
              <TextField
                fullWidth
                value={roomName}
                disabled={true}
                placeholder="–ò–º—è –∫–æ–º–Ω–∞—Ç—ã"
                variant="outlined"
                sx={{ 
                  mb: 1,
                  '& .MuiInputBase-input.Mui-disabled': {
                    WebkitTextFillColor: '#666',
                    color: '#666'
                  }
                }}
              />
              <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.9rem', fontStyle: 'italic' }}>
                ‚ö†Ô∏è –ò–º—è –∫–æ–º–Ω–∞—Ç—ã –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
              </Typography>
            </Box>

            {/* –§–ª–∞–∂–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∞—è/–∑–∞–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞ */}
            <Box sx={{ mb: 3 }}>
              <FormControlLabel
                control={
                  <Switch
                    checked={isPublic}
                    onChange={handlePublicToggle}
                    color="primary"
                  />
                }
                label={
                  <Typography variant="h6" sx={{ color: '#333' }}>
                    {isPublic ? 'üåç –û—Ç–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞' : 'üîí –ó–∞–∫—Ä—ã—Ç–∞—è –∫–æ–º–Ω–∞—Ç–∞'}
                  </Typography>
                }
              />
              <Typography variant="body2" sx={{ color: '#666', mt: 1 }}>
                {isPublic 
                  ? '–õ—é–±–æ–π –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ' 
                  : '–¢–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏–ª–∏ –ø–∞—Ä–æ–ª—é'
                }
              </Typography>
              <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.9rem', fontStyle: 'italic' }}>
                ‚úÖ –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
              </Typography>
              
              {/* –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–Ω–∞—Ç) */}
              {!isPublic && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                    üîê –ü–∞—Ä–æ–ª—å –∫–æ–º–Ω–∞—Ç—ã
                  </Typography>
                  <TextField
                    fullWidth
                    value={roomPassword}
                    onChange={(e) => setRoomPassword(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"
                    variant="outlined"
                    type="password"
                    sx={{ mb: 1 }}
                  />
                  <Button
                    variant="outlined"
                    onClick={handlePasswordChange}
                    fullWidth
                    sx={{ borderRadius: 2 }}
                    disabled={!roomPassword.trim()}
                  >
                    üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </Button>
                  <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.8rem' }}>
                    üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.9rem', fontStyle: 'italic' }}>
                    ‚úÖ –ü–∞—Ä–æ–ª—å –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
                  </Typography>
                </Box>
              )}
            </Box>

            {/* –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                üë• –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
              </Typography>
              <FormControl fullWidth>
                <Select
                  value={professionType}
                  disabled={true}
                  variant="outlined"
                  sx={{
                    '& .MuiInputBase-input.Mui-disabled': {
                      WebkitTextFillColor: '#666',
                      color: '#666'
                    }
                  }}
                >
                  <MenuItem value="individual">–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</MenuItem>
                  <MenuItem value="shared">–û–±—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</MenuItem>
                </Select>
              </FormControl>
              <Typography variant="body2" sx={{ color: '#666', mt: 1, fontSize: '0.9rem', fontStyle: 'italic' }}>
                ‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
              </Typography>
            </Box>

            {/* –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å)
              </Typography>
              <Grid container spacing={2}>
                {professions.map((profession) => (
                  <Grid item xs={12} sm={6} md={4} key={profession.id}>
                    <Card
                      sx={{
                        cursor: 'pointer',
                        border: selectedProfession?.id === profession.id ? '2px solid #4caf50' : '1px solid #ddd',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: 3
                        }
                      }}
                      onClick={() => handleProfessionSelect(profession)}
                    >
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 1, color: '#333' }}>
                          {profession.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#666', mb: 1 }}>
                          üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {profession.salary}‚ÇΩ
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#666', mb: 1 }}>
                          üí∏ –†–∞—Å—Ö–æ–¥—ã: {profession.expenses}‚ÇΩ
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#666', fontSize: '0.9rem' }}>
                          {profession.description}
                        </Typography>
                        {selectedProfession?.id === profession.id && (
                          <Chip
                            label="–í—ã–±—Ä–∞–Ω–æ"
                            color="success"
                            size="small"
                            sx={{ mt: 1 }}
                          />
                        )}
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>

            {/* –í—ã–±–æ—Ä –º–µ—á—Ç—ã */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                ‚≠ê –ú–µ—á—Ç–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å)
              </Typography>
              <Grid container spacing={2}>
                {dreams.map((dream) => (
                  <Grid item xs={12} sm={6} md={4} key={dream.id}>
                    <Card
                      sx={{
                        cursor: 'pointer',
                        border: selectedDream?.id === dream.id ? '2px solid #ff9800' : '1px solid #ddd',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: 3
                        }
                      }}
                      onClick={() => handleDreamSelect(dream)}
                    >
                      <CardContent>
                        <Typography variant="h6" sx={{ mb: 1, color: '#333' }}>
                          {dream.name}
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#666', mb: 1 }}>
                          üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {dream.cost}‚ÇΩ
                        </Typography>
                        <Typography variant="body2" sx={{ color: '#666', fontSize: '0.9rem' }}>
                          {dream.description}
                        </Typography>
                        {selectedDream?.id === dream.id && (
                          <Chip
                            label="–í—ã–±—Ä–∞–Ω–æ"
                            color="warning"
                            size="small"
                            sx={{ mt: 1 }}
                          />
                        )}
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>

            {/* –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ */}
            <Box sx={{ mb: 3, textAlign: 'center' }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–≥—Ä–µ
              </Typography>
              <Button
                variant={isReady ? "contained" : "outlined"}
                color={isReady ? "success" : "primary"}
                onClick={handleToggleReady}
                size="large"
                sx={{ borderRadius: 2, px: 4 }}
              >
                {isReady ? '‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ' : '‚è≥ –ù–µ –≥–æ—Ç–æ–≤'}
              </Button>
            </Box>

            {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
            <Box sx={{ mb: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, color: '#333' }}>
                üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ ({players.length})
                {players.length === 0 && (
                  <Typography variant="body2" sx={{ color: '#ff9800', ml: 2, fontSize: '0.9rem' }}>
                    ‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...
                  </Typography>
                )}
              </Typography>
              <Grid container spacing={2}>
                {players.map((player) => (
                  <Grid item xs={12} sm={6} md={4} key={player.socketId}>
                    <Card sx={{ p: 2 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Avatar sx={{ bgcolor: player.ready ? '#4caf50' : '#ff9800' }}>
                          {player.username.charAt(0).toUpperCase()}
                        </Avatar>
                        <Box>
                          <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
                            {player.username}
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#666' }}>
                            {player.ready ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ù–µ –≥–æ—Ç–æ–≤'}
                          </Typography>
                        </Box>
                      </Box>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>

            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã */}
            <Box sx={{ mb: 3, textAlign: 'center' }}>
              {isHost ? (
                <Button
                  variant="contained"
                  color="success"
                  size="large"
                  onClick={handleStartGame}
                  disabled={!canStart}
                  sx={{
                    borderRadius: 2,
                    px: 6,
                    py: 2,
                    fontSize: '1.2rem',
                    background: !canStart ? '#ccc' : 'linear-gradient(45deg, #4caf50 30%, #45a049 90%)',
                    '&:hover': {
                      background: !canStart ? '#ccc' : 'linear-gradient(45deg, #45a049 30%, #4caf50 90%)'
                    }
                  }}
                >
                  üöÄ –°–¢–ê–†–¢ –ò–ì–†–´
                </Button>
              ) : (
                <Box sx={{ p: 3, bgcolor: '#f5f5f5', borderRadius: 2 }}>
                  <Typography variant="h6" sx={{ color: '#666', textAlign: 'center' }}>
                    üëë –¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
                  </Typography>
                </Box>
              )}
              
              {!canStart && (
                <Typography variant="body2" sx={{ color: '#666', mt: 2, textAlign: 'center' }}>
                  ‚ö†Ô∏è –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥–æ—Ç–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–∞
                </Typography>
              )}
            </Box>

            {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
            {error && (
              <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError('')}>
                <Alert onClose={() => setError('')} severity="error" sx={{ width: '100%' }}>
                  {error}
                </Alert>
              </Snackbar>
            )}

            {success && (
              <Snackbar open={!!success} autoHideDuration={6000} onClose={() => setSuccess('')}>
                <Alert onClose={() => setSuccess('')} severity="success" sx={{ width: '100%' }}>
                  {success}
                </Alert>
              </Snackbar>
            )}
          </Paper>
        </motion.div>
      </Box>
    </Container>
  );
};

export default RoomSetup;
