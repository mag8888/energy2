import { useState, useEffect, useCallback } from 'react';

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤, —Ç–∞–π–º–µ—Ä –∏ –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —Ö–æ–¥–æ–≤
 */
export const useGameTurn = (gamePlayers, roomId, socket) => {
  const [currentTurn, setCurrentTurn] = useState(null);
  const [currentTurnIndex, setCurrentTurnIndex] = useState(0);
  const [turnOrder, setTurnOrder] = useState([]);
  const [turnTimeLeft, setTurnTimeLeft] = useState(120); // 2 –º–∏–Ω—É—Ç—ã –Ω–∞ —Ö–æ–¥
  const [isMyTurn, setIsMyTurn] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID
  const getPlayerNameById = useCallback((playerId) => {
    if (!playerId) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
    const player = gamePlayers.find(p => p.id === playerId || p.socketId === playerId);
    return player?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫';
  }, [gamePlayers]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const getNextPlayer = useCallback(() => {
    if (gamePlayers.length === 0) return null;
    const nextIndex = (currentTurnIndex + 1) % gamePlayers.length;
    return gamePlayers[nextIndex];
  }, [gamePlayers, currentTurnIndex]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ö–æ–¥–∞
  const changeTurn = useCallback(() => {
    if (gamePlayers.length === 0) return;
    
    const nextIndex = (currentTurnIndex + 1) % gamePlayers.length;
    const nextPlayer = gamePlayers[nextIndex];
    
    setCurrentTurnIndex(nextIndex);
    setCurrentTurn(nextPlayer.username);
    setTurnTimeLeft(120); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    if (socket.connected && roomId) {
      socket.emit('changeTurn', {
        roomId,
        currentTurn: nextPlayer.username,
        currentTurnIndex: nextIndex
      });
    }
  }, [gamePlayers, currentTurnIndex, roomId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –±—Ä–æ—Å–∞—Ç—å –∫—É–±–∏–∫
  const canRollDice = useCallback(() => {
    if (!socket?.id || gamePlayers.length === 0) return false;
    
    const currentPlayer = gamePlayers.find(p => p.socketId === socket.id);
    return currentPlayer && currentPlayer.username === currentTurn;
  }, [gamePlayers, currentTurn, socket?.id]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ö–æ–¥–∞ –∏–∑ localStorage
  useEffect(() => {
    const savedTurnOrder = localStorage.getItem('potok-deneg_turnOrder');
    const savedCurrentTurn = localStorage.getItem('potok-deneg_currentTurn');
    
    if (savedTurnOrder) {
      try {
        setTurnOrder(JSON.parse(savedTurnOrder));
      } catch (e) {
        console.error('‚ùå [useGameTurn] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ turnOrder:', e);
      }
    }
    
    if (savedCurrentTurn) {
      setCurrentTurn(savedCurrentTurn);
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Socket.IO —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!socket || !roomId) return;

    const handleTurnChanged = (data) => {
      console.log('üîÑ [useGameTurn] Turn changed:', data);
      setCurrentTurn(data.currentTurn);
      setCurrentTurnIndex(data.currentTurnIndex);
      setTurnTimeLeft(120);
    };

    const handleTurnTimerSynced = (data) => {
      console.log('‚è∞ [useGameTurn] Turn timer synced:', data);
      setTurnTimeLeft(data.timeLeft);
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    socket.on('playerTurnChanged', handleTurnChanged);
    socket.on('turnTimerSynced', handleTurnTimerSynced);

    return () => {
      socket.off('playerTurnChanged', handleTurnChanged);
      socket.off('turnTimerSynced', handleTurnTimerSynced);
    };
  }, [socket, roomId]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ isMyTurn –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentTurn
  useEffect(() => {
    if (!socket?.id || gamePlayers.length === 0) {
      setIsMyTurn(false);
      return;
    }
    
    const currentPlayer = gamePlayers.find(p => p.socketId === socket.id);
    setIsMyTurn(currentPlayer && currentPlayer.username === currentTurn);
  }, [currentTurn, gamePlayers, socket?.id]);

  // –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞
  useEffect(() => {
    if (!isMyTurn || turnTimeLeft <= 0) return;

    const timer = setInterval(() => {
      setTurnTimeLeft(prev => {
        if (prev <= 1) {
          // –í—Ä–µ–º—è –≤—ã—à–ª–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
          changeTurn();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isMyTurn, turnTimeLeft, changeTurn]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    if (gamePlayers.length > 0 && turnOrder.length === 0) {
      const initialTurnOrder = gamePlayers.map(p => p.username);
      setTurnOrder(initialTurnOrder);
      localStorage.setItem('potok-deneg_turnOrder', JSON.stringify(initialTurnOrder));
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
      if (!currentTurn) {
        setCurrentTurn(initialTurnOrder[0]);
        setCurrentTurnIndex(0);
      }
    }
  }, [gamePlayers, turnOrder.length, currentTurn]);

  return {
    currentTurn,
    currentTurnIndex,
    turnOrder,
    turnTimeLeft,
    isMyTurn,
    setCurrentTurn,
    setCurrentTurnIndex,
    setTurnOrder,
    setTurnTimeLeft,
    getPlayerNameById,
    getNextPlayer,
    changeTurn,
    canRollDice
  };
};
