const io = require('socket.io-client');

const testUsers = [
  { username: 'MAG', email: 'xqrmedia@gmail.com', password: 'magpass' },
  { username: 'Romeo', email: 'romeo@example.com', password: 'romeopass' },
  { username: 'Alice', email: 'alice@example.com', password: 'alicepass' },
  { username: 'Bob', email: 'bob@example.com', password: 'bobpass' }
];

let currentIndex = 0;

function createNextUser() {
  if (currentIndex >= testUsers.length) {
    console.log('‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!');
    process.exit(0);
    return;
  }

  const user = testUsers[currentIndex];
  console.log(`\nüë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username} (${user.email})`);
  
  const socket = io('http://localhost:5000');
  
  socket.on('connect', () => {
    socket.emit('authenticateUser', user.username, user.email, user.password, (response) => {
      if (response.success) {
        console.log(`‚úÖ ${user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ${user.username}:`, response.error);
      }
      
      socket.disconnect();
      currentIndex++;
      setTimeout(createNextUser, 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    });
  });
  
  socket.on('error', (error) => {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${user.username}:`, error);
    socket.disconnect();
    currentIndex++;
    setTimeout(createNextUser, 500);
  });
}

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
createNextUser();

