// üéØ GameBoard - –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ CASHFLOW
import { GameEngine } from '@cashflow/core';

export class GameBoard {
  constructor(roomId) {
    this.roomId = roomId;
    this.cells = this.createBoard();
    this.currentPlayer = null;
    this.gameEngine = new GameEngine();
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  createBoard() {
    const cells = [];
    
    // –°–æ–∑–¥–∞–µ–º 40 –∫–ª–µ—Ç–æ–∫ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)
    for (let i = 0; i < 40; i++) {
      cells.push({
        id: i,
        type: this.getCellType(i),
        name: this.getCellName(i),
        description: this.getCellDescription(i),
        action: this.getCellAction(i),
        color: this.getCellColor(i)
      });
    }
    
    return cells;
  }

  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–ª–µ—Ç–∫–∏
  getCellType(position) {
    if (position === 0) return 'start';
    if (position % 10 === 0) return 'payday';
    if (position % 7 === 0) return 'deal';
    if (position % 5 === 0) return 'market';
    if (position % 3 === 0) return 'charity';
    if (position % 2 === 0) return 'expense';
    return 'opportunity';
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
  getCellName(position) {
    const names = {
      0: '–°—Ç–∞—Ä—Ç',
      10: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      20: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      30: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
      7: '–°–¥–µ–ª–∫–∞',
      14: '–°–¥–µ–ª–∫–∞',
      21: '–°–¥–µ–ª–∫–∞',
      28: '–°–¥–µ–ª–∫–∞',
      35: '–°–¥–µ–ª–∫–∞',
      5: '–†—ã–Ω–æ–∫',
      15: '–†—ã–Ω–æ–∫',
      25: '–†—ã–Ω–æ–∫',
      35: '–†—ã–Ω–æ–∫',
      3: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      6: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      9: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      12: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      15: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      18: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      21: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      24: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      27: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      30: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      33: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      36: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      39: '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    };
    
    return names[position] || `–ö–ª–µ—Ç–∫–∞ ${position}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
  getCellDescription(position) {
    const descriptions = {
      0: '–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è. –ü–æ–ª—É—á–∏—Ç–µ $2000',
      10: '–ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É $2000',
      20: '–ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É $2000',
      30: '–ü–æ–ª—É—á–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É $2000',
      7: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏',
      14: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏',
      21: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏',
      28: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏',
      35: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Å–¥–µ–ª–∫–∏'
    };
    
    return descriptions[position] || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–µ—Ç–∫–∞';
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª–µ—Ç–∫–∏
  getCellAction(position) {
    const actions = {
      0: 'start_game',
      10: 'receive_salary',
      20: 'receive_salary',
      30: 'receive_salary',
      7: 'deal_opportunity',
      14: 'deal_opportunity',
      21: 'deal_opportunity',
      28: 'deal_opportunity',
      35: 'deal_opportunity'
    };
    
    return actions[position] || 'move';
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
  getCellColor(position) {
    const colors = {
      0: '#4CAF50',    // –ó–µ–ª–µ–Ω—ã–π - —Å—Ç–∞—Ä—Ç
      10: '#2196F3',   // –°–∏–Ω–∏–π - –∑–∞—Ä–ø–ª–∞—Ç–∞
      20: '#2196F3',
      30: '#2196F3',
      7: '#FF9800',    // –û—Ä–∞–Ω–∂–µ–≤—ã–π - —Å–¥–µ–ª–∫–∏
      14: '#FF9800',
      21: '#FF9800',
      28: '#FF9800',
      35: '#FF9800',
      5: '#9C27B0',    // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - —Ä—ã–Ω–æ–∫
      15: '#9C27B0',
      25: '#9C27B0',
      35: '#9C27B0'
    };
    
    return colors[position] || '#E0E0E0'; // –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ—Ç–∫–µ
  getCellInfo(position) {
    if (position < 0 || position >= this.cells.length) {
      return null;
    }
    return this.cells[position];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏
  getAllCells() {
    return this.cells;
  }

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞
  movePlayer(playerId, steps) {
    const player = this.gameEngine.getPlayerInfo(playerId);
    if (!player) {
      throw new Error('Player not found');
    }

    const newPosition = (player.position + steps) % this.cells.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    this.gameEngine.updatePlayerPosition(playerId, newPosition);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–µ
    const cellInfo = this.getCellInfo(newPosition);
    
    return {
      playerId,
      oldPosition: player.position,
      newPosition,
      cellInfo,
      action: cellInfo.action
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
  getNeighborCells(position, range = 3) {
    const neighbors = [];
    
    for (let i = -range; i <= range; i++) {
      if (i === 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      
      const neighborPos = (position + i + this.cells.length) % this.cells.length;
      neighbors.push({
        position: neighborPos,
        ...this.getCellInfo(neighborPos)
      });
    }
    
    return neighbors;
  }
}
