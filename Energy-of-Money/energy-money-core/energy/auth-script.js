// Auth Page Script
class AuthPage {
    constructor() {
        this.init();
    }

    init() {
        console.log('üîê [AuthPage] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        this.setupEventListeners();
        this.checkExistingUser();
        this.checkReturnParam();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        window.switchTab = (tab) => this.switchTab(tab);
        window.handleLogin = (event) => this.handleLogin(event);
        window.handleRegister = (event) => this.handleRegister(event);
    }

    checkExistingUser() {
        const savedUser = localStorage.getItem('energy_of_money_user');
        if (savedUser) {
            console.log('‚úÖ [AuthPage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É');
            this.redirectToGame();
        }
    }

    checkReturnParam() {
        const urlParams = new URLSearchParams(window.location.search);
        const returnParam = urlParams.get('return');
        
        if (returnParam === 'game' || returnParam === 'lobby') {
            console.log('üéÆ [AuthPage] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä return=' + returnParam + ', –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–µ–º –∏–≥—Ä—É');
            this.returnToGame = true;
        }
    }

    switchTab(tab) {
        console.log('üîÑ [AuthPage] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É:', tab);
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ —Ñ–æ—Ä–º
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.auth-form').forEach(form => form.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∏ —Ñ–æ—Ä–º—É
        document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');
        document.getElementById(`${tab}Form`).classList.add('active');
    }

    async handleLogin(event) {
        event.preventDefault();
        console.log('üîê [AuthPage] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥...');
        
        const formData = new FormData(event.target);
        const email = formData.get('email');
        const password = formData.get('password');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span>–í—Ö–æ–¥...</span>';
        submitBtn.disabled = true;
        
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'login',
                    email: email,
                    password: password
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('energy_of_money_user', JSON.stringify(data.user));
                console.log('‚úÖ [AuthPage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', data.user);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.showSuccessMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    this.redirectToGame();
                }, 1000);
            } else {
                this.showErrorMessage('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + data.message);
            }
        } catch (error) {
            console.error('‚ùå [AuthPage] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            const user = {
                id: Date.now().toString(),
                email: email,
                name: email.split('@')[0],
                username: email.split('@')[0]
            };
            
            localStorage.setItem('energy_of_money_user', JSON.stringify(user));
            this.showSuccessMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            
            setTimeout(() => {
                this.redirectToGame();
            }, 1000);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    async handleRegister(event) {
        event.preventDefault();
        console.log('üìù [AuthPage] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
        
        const formData = new FormData(event.target);
        const name = formData.get('name');
        const email = formData.get('email');
        const password = formData.get('password');
        const confirmPassword = formData.get('confirmPassword');
        
        if (password !== confirmPassword) {
            this.showErrorMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
            return;
        }
        
        if (password.length < 6) {
            this.showErrorMessage('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>';
        submitBtn.disabled = true;
        
        try {
            const response = await fetch('/api/auth', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'register',
                    email: email,
                    password: password,
                    name: name
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                localStorage.setItem('energy_of_money_user', JSON.stringify(data.user));
                console.log('‚úÖ [AuthPage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', data.user);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                this.showSuccessMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    this.redirectToGame();
                }, 1000);
            } else {
                this.showErrorMessage('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + data.message);
            }
        } catch (error) {
            console.error('‚ùå [AuthPage] –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const user = {
                id: Date.now().toString(),
                email: email,
                name: name,
                username: name
            };
            
            localStorage.setItem('energy_of_money_user', JSON.stringify(user));
            this.showSuccessMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            
            setTimeout(() => {
                this.redirectToGame();
            }, 1000);
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }
    }

    showSuccessMessage(message) {
        this.showMessage(message, 'success');
    }

    showErrorMessage(message) {
        this.showMessage(message, 'error');
    }

    showMessage(message, type) {
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const existingMessage = document.querySelector('.auth-message');
        if (existingMessage) {
            existingMessage.remove();
        }

        const messageDiv = document.createElement('div');
        messageDiv.className = `auth-message auth-message-${type}`;
        messageDiv.innerHTML = `
            <div class="message-content">
                <span class="message-icon">${type === 'success' ? '‚úÖ' : '‚ùå'}</span>
                <span class="message-text">${message}</span>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if (!document.getElementById('messageStyles')) {
            const styles = document.createElement('style');
            styles.id = 'messageStyles';
            styles.textContent = `
                .auth-message {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    padding: 15px 20px;
                    border-radius: 10px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                    backdrop-filter: blur(10px);
                    animation: slideInRight 0.3s ease;
                }

                .auth-message-success {
                    background: rgba(16, 185, 129, 0.9);
                    border: 1px solid rgba(16, 185, 129, 0.5);
                    color: white;
                }

                .auth-message-error {
                    background: rgba(239, 68, 68, 0.9);
                    border: 1px solid rgba(239, 68, 68, 0.5);
                    color: white;
                }

                .message-content {
                    display: flex;
                    align-items: center;
                    gap: 10px;
                }

                .message-icon {
                    font-size: 18px;
                }

                .message-text {
                    font-weight: 600;
                }

                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
            `;
            document.head.appendChild(styles);
        }

        document.body.appendChild(messageDiv);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.style.animation = 'slideInRight 0.3s ease reverse';
                setTimeout(() => {
                    messageDiv.remove();
                }, 300);
            }
        }, 5000);
    }

    redirectToGame() {
        console.log('üéÆ [AuthPage] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏–≥—Ä—É...');
        console.log('üîç [AuthPage] returnToGame:', this.returnToGame);
        
        if (this.returnToGame) {
            // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º return=lobby, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–±–±–∏
            console.log('‚úÖ [AuthPage] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–æ–±–±–∏');
            window.location.href = 'lobby.html';
        } else {
            // –ò–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            console.log('üè† [AuthPage] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
            window.location.href = 'index.html';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authPage = new AuthPage();
