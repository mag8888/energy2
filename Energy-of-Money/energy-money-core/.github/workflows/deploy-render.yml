name: Deploy to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trigger Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail
          if [ -z "${RENDER_API_KEY:-}" ] || [ -z "${RENDER_SERVICE_ID:-}" ]; then
            echo "Missing secrets RENDER_API_KEY or RENDER_SERVICE_ID" >&2
            exit 1
          fi

          echo "→ Creating deploy for service: $RENDER_SERVICE_ID"
          HTTP_CODE=$(curl -sS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H 'Content-Type: application/json' \
            -d '{"clearCache": false}' \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -o response.json -w "%{http_code}")

          echo "HTTP: $HTTP_CODE"
          cat response.json

          if [ "$HTTP_CODE" -lt 200 ] || [ "$HTTP_CODE" -ge 300 ]; then
            echo "Failed to create deploy" >&2
            exit 1
          fi

          DEPLOY_ID=$(jq -r '.id' response.json || true)
          if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" = "null" ]; then
            echo "Could not parse DEPLOY_ID; exiting without wait." >&2
            exit 0
          fi

          echo "→ Waiting for deploy $DEPLOY_ID to finish..."
          ATTEMPTS=0
          MAX_ATTEMPTS=120 # ~20 minutes
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS=$(curl -sS -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/deploys/$DEPLOY_ID" | jq -r '.status')
            echo "Status: $STATUS (attempt $ATTEMPTS)"
            if [ "$STATUS" = "live" ]; then
              echo "✅ Deploy is live"
              exit 0
            fi
            if [ "$STATUS" = "canceled" ] || [ "$STATUS" = "failed" ] || [ "$STATUS" = "build_failed" ]; then
              echo "❌ Deploy failed with status: $STATUS" >&2
              exit 1
            fi
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 10
          done
          echo "⚠️ Timeout waiting for deploy to finish" >&2
          exit 1

