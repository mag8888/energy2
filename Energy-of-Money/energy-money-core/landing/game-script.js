// Game Script
class GameManager {
    constructor() {
        this.currentUser = null;
        this.currentRoom = null;
        this.selectedDream = null;
        this.roomUpdateInterval = null;
        
        this.init();
    }

    init() {
        console.log('üéÆ [GameManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.loadUser();
        this.loadRoom();
        this.setupEventListeners();
        this.updateRoomDisplay();
    }

    loadUser() {
        const savedUser = localStorage.getItem('energy_of_money_user');
        if (savedUser) {
            try {
                this.currentUser = JSON.parse(savedUser);
                console.log('‚úÖ [GameManager] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', this.currentUser);
                this.updateUserInfo();
            } catch (error) {
                console.error('‚ùå [GameManager] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                this.redirectToAuth();
            }
        } else {
            console.log('‚ö†Ô∏è [GameManager] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
            this.redirectToAuth();
        }
    }

    loadRoom() {
        const urlParams = new URLSearchParams(window.location.search);
        const roomId = urlParams.get('room') || localStorage.getItem('currentRoomId');
        
        if (!roomId) {
            console.log('‚ö†Ô∏è [GameManager] ID –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–±–±–∏');
            this.redirectToLobby();
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∏–∑ localStorage
        const rooms = JSON.parse(localStorage.getItem('gameRooms') || '[]');
        this.currentRoom = rooms.find(room => room.id === roomId);
        
        if (!this.currentRoom) {
            console.log('‚ùå [GameManager] –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–±–±–∏');
            this.redirectToLobby();
            return;
        }

        console.log('‚úÖ [GameManager] –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', this.currentRoom);
        this.updateRoomInfo();
    }

    updateUserInfo() {
        const userInfo = document.getElementById('userInfo');
        if (userInfo && this.currentUser) {
            userInfo.textContent = this.currentUser.name;
        }
    }

    updateRoomInfo() {
        const roomTitle = document.getElementById('roomTitle');
        const roomStatus = document.getElementById('roomStatus');
        const roomPlayers = document.getElementById('roomPlayers');
        
        if (roomTitle) {
            roomTitle.textContent = this.currentRoom.name;
        }
        
        if (roomStatus) {
            roomStatus.textContent = this.getStatusText(this.currentRoom.status);
            roomStatus.className = `status-badge ${this.currentRoom.status}`;
        }
        
        if (roomPlayers) {
            roomPlayers.textContent = `${this.currentRoom.currentPlayers}/${this.currentRoom.maxPlayers} –∏–≥—Ä–æ–∫–æ–≤`;
        }
    }

    getStatusText(status) {
        const statusMap = {
            'waiting': '–û–∂–∏–¥–∞–Ω–∏–µ',
            'playing': '–ò–≥—Ä–∞ –∏–¥–µ—Ç',
            'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
        };
        return statusMap[status] || status;
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ª–æ–±–±–∏
        const backToLobbyBtn = document.getElementById('backToLobbyBtn');
        if (backToLobbyBtn) {
            backToLobbyBtn.addEventListener('click', () => this.redirectToLobby());
        }

        // –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => this.logout());
        }

        // –í—ã–±–æ—Ä –º–µ—á—Ç—ã
        document.querySelectorAll('.dream-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const dream = e.currentTarget.getAttribute('data-dream');
                this.selectDream(dream);
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const readyBtn = document.getElementById('readyBtn');
        if (readyBtn) {
            readyBtn.addEventListener('click', () => this.toggleReady());
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
        const startGameBtn = document.getElementById('startGameBtn');
        if (startGameBtn) {
            startGameBtn.addEventListener('click', () => this.startGame());
        }
    }

    selectDream(dream) {
        console.log('üéØ [GameManager] –í—ã–±–∏—Ä–∞–µ–º –º–µ—á—Ç—É:', dream);
        
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.dream-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const selectedCard = document.querySelector(`[data-dream="${dream}"]`);
        if (selectedCard) {
            selectedCard.classList.add('selected');
        }
        
        this.selectedDream = dream;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–Ω–∞—Ç—ã
        this.showRoomInterface();
        
        this.showMessage('–ú–µ—á—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞!', 'success');
    }

    showRoomInterface() {
        const dreamSelection = document.getElementById('dreamSelection');
        const roomInterface = document.getElementById('roomInterface');
        
        if (dreamSelection) {
            dreamSelection.style.display = 'none';
        }
        
        if (roomInterface) {
            roomInterface.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        this.loadProfessionCard();
        this.loadPlayersList();
        this.updateRoomControls();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
        this.startRoomUpdate();
    }

    loadProfessionCard() {
        const professionCard = document.getElementById('professionCard');
        if (!professionCard || !this.currentRoom) return;
        
        const profession = this.currentRoom.profession;
        const professionName = this.getProfessionName(profession);
        
        professionCard.innerHTML = `
            <div class="profession-info">
                <h4>${professionName}</h4>
                <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ</p>
            </div>
        `;
    }

    getProfessionName(profession) {
        const professionMap = {
            'engineer': '–ò–Ω–∂–µ–Ω–µ—Ä',
            'doctor': '–í—Ä–∞—á',
            'teacher': '–£—á–∏—Ç–µ–ª—å',
            'lawyer': '–Æ—Ä–∏—Å—Ç',
            'businessman': '–ë–∏–∑–Ω–µ—Å–º–µ–Ω'
        };
        return professionMap[profession] || profession;
    }

    loadPlayersList() {
        const playersList = document.getElementById('playersList');
        if (!playersList || !this.currentRoom) return;
        
        const players = this.currentRoom.players || [];
        const isCreator = this.currentRoom.creatorId === this.currentUser.id;
        
        playersList.innerHTML = players.map(player => `
            <div class="player-card ${player.isReady ? 'ready' : 'not-ready'}">
                <div class="player-info">
                    <div class="player-avatar">
                        ${player.name.charAt(0).toUpperCase()}
                    </div>
                    <div class="player-details">
                        <div class="player-name">${player.name}</div>
                        <div class="player-status">
                            ${player.isReady ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ù–µ –≥–æ—Ç–æ–≤'}
                        </div>
                        ${player.dream ? `<div class="player-dream">üéØ ${this.getDreamName(player.dream)}</div>` : ''}
                    </div>
                </div>
                ${isCreator && player.id !== this.currentUser.id ? 
                    `<button class="btn-danger remove-player-btn" data-player-id="${player.id}">–£–¥–∞–ª–∏—Ç—å</button>` : 
                    ''
                }
            </div>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.remove-player-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const playerId = e.target.getAttribute('data-player-id');
                this.removePlayer(playerId);
            });
        });
    }

    getDreamName(dream) {
        const dreamMap = {
            'financial_freedom': '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–±–æ–¥–∞',
            'business_empire': '–ë–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏—è',
            'real_estate': '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'investment_portfolio': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å'
        };
        return dreamMap[dream] || dream;
    }

    updateRoomControls() {
        const readyBtn = document.getElementById('readyBtn');
        const startGameBtn = document.getElementById('startGameBtn');
        const isCreator = this.currentRoom.creatorId === this.currentUser.id;
        
        if (readyBtn) {
            const currentPlayer = this.currentRoom.players.find(p => p.id === this.currentUser.id);
            if (currentPlayer) {
                readyBtn.textContent = currentPlayer.isReady ? '–ù–µ –≥–æ—Ç–æ–≤' : '–ì–æ—Ç–æ–≤';
                readyBtn.className = currentPlayer.isReady ? 'btn-secondary' : 'btn-primary';
            }
        }
        
        if (startGameBtn) {
            startGameBtn.style.display = isCreator ? 'block' : 'none';
        }
    }

    async toggleReady() {
        console.log('üéÆ [GameManager] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å');
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤ localStorage
            const rooms = JSON.parse(localStorage.getItem('gameRooms') || '[]');
            const room = rooms.find(r => r.id === this.currentRoom.id);
            
            if (room) {
                const player = room.players.find(p => p.id === this.currentUser.id);
                if (player) {
                    player.isReady = !player.isReady;
                    localStorage.setItem('gameRooms', JSON.stringify(rooms));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
                    this.currentRoom = room;
                    this.updateRoomDisplay();
                    
                    this.showMessage(player.isReady ? '–í—ã –≥–æ—Ç–æ–≤—ã!' : '–í—ã –Ω–µ –≥–æ—Ç–æ–≤—ã', 'success');
                }
            }
        } catch (error) {
            console.error('‚ùå [GameManager] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞', 'error');
        }
    }

    async startGame() {
        console.log('üéÆ [GameManager] –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã
            const allReady = this.currentRoom.players.every(p => p.isReady);
            if (!allReady) {
                this.showMessage('–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã!', 'error');
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
            const rooms = JSON.parse(localStorage.getItem('gameRooms') || '[]');
            const room = rooms.find(r => r.id === this.currentRoom.id);
            
            if (room) {
                room.status = 'playing';
                localStorage.setItem('gameRooms', JSON.stringify(rooms));
                
                this.currentRoom = room;
                this.updateRoomInfo();
                
                this.showMessage('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!', 'success');
                
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—é
                setTimeout(() => {
                    this.showMessage('–ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö', 'info');
                }, 2000);
            }
        } catch (error) {
            console.error('‚ùå [GameManager] –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã:', error);
            this.showMessage('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã', 'error');
        }
    }

    async removePlayer(playerId) {
        console.log('üéÆ [GameManager] –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞:', playerId);
        
        try {
            const rooms = JSON.parse(localStorage.getItem('gameRooms') || '[]');
            const room = rooms.find(r => r.id === this.currentRoom.id);
            
            if (room) {
                room.players = room.players.filter(p => p.id !== playerId);
                room.currentPlayers = room.players.length;
                localStorage.setItem('gameRooms', JSON.stringify(rooms));
                
                this.currentRoom = room;
                this.updateRoomDisplay();
                
                this.showMessage('–ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω', 'success');
            }
        } catch (error) {
            console.error('‚ùå [GameManager] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:', error);
            this.showMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞', 'error');
        }
    }

    updateRoomDisplay() {
        this.updateRoomInfo();
        this.loadPlayersList();
        this.updateRoomControls();
    }

    startRoomUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        this.roomUpdateInterval = setInterval(() => {
            this.loadRoom();
            this.updateRoomDisplay();
        }, 3000);
    }

    stopRoomUpdate() {
        if (this.roomUpdateInterval) {
            clearInterval(this.roomUpdateInterval);
            this.roomUpdateInterval = null;
        }
    }

    redirectToLobby() {
        this.stopRoomUpdate();
        window.location.href = 'lobby.html';
    }

    redirectToAuth() {
        this.stopRoomUpdate();
        window.location.href = 'auth.html?return=game';
    }

    logout() {
        console.log('üö™ [GameManager] –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        localStorage.removeItem('energy_of_money_user');
        localStorage.removeItem('currentRoomId');
        this.stopRoomUpdate();
        window.location.href = 'index.html';
    }

    showMessage(message, type = 'info') {
        const container = document.getElementById('messageContainer');
        if (!container) return;

        const messageEl = document.createElement('div');
        messageEl.className = `message message-${type}`;
        messageEl.textContent = message;
        
        container.appendChild(messageEl);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.parentNode.removeChild(messageEl);
            }
        }, 3000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    new GameManager();
});
