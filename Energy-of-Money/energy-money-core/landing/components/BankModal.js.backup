import React, { useState, useEffect, useCallback } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  Box,
  Typography,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Chip,
  IconButton,
  useMediaQuery,
  useTheme,
  Alert,
  Snackbar,
  Card,
  CardContent,
  Grid,
  Divider,
  Avatar,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction
} from '@mui/material';
import { motion } from 'framer-motion';
import { 
  Close as CloseIcon, 
  AccountBalance, 
  Send, 
  History, 
  CheckCircle, 
  Error,
  TrendingUp,
  TrendingDown,
  AccountBalanceWallet,
  CreditCard,
  AttachMoney,
  Schedule
} from '@mui/icons-material';

const BankModal = ({ 
  isOpen, 
  onClose, 
  playerData, 
  gamePlayers, 
  socket, 
  roomId,
  bankBalance: externalBankBalance,
  onBankBalanceChange
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  const [bankBalance, setBankBalance] = useState(0);
  const [transferAmount, setTransferAmount] = useState('');
  const [selectedRecipient, setSelectedRecipient] = useState('');
  const [transferHistory, setTransferHistory] = useState([]);
  const [isTransferring, setIsTransferring] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –∞–Ω–∏–º–∞—Ü–∏–∏ shimmer
  useEffect(() => {
    const shimmerStyle = `
      @keyframes shimmer {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
      }
    `;
    
    const style = document.createElement('style');
    style.textContent = shimmerStyle;
    document.head.appendChild(style);
    
    return () => {
      if (document.head.contains(style)) {
        document.head.removeChild(style);
      }
    };
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const getCurrentPlayer = useCallback(() => {
    if (!gamePlayers || !Array.isArray(gamePlayers) || !socket?.id) {
      return null;
    }
    return gamePlayers.find(p => p.socketId === socket.id);
  }, [gamePlayers, socket?.id]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  const getInitialBalance = useCallback(() => {
    const currentPlayer = getCurrentPlayer();
    const profession = currentPlayer?.profession || playerData?.profession;
    
    if (profession?.balance !== undefined) {
      return Number(profession.balance);
    }
    
    // Fallback –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    const professionBalances = {
      '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å': 3000,
      '–£—á–∏—Ç–µ–ª—å': 2000,
      '–í—Ä–∞—á': 5000,
      '–ò–Ω–∂–µ–Ω–µ—Ä': 4000,
      '–Æ—Ä–∏—Å—Ç': 6000
    };
    
    return professionBalances[profession?.name] || 3000;
  }, [getCurrentPlayer, playerData?.profession]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
  const getRecipients = useCallback(() => {
    if (!gamePlayers || !Array.isArray(gamePlayers) || !socket?.id) {
      return [];
    }
    const currentPlayer = getCurrentPlayer();
    return gamePlayers.filter(player => 
      player.socketId !== socket.id && 
      player.username && 
      player.username.trim() !== ''
    );
  }, [gamePlayers, socket?.id, getCurrentPlayer]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  useEffect(() => {
    if (!isOpen) return;

    const initialBalance = getInitialBalance();
    console.log('üè¶ [BankModal] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞:', initialBalance);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
    setBankBalance(initialBalance);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if (onBankBalanceChange) {
      onBankBalanceChange(initialBalance);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ localStorage
    let history = [];
    if (socket?.id && roomId) {
      const savedHistory = localStorage.getItem(`bank_history_${socket.id}_${roomId}`);
      
      if (savedHistory) {
        try {
          history = JSON.parse(savedHistory);
          console.log('üìú [BankModal] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', history.length, '–∑–∞–ø–∏—Å–µ–π');
        } catch (error) {
          console.error('‚ùå [BankModal] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
          history = [];
        }
      }
    }
    
    // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    if (history.length === 0 && initialBalance > 0) {
      const initialTransaction = {
        id: `initial_${Date.now()}`,
        type: 'initial',
        amount: initialBalance,
        description: '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
        timestamp: new Date().toLocaleString('ru-RU'),
        from: '–ë–∞–Ω–∫',
        to: getCurrentPlayer()?.username || playerData?.username || '–ò–≥—Ä–æ–∫',
        status: 'completed',
        balanceAfter: initialBalance
      };
      
      history = [initialTransaction];
      console.log('üÜï [BankModal] –°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', initialTransaction);
    }
    
    setTransferHistory(history);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ localStorage
    if (socket?.id && roomId) {
      localStorage.setItem(`bank_history_${socket.id}_${roomId}`, JSON.stringify(history));
    }
    
  }, [isOpen, getInitialBalance, onBankBalanceChange, socket?.id, roomId, playerData?.username]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º –±–∞–ª–∞–Ω—Å–æ–º (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ)
  useEffect(() => {
    if (externalBankBalance !== undefined && bankBalance === 0) {
      console.log('üîÑ [BankModal] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', externalBankBalance);
      setBankBalance(externalBankBalance);
    }
  }, [externalBankBalance, bankBalance]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ socket —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  useEffect(() => {
    if (!socket || !isOpen) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    const handleBankTransferSuccess = (data) => {
      console.log('‚úÖ [BankModal] –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω:', data);
      setSuccess(data.message);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π
      if (data.newBalance !== undefined) {
        setBankBalance(data.newBalance);
        if (onBankBalanceChange) {
          onBankBalanceChange(data.newBalance);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏
        setTransferHistory(prev => prev.map(t => 
          t.status === 'pending' ? { ...t, status: 'completed', balanceAfter: data.newBalance } : t
        ));
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    const handleBankTransferError = (data) => {
      console.error('‚ùå [BankModal] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', data);
      setError(data.message);
      
      // –£–¥–∞–ª—è–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      setTransferHistory(prev => prev.filter(t => t.status !== 'pending'));
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const handleBankTransferReceived = (data) => {
      console.log('üí∞ [BankModal] –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥:', data);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏
      const receivedTransaction = {
        id: `received_${Date.now()}`,
        type: 'received',
        amount: data.amount,
        description: `–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç ${data.fromPlayer}`,
        timestamp: new Date().toLocaleString('ru-RU'),
        from: data.fromPlayer,
        to: getCurrentPlayer()?.username || playerData?.username || '–ò–≥—Ä–æ–∫',
        status: 'completed',
        balanceAfter: bankBalance + data.amount
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const newBalance = bankBalance + data.amount;
      setBankBalance(newBalance);
      
      if (onBankBalanceChange) {
        onBankBalanceChange(newBalance);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const updatedHistory = [receivedTransaction, ...transferHistory];
      setTransferHistory(updatedHistory);
      saveTransactionHistory(updatedHistory);

      setSuccess(`–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ $${data.amount.toLocaleString()} –æ—Ç ${data.fromPlayer}!`);
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    socket.on('bankTransferSuccess', handleBankTransferSuccess);
    socket.on('bankTransferError', handleBankTransferError);
    socket.on('bankTransferReceived', handleBankTransferReceived);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      socket.off('bankTransferSuccess', handleBankTransferSuccess);
      socket.off('bankTransferError', handleBankTransferError);
      socket.off('bankTransferReceived', handleBankTransferReceived);
    };
  }, [socket, isOpen, bankBalance, onBankBalanceChange, transferHistory, saveTransactionHistory, getCurrentPlayer, playerData?.username]);



  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ localStorage
  const saveTransactionHistory = useCallback((history) => {
    try {
      if (socket?.id && roomId) {
        localStorage.setItem(`bank_history_${socket.id}_${roomId}`, JSON.stringify(history));
        console.log('üíæ [BankModal] –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', history.length, '–∑–∞–ø–∏—Å–µ–π');
      }
    } catch (error) {
      console.error('‚ùå [BankModal] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  }, [socket?.id, roomId]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
  const handleTransfer = useCallback(async () => {
    if (!transferAmount || !selectedRecipient || isTransferring) return;
    
    const amount = parseFloat(transferAmount);
    if (amount <= 0) {
      setError('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è');
      return;
    }
    
    if (amount > bankBalance) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É');
      return;
    }

    const recipient = getRecipients().find(p => p.username === selectedRecipient);
    if (!recipient) {
      setError('–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    setIsTransferring(true);
    setError('');

    try {
      console.log('üí∏ [BankModal] –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥:', { amount, recipient: selectedRecipient });
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = {
        id: `transfer_${Date.now()}`,
        type: 'transfer',
        amount: amount,
        description: `–ü–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É ${selectedRecipient}`,
        timestamp: new Date().toLocaleString('ru-RU'),
        from: getCurrentPlayer()?.username || playerData?.username || '–ò–≥—Ä–æ–∫',
        to: selectedRecipient,
        status: 'pending',
        balanceAfter: bankBalance - amount
      };

      // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–æ - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
      const updatedHistory = [transaction, ...transferHistory];
      setTransferHistory(updatedHistory);
      saveTransactionHistory(updatedHistory);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å WebSocket)
      if (socket && roomId) {
        const currentPlayer = getCurrentPlayer();
        socket.emit('bankTransfer', {
          roomId,
          playerId: currentPlayer?.id || playerData?.id,
          recipient: selectedRecipient,
          amount: amount,
          transactionId: transaction.id
        });
      }

      // –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ socket —Å–æ–±—ã—Ç–∏–µ

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setTransferAmount('');
      setSelectedRecipient('');

    } catch (error) {
      console.error('‚ùå [BankModal] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤');
      
      // –£–¥–∞–ª—è–µ–º pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      setTransferHistory(prev => prev.filter(t => t.status !== 'pending'));
    } finally {
      setIsTransferring(false);
    }
  }, [transferAmount, selectedRecipient, isTransferring, bankBalance, getRecipients, getCurrentPlayer, playerData?.username, transferHistory, saveTransactionHistory, socket, roomId]);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
  const resetTransferForm = useCallback(() => {
    setTransferAmount('');
    setSelectedRecipient('');
    setError('');
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const getTransactionIcon = (type) => {
    switch (type) {
      case 'initial': return <AccountBalanceWallet />;
      case 'transfer': return <Send />;
      case 'salary': return <AttachMoney />;
      case 'expense': return <CreditCard />;
      case 'credit': return <CreditCard />;
      case 'payday': return <TrendingUp />;
      default: return <History />;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const getTransactionColor = (type) => {
    switch (type) {
      case 'initial': return '#10B981';
      case 'transfer': return '#8B5CF6';
      case 'salary': return '#EAB308';
      case 'expense': return '#EF4444';
      case 'credit': return '#F59E0B';
      case 'payday': return '#06B6D4';
      default: return '#6B7280';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const getTransactionStats = () => {
    const totalTransfers = transferHistory.filter(t => t.type === 'transfer').length;
    const totalAmount = transferHistory
      .filter(t => t.type === 'transfer')
      .reduce((sum, t) => sum + t.amount, 0);
    
    return { totalTransfers, totalAmount };
  };

  const stats = getTransactionStats();

  return (
    <>
      <Dialog
        open={isOpen}
        onClose={onClose}
        maxWidth="lg"
        fullWidth
        fullScreen={isMobile}
        PaperProps={{
          sx: {
            background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 100%)',
            borderRadius: isMobile ? 0 : '16px',
            border: '1px solid rgba(255, 255, 255, 0.1)',
            maxHeight: '95vh'
          }
        }}
      >
        <DialogTitle sx={{ 
          color: 'white', 
          textAlign: 'center',
          borderBottom: '1px solid rgba(255, 255, 255, 0.1)',
          pb: 2,
          position: 'relative',
          background: 'linear-gradient(135deg, #1e293b 0%, #334155 100%)'
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 1 }}>
            <AccountBalance sx={{ fontSize: '1.5rem', color: '#10B981' }} />
            <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
              –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            </Typography>
          </Box>
          <IconButton
            onClick={onClose}
            sx={{
              position: 'absolute',
              right: 16,
              top: 16,
              color: 'rgba(255, 255, 255, 0.7)',
              '&:hover': {
                color: 'white',
                backgroundColor: 'rgba(255, 255, 255, 0.1)'
              }
            }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        
        <DialogContent sx={{ p: 3 }}>
          <Grid container spacing={3}>
            
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <Grid item xs={12} md={4}>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                
                {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –±–∞–ª–∞–Ω—Å–∞ */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <Card sx={{
                    background: 'linear-gradient(135deg, #10B981 0%, #059669 100%)',
                    color: 'white',
                    borderRadius: '16px',
                    position: 'relative',
                    overflow: 'hidden',
                    '&::before': {
                      content: '""',
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      right: 0,
                      height: '2px',
                      background: 'linear-gradient(90deg, #10B981, #059669, #10B981)',
                      animation: 'shimmer 2s infinite'
                    }
                  }}>
                    <CardContent sx={{ p: 3 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                        <Typography variant="h6" sx={{ fontWeight: 'bold', display: 'flex', alignItems: 'center', gap: 1 }}>
                          <AccountBalanceWallet />
                          –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                        </Typography>
                        <Chip 
                          label="–ê–∫—Ç–∏–≤–µ–Ω" 
                          size="small" 
                          sx={{ 
                            backgroundColor: 'rgba(255, 255, 255, 0.2)',
                            color: 'white',
                            fontWeight: 'bold'
                          }} 
                        />
                      </Box>
                      <Typography variant="h3" sx={{ 
                        fontWeight: 'bold',
                        textShadow: '0 0 20px rgba(255, 255, 255, 0.3)',
                        mb: 1
                      }}>
                        ${bankBalance.toLocaleString()}
                      </Typography>
                      <Typography variant="body2" sx={{ opacity: 0.9 }}>
                        –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
                      </Typography>
                    </CardContent>
                  </Card>
                </motion.div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.1 }}
                >
                  <Card sx={{
                    background: 'rgba(255, 255, 255, 0.05)',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '12px'
                  }}>
                    <CardContent sx={{ p: 2 }}>
                      <Typography variant="h6" sx={{ color: 'white', mb: 2, fontWeight: 'bold' }}>
                        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                      </Typography>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                            –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#8B5CF6', fontWeight: 'bold' }}>
                            {stats.totalTransfers}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                            –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#8B5CF6', fontWeight: 'bold' }}>
                            ${stats.totalAmount.toLocaleString()}
                          </Typography>
                        </Box>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                          <Typography variant="body2" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                            –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#10B981', fontWeight: 'bold' }}>
                            {transferHistory.length}
                          </Typography>
                        </Box>
                      </Box>
                    </CardContent>
                  </Card>
                </motion.div>

                {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <Card sx={{
                    background: 'rgba(255, 255, 255, 0.05)',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '12px'
                  }}>
                    <CardContent sx={{ p: 2 }}>
                      <Typography variant="h6" sx={{ color: 'white', mb: 2, fontWeight: 'bold' }}>
                        ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                      </Typography>
                      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                        <Button
                          variant="outlined"
                          startIcon={<Send />}
                          onClick={() => {
                            const transferSection = document.getElementById('transfer-section');
                            if (transferSection) {
                              transferSection.scrollIntoView({ behavior: 'smooth' });
                            }
                          }}
                          sx={{
                            borderColor: 'rgba(139, 92, 246, 0.5)',
                            color: '#8B5CF6',
                            '&:hover': {
                              borderColor: '#8B5CF6',
                              backgroundColor: 'rgba(139, 92, 246, 0.1)'
                            }
                          }}
                        >
                          –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥
                        </Button>
                        <Button
                          variant="outlined"
                          startIcon={<History />}
                          onClick={() => {
                            const historySection = document.getElementById('history-section');
                            if (historySection) {
                              historySection.scrollIntoView({ behavior: 'smooth' });
                            }
                          }}
                          sx={{
                            borderColor: 'rgba(59, 130, 246, 0.5)',
                            color: '#3B82F6',
                            '&:hover': {
                              borderColor: '#3B82F6',
                              backgroundColor: 'rgba(59, 130, 246, 0.1)'
                            }
                          }}
                        >
                          –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                        </Button>
                      </Box>
                    </CardContent>
                  </Card>
                </motion.div>
              </Box>
            </Grid>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û–ø–µ—Ä–∞—Ü–∏–∏ */}
            <Grid item xs={12} md={8}>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                
                {/* –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ */}
                <motion.div
                  id="transfer-section"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5 }}
                >
                  <Card sx={{
                    background: 'rgba(255, 255, 255, 0.05)',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '16px'
                  }}>
                    <CardContent sx={{ p: 3 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 3 }}>
                        <Send sx={{ color: '#8B5CF6' }} />
                        <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                          –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
                        </Typography>
                      </Box>
                      
                      {error && (
                        <Alert severity="error" sx={{ mb: 2 }}>
                          {error}
                        </Alert>
                      )}
                      
                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={6}>
                          <FormControl fullWidth>
                            <InputLabel sx={{ 
                              color: '#1e293b',
                              backgroundColor: 'rgba(255, 255, 255, 0.95)',
                              px: 1,
                              borderRadius: '4px'
                            }}>
                              –ü–æ–ª—É—á–∞—Ç–µ–ª—å
                            </InputLabel>
                            <Select
                              value={selectedRecipient}
                              onChange={(e) => setSelectedRecipient(e.target.value)}
                              sx={{
                                color: '#1e293b',
                                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                '& .MuiOutlinedInput-notchedOutline': {
                                  borderColor: 'rgba(30, 41, 59, 0.3)'
                                },
                                '&:hover .MuiOutlinedInput-notchedOutline': {
                                  borderColor: '#8B5CF6'
                                },
                                '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                                  borderColor: '#8B5CF6'
                                },
                                '& .MuiSvgIcon-root': {
                                  color: '#1e293b'
                                }
                              }}
                            >
                              {getRecipients().map((player) => (
                                <MenuItem key={player.socketId} value={player.username}>
                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                    <Avatar sx={{ width: 24, height: 24, fontSize: '0.8rem', backgroundColor: '#8B5CF6' }}>
                                      {player.username.charAt(0).toUpperCase()}
                                    </Avatar>
                                    <Typography sx={{ color: '#1e293b', fontWeight: 'bold' }}>{player.username}</Typography>
                                    {player.profession && (
                                      <Chip 
                                        label={player.profession.name || '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è'} 
                                        size="small" 
                                        sx={{ 
                                          backgroundColor: 'rgba(139, 92, 246, 0.2)',
                                          color: '#8B5CF6',
                                          fontSize: '0.7rem',
                                          fontWeight: 'bold'
                                        }} 
                                      />
                                    )}
                                  </Box>
                                </MenuItem>
                              ))}
                            </Select>
                          </FormControl>
                        </Grid>
                        
                        <Grid item xs={12} sm={6}>
                          <TextField
                            fullWidth
                            label="–°—É–º–º–∞ ($)"
                            type="number"
                            value={transferAmount}
                            onChange={(e) => setTransferAmount(e.target.value)}
                            inputProps={{ min: 0, max: bankBalance, step: 1 }}
                            sx={{
                              '& .MuiOutlinedInput-root': {
                                color: '#1e293b',
                                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                '& fieldset': {
                                  borderColor: 'rgba(30, 41, 59, 0.3)'
                                },
                                '&:hover fieldset': {
                                  borderColor: '#8B5CF6'
                                },
                                '&.Mui-focused fieldset': {
                                  borderColor: '#8B5CF6'
                                }
                              },
                              '& .MuiInputLabel-root': {
                                color: '#1e293b',
                                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                px: 1,
                                borderRadius: '4px',
                                '&.Mui-focused': {
                                  color: '#8B5CF6'
                                }
                              }
                            }}
                          />
                        </Grid>
                        
                        <Grid item xs={12}>
                          <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>
                            <Button
                              variant="contained"
                              onClick={handleTransfer}
                              disabled={!transferAmount || !selectedRecipient || isTransferring || parseFloat(transferAmount) <= 0}
                              startIcon={<Send />}
                              sx={{
                                flex: 1,
                                background: 'linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%)',
                                color: 'white',
                                py: 1.5,
                                borderRadius: '12px',
                                fontSize: '1rem',
                                fontWeight: 'bold',
                                textTransform: 'none',
                                boxShadow: '0 4px 15px rgba(139, 92, 246, 0.3)',
                                '&:hover': {
                                  background: 'linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%)',
                                  transform: 'translateY(-2px)',
                                  boxShadow: '0 6px 20px rgba(139, 92, 246, 0.4)'
                                },
                                '&:disabled': {
                                  background: 'rgba(139, 92, 246, 0.3)',
                                  color: 'rgba(255, 255, 255, 0.5)',
                                  transform: 'none',
                                  boxShadow: 'none'
                                },
                                transition: 'all 0.2s ease-in-out'
                              }}
                            >
                              {isTransferring ? '‚è≥ –ü–µ—Ä–µ–≤–æ–¥...' : 'üí∏ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'}
                            </Button>
                            <Button
                              variant="outlined"
                              onClick={resetTransferForm}
                              sx={{
                                borderColor: 'rgba(107, 114, 128, 0.5)',
                                color: 'rgba(107, 114, 128, 0.8)',
                                py: 1.5,
                                borderRadius: '12px',
                                fontSize: '1rem',
                                fontWeight: 'bold',
                                textTransform: 'none',
                                '&:hover': {
                                  borderColor: 'rgba(107, 114, 128, 0.8)',
                                  backgroundColor: 'rgba(107, 114, 128, 0.1)',
                                  transform: 'translateY(-1px)'
                                },
                                transition: 'all 0.2s ease-in-out'
                              }}
                            >
                              üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                            </Button>
                          </Box>
                        </Grid>
                      </Grid>
                    </CardContent>
                  </Card>
                </motion.div>

                {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
                <motion.div
                  id="history-section"
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.1 }}
                >
                  <Card sx={{
                    background: 'rgba(255, 255, 255, 0.05)',
                    border: '1px solid rgba(255, 255, 255, 0.1)',
                    borderRadius: '16px'
                  }}>
                    <CardContent sx={{ p: 3 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <History sx={{ color: '#3B82F6' }} />
                          <Typography variant="h6" sx={{ color: 'white', fontWeight: 'bold' }}>
                            –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
                          </Typography>
                        </Box>
                        <Chip 
                          label={transferHistory.length} 
                          sx={{ 
                            backgroundColor: 'rgba(59, 130, 246, 0.2)',
                            color: '#3B82F6',
                            fontWeight: 'bold'
                          }} 
                        />
                      </Box>
                      
                      {transferHistory.length === 0 ? (
                        <Box sx={{ 
                          textAlign: 'center', 
                          py: 4,
                          color: 'rgba(255, 255, 255, 0.5)'
                        }}>
                          <Typography variant="body1" sx={{ fontSize: '1.1rem' }}>
                            üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç
                          </Typography>
                          <Typography variant="body2" sx={{ mt: 1, opacity: 0.7 }}>
                            –í—Å–µ –≤–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å
                          </Typography>
                        </Box>
                      ) : (
                        <List sx={{ 
                          maxHeight: '400px', 
                          overflow: 'auto',
                          '&::-webkit-scrollbar': {
                            width: '6px',
                          },
                          '&::-webkit-scrollbar-track': {
                            background: 'rgba(255, 255, 255, 0.1)',
                            borderRadius: '3px',
                          },
                          '&::-webkit-scrollbar-thumb': {
                            background: 'rgba(59, 130, 246, 0.5)',
                            borderRadius: '3px',
                          },
                          '&::-webkit-scrollbar-thumb:hover': {
                            background: 'rgba(59, 130, 246, 0.7)',
                          }
                        }}>
                          {transferHistory.map((transaction, index) => (
                            <motion.div
                              key={transaction.id}
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ duration: 0.3, delay: index * 0.05 }}
                            >
                              <ListItem
                                sx={{
                                  background: index % 2 === 0 ? 'rgba(255, 255, 255, 0.08)' : 'rgba(255, 255, 255, 0.12)',
                                  borderRadius: '12px',
                                  mb: 1,
                                  border: '1px solid rgba(255, 255, 255, 0.2)',
                                  transition: 'all 0.2s ease',
                                  '&:hover': {
                                    background: 'rgba(255, 255, 255, 0.15)',
                                    transform: 'translateY(-2px)',
                                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',
                                    border: '1px solid rgba(139, 92, 246, 0.3)'
                                  }
                                }}
                              >
                                <ListItemIcon sx={{ minWidth: 40 }}>
                                  <Box sx={{ 
                                    color: getTransactionColor(transaction.type),
                                    display: 'flex',
                                    alignItems: 'center',
                                    justifyContent: 'center',
                                    width: 32,
                                    height: 32,
                                    borderRadius: '50%',
                                    backgroundColor: `${getTransactionColor(transaction.type)}20`
                                  }}>
                                    {getTransactionIcon(transaction.type)}
                                  </Box>
                                </ListItemIcon>
                                <ListItemText
                                  primary={
                                    <Typography sx={{ 
                                      color: '#ffffff', 
                                      fontWeight: 'bold',
                                      fontSize: '0.95rem',
                                      textShadow: '0 1px 2px rgba(0, 0, 0, 0.5)'
                                    }}>
                                      {transaction.type === 'initial' ? '–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å' :
                                       transaction.type === 'transfer' ? `–ü–µ—Ä–µ–≤–æ–¥ ${transaction.to}` :
                                       transaction.type === 'salary' ? '–ó–∞—Ä–ø–ª–∞—Ç–∞' :
                                       transaction.type === 'payday' ? 'PAYDAY' :
                                       transaction.description}
                                    </Typography>
                                  }
                                  secondary={
                                    <Box>
                                      <Typography sx={{ 
                                        color: 'rgba(255, 255, 255, 0.8)', 
                                        fontSize: '0.8rem',
                                        mb: 0.5,
                                        textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)'
                                      }}>
                                        {transaction.from} ‚Üí {transaction.to}
                                      </Typography>
                                      <Typography sx={{ 
                                        color: 'rgba(255, 255, 255, 0.7)', 
                                        fontSize: '0.75rem',
                                        fontStyle: 'italic',
                                        textShadow: '0 1px 2px rgba(0, 0, 0, 0.3)'
                                      }}>
                                        {transaction.timestamp}
                                      </Typography>
                                    </Box>
                                  }
                                />
                                <ListItemSecondaryAction>
                                  <Box sx={{ textAlign: 'right' }}>
                                    <Typography sx={{ 
                                      color: getTransactionColor(transaction.type),
                                      fontWeight: 'bold',
                                      fontSize: '1.1rem'
                                    }}>
                                      {transaction.type === 'transfer' ? '-' : '+'}${transaction.amount.toLocaleString()}
                                    </Typography>
                                    <Chip 
                                      label={transaction.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 
                                            transaction.status === 'pending' ? '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ' : '–û—à–∏–±–∫–∞'}
                                      size="small"
                                      sx={{ 
                                        mt: 0.5,
                                        backgroundColor: transaction.status === 'completed' ? 'rgba(16, 185, 129, 0.2)' :
                                                      transaction.status === 'pending' ? 'rgba(245, 158, 11, 0.2)' :
                                                      'rgba(239, 68, 68, 0.2)',
                                        color: transaction.status === 'completed' ? '#10B981' :
                                               transaction.status === 'pending' ? '#F59E0B' : '#EF4444',
                                        fontSize: '0.7rem'
                                      }}
                                    />
                                  </Box>
                                </ListItemSecondaryAction>
                              </ListItem>
                            </motion.div>
                          ))}
                        </List>
                      )}
                    </CardContent>
                  </Card>
                </motion.div>
              </Box>
            </Grid>
          </Grid>
        </DialogContent>
      </Dialog>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      <Snackbar
        open={!!error}
        autoHideDuration={5000}
        onClose={() => setError('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={() => setError('')} severity="error">
          {error}
        </Alert>
      </Snackbar>

      <Snackbar
        open={!!success}
        autoHideDuration={4000}
        onClose={() => setSuccess('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={() => setSuccess('')} severity="success">
          {success}
        </Alert>
      </Snackbar>
    </>
  );
};

export default BankModal;