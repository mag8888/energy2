#!/usr/bin/env node

/**
 * üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –í–°–ï–• –ú–û–î–£–õ–ï–ô –ò–ì–†–´
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. ‚úÖ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * 2. ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π (useSocketEvents)
 * 3. ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (useGameState)
 * 4. ‚úÖ –õ–æ–≥–∏–∫—É –∏–≥—Ä—ã (useGameLogic)
 * 5. ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (GameField, GameControls, GameBoard)
 * 6. ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–∞–π–º–µ—Ä–∞
 * 7. ‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
 * 8. ‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–±–∏–∫–∞
 */

const { io } = require('socket.io-client');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
const TEST_CONFIG = {
  serverUrl: 'http://localhost:5000',
  roomId: 'test-room-' + Date.now(),
  testPlayers: [
    { username: 'test1', email: 'test1@cashflow.com' },
    { username: 'test2', email: 'test2@cashflow.com' },
    { username: 'test3', email: 'test3@cashflow.com' }
  ],
  timeout: 10000
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const COLORS = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestRunner {
  constructor() {
    this.tests = [];
    this.results = {
      passed: 0,
      failed: 0,
      total: 0
    };
    this.socket = null;
    this.testStartTime = Date.now();
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
  test(name, testFn) {
    this.tests.push({ name, testFn });
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  log(message, color = 'reset') {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    console.log(`${COLORS[color]}[${timestamp}] ${message}${COLORS.reset}`);
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAll() {
    this.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê –ú–û–î–£–õ–ï–ô', 'bright');
    this.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.tests.length}`, 'cyan');
    this.log(`üåê –°–µ—Ä–≤–µ—Ä: ${TEST_CONFIG.serverUrl}`, 'cyan');
    this.log(`üè† –ö–æ–º–Ω–∞—Ç–∞: ${TEST_CONFIG.roomId}`, 'cyan');
    this.log('‚îÄ'.repeat(60), 'blue');

    for (let i = 0; i < this.tests.length; i++) {
      const test = this.tests[i];
      this.log(`\nüß™ –¢–µ—Å—Ç ${i + 1}/${this.tests.length}: ${test.name}`, 'yellow');
      
      try {
        await test.testFn();
        this.log(`‚úÖ ${test.name} - –ü–†–û–ô–î–ï–ù`, 'green');
        this.results.passed++;
      } catch (error) {
        this.log(`‚ùå ${test.name} - –ü–†–û–í–ê–õ–ï–ù`, 'red');
        this.log(`   –û—à–∏–±–∫–∞: ${error.message}`, 'red');
        this.results.failed++;
      }
      
      this.results.total++;
    }

    this.showResults();
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  showResults() {
    const duration = Date.now() - this.testStartTime;
    this.log('\n' + '‚îÄ'.repeat(60), 'blue');
    this.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
    this.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'cyan');
    this.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}`, 'green');
    this.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}`, 'red');
    this.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.results.passed}/${this.results.total}`, 'bright');
    
    if (this.results.failed === 0) {
      this.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!', 'green');
    } else {
      this.log('‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´', 'yellow');
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä
const runner = new TestRunner();

// üß™ –¢–ï–°–¢ 1: Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
runner.test('Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      clearTimeout(timeout);
      runner.log('üîå Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
runner.test('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É...', 'cyan');
      socket.emit('createRoom', { 
        roomId: TEST_CONFIG.roomId, 
        maxPlayers: 4 
      });
    });

    socket.on('roomCreated', (data) => {
      clearTimeout(timeout);
      runner.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${data.roomId}`, 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
runner.test('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('joinedRoom', (data) => {
      runner.log(`üéÆ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
runner.test('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...', 'cyan');
      socket.emit('getPlayers', TEST_CONFIG.roomId);
    });

    socket.on('playersList', (players) => {
      clearTimeout(timeout);
      runner.log(`üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`, 'green');
      if (Array.isArray(players)) {
        runner.log('‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 5: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
runner.test('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã...', 'cyan');
      socket.emit('getRoom', TEST_CONFIG.roomId);
    });

    socket.on('roomData', (data) => {
      clearTimeout(timeout);
      runner.log(`üè† –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: ${data.roomId}`, 'green');
      if (data.roomId && data.maxPlayers) {
        runner.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 6: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
runner.test('–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É...', 'cyan');
      socket.emit('startGame', TEST_CONFIG.roomId);
    });

    socket.on('gameStarted', (data) => {
      clearTimeout(timeout);
      runner.log(`üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 7: –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞
runner.test('–¢–∞–π–º–µ—Ä —Ö–æ–¥–∞', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞'));
    }, TEST_CONFIG.timeout);

    let timerEvents = 0;
    const requiredEvents = 3; // –ú–∏–Ω–∏–º—É–º 3 —Å–æ–±—ã—Ç–∏—è —Ç–∞–π–º–µ—Ä–∞

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('joinedRoom', () => {
      runner.log('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ, –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–∞–π–º–µ—Ä–∞...', 'cyan');
    });

    socket.on('turnTimerUpdate', (data) => {
      timerEvents++;
      runner.log(`‚è∞ –°–æ–±—ã—Ç–∏–µ —Ç–∞–π–º–µ—Ä–∞ ${timerEvents}: ${data.remaining}s`, 'cyan');
      
      if (timerEvents >= requiredEvents) {
        clearTimeout(timeout);
        runner.log('‚úÖ –¢–∞–π–º–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
        socket.disconnect();
        resolve();
      }
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 8: –°–º–µ–Ω–∞ —Ö–æ–¥–∞
runner.test('–°–º–µ–Ω–∞ —Ö–æ–¥–∞', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã —Ö–æ–¥–∞'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Ö–æ–¥–∞...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('turnChanged', (data) => {
      clearTimeout(timeout);
      runner.log(`üîÑ –•–æ–¥ —Å–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∏–≥—Ä–æ–∫–∞: ${data.playerId}`, 'green');
      runner.log('‚úÖ –°–º–µ–Ω–∞ —Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 9: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–±–∏–∫–∞
runner.test('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–±–∏–∫–∞', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É–±–∏–∫–∞'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫—É–±–∏–∫...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('joinedRoom', () => {
      runner.log('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ, —Å–∏–º—É–ª–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞...', 'cyan');
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
      socket.emit('rollDice', { roomId: TEST_CONFIG.roomId });
    });

    socket.on('diceRolled', (data) => {
      clearTimeout(timeout);
      runner.log(`üé≤ –ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω: ${data.value}`, 'green');
      runner.log('‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫—É–±–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 10: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
runner.test('–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('playersUpdate', (players) => {
      clearTimeout(timeout);
      runner.log(`üë• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`, 'green');
      if (Array.isArray(players)) {
        runner.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
runner.test('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã...', 'cyan');
      socket.emit('getGameState', TEST_CONFIG.roomId);
    });

    socket.on('gameState', (state) => {
      clearTimeout(timeout);
      runner.log(`üéÆ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã`, 'green');
      if (state && typeof state === 'object') {
        runner.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
runner.test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...', 'cyan');
      socket.emit('getProfessions', TEST_CONFIG.roomId);
    });

    socket.on('professionsList', (professions) => {
      clearTimeout(timeout);
      runner.log(`üíº –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: ${professions.length}`, 'green');
      if (Array.isArray(professions) && professions.length > 0) {
        runner.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç —Å–¥–µ–ª–æ–∫
runner.test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç —Å–¥–µ–ª–æ–∫', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç —Å–¥–µ–ª–æ–∫'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä—Ç—ã —Å–¥–µ–ª–æ–∫...', 'cyan');
      socket.emit('getDealCards', TEST_CONFIG.roomId);
    });

    socket.on('dealCards', (cards) => {
      clearTimeout(timeout);
      runner.log(`üÉè –ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ä—Ç—ã —Å–¥–µ–ª–æ–∫: ${cards.length}`, 'green');
      if (Array.isArray(cards) && cards.length > 0) {
        runner.log('‚úÖ –ö–∞—Ä—Ç—ã —Å–¥–µ–ª–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —Å–¥–µ–ª–æ–∫'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
runner.test('WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏'));
    }, TEST_CONFIG.timeout);

    let events = 0;
    const requiredEvents = 5;

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å...', 'cyan');
      socket.emit('joinRoom', TEST_CONFIG.roomId);
    });

    socket.on('joinedRoom', () => {
      runner.log('üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ, –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è...', 'cyan');
    });

    // –°–ª—É—à–∞–µ–º –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    socket.onAny((eventName, data) => {
      events++;
      runner.log(`üì° –°–æ–±—ã—Ç–∏–µ ${events}: ${eventName}`, 'cyan');
      
      if (events >= requiredEvents) {
        clearTimeout(timeout);
        runner.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ', 'green');
        socket.disconnect();
        resolve();
      }
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// üß™ –¢–ï–°–¢ 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
runner.test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫', async () => {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'));
    }, TEST_CONFIG.timeout);

    socket.on('connect', () => {
      runner.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...', 'cyan');
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
      socket.emit('invalidEvent', { invalid: 'data' });
    });

    socket.on('error', (error) => {
      clearTimeout(timeout);
      runner.log(`‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${error.message}`, 'yellow');
      runner.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
});

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function main() {
  try {
    await runner.runAll();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
async function checkServer() {
  return new Promise((resolve, reject) => {
    const socket = io(TEST_CONFIG.serverUrl);
    
    const timeout = setTimeout(() => {
      reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
    }, 5000);

    socket.on('connect', () => {
      clearTimeout(timeout);
      runner.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', () => {
      clearTimeout(timeout);
      reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if (require.main === module) {
  checkServer()
    .then(() => main())
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server');
      process.exit(1);
    });
}

module.exports = { TestRunner, runner };

