#!/usr/bin/env node

const io = require('socket.io-client');

console.log('üîç [PROBLEM-DETECTOR] Detecting game launch problems...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
async function detectGameProblems() {
  console.log('üîå [PROBLEM-DETECTOR] Connecting to WebSocket server...');
  
  const socket = io('http://localhost:5000', {
    transports: ['websocket'],
    timeout: 10000
  });

  return new Promise((resolve) => {
    let testResults = {
      connection: false,
      roomJoin: false,
      readyState: false,
      gameStart: false,
      gameEvents: [],
      errors: []
    };
    
    let currentRoomId = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è roomId

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    socket.on('connect', () => {
      console.log('‚úÖ [PROBLEM-DETECTOR] Connected to server');
      testResults.connection = true;
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      const testPlayer = {
        id: `detector_${Date.now()}`,
        username: 'ProblemDetector',
        email: 'detector@test.com',
        displayId: 'DET001'
      };
      
      console.log('üéØ [PROBLEM-DETECTOR] Creating new room for testing...');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const roomId = `test_room_${Date.now()}`;
      const maxPlayers = 2;
      const password = null;
      const timerHours = 1;
      const roomName = 'Test Room for Problem Detection';
      
      console.log('üéØ [PROBLEM-DETECTOR] Creating room with params:', { roomId, maxPlayers, roomName });
      
      socket.emit('createRoom', roomId, maxPlayers, password, timerHours, roomName);
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
      socket.once('roomCreated', (roomData) => {
        console.log('‚úÖ [PROBLEM-DETECTOR] Room created:', roomData.roomId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º roomId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        currentRoomId = roomData.roomId;
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
        console.log('üéØ [PROBLEM-DETECTOR] Joining created room...');
        socket.emit('joinRoom', roomData.roomId, testPlayer);
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersUpdate', (players) => {
      console.log('üë• [PROBLEM-DETECTOR] Players update received:', players.length, 'players');
      testResults.gameEvents.push(`playersUpdate: ${players.length} players`);
      
      if (players.length >= 1) {
        console.log('‚úÖ [PROBLEM-DETECTOR] Room joined successfully');
        testResults.roomJoin = true;
        
                 // –û—Ç–º–µ—á–∞–µ–º—Å—è –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π
         console.log('üéØ [PROBLEM-DETECTOR] Marking as ready...');
         socket.emit('setReady', currentRoomId, true);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomUpdated', (roomData) => {
      console.log('üè† [PROBLEM-DETECTOR] Room updated:', roomData.status);
      testResults.gameEvents.push(`roomUpdated: ${roomData.status}`);
      
      if (roomData.status === 'waiting') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –∏–≥—Ä–æ–∫–∏
        const readyPlayers = roomData.currentPlayers.filter(p => p.ready);
        console.log(`üéØ [PROBLEM-DETECTOR] Ready players: ${readyPlayers.length}/${roomData.currentPlayers.length}`);
        
        if (readyPlayers.length >= 1) {
          console.log('‚úÖ [PROBLEM-DETECTOR] Player is ready!');
          testResults.readyState = true;
          
          // –ñ–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
          console.log('‚è≥ [PROBLEM-DETECTOR] Waiting for second player or attempting solo start...');
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
          setTimeout(() => {
                         console.log('üöÄ [PROBLEM-DETECTOR] Attempting to start game...');
             socket.emit('startGame', currentRoomId, (success, error) => {
              if (success) {
                console.log('‚úÖ [PROBLEM-DETECTOR] Game start acknowledged by server');
                testResults.gameStart = true;
                testResults.gameEvents.push('startGame: success');
              } else {
                console.log('‚ùå [PROBLEM-DETECTOR] Game start failed:', error);
                testResults.errors.push(`Game start failed: ${error}`);
                testResults.gameEvents.push(`startGame: failed - ${error}`);
              }
              
              // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
              setTimeout(() => {
                socket.disconnect();
                resolve(testResults);
              }, 1000);
            });
          }, 3000);
        }
      } else if (roomData.status === 'started') {
        console.log('üéâ [PROBLEM-DETECTOR] Game started successfully!');
        testResults.gameStart = true;
        testResults.gameEvents.push('roomUpdated: started');
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        setTimeout(() => {
          socket.disconnect();
          resolve(testResults);
        }, 1000);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    socket.on('gameStarted', (gameData) => {
      console.log('üéÆ [PROBLEM-DETECTOR] Game started event received:', gameData);
      testResults.gameEvents.push(`gameStarted: ${JSON.stringify(gameData)}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
    socket.on('roomData', (roomData) => {
      console.log('üìä [PROBLEM-DETECTOR] Room data received:', roomData);
      testResults.gameEvents.push(`roomData: ${roomData.status}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    socket.on('playersList', (players) => {
      console.log('üë• [PROBLEM-DETECTOR] Players list received:', players.length, 'players');
      testResults.gameEvents.push(`playersList: ${players.length} players`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ö–æ–¥–∞
    socket.on('turnChanged', (turnData) => {
      console.log('üîÑ [PROBLEM-DETECTOR] Turn changed:', turnData);
      testResults.gameEvents.push(`turnChanged: ${JSON.stringify(turnData)}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    socket.on('error', (error) => {
      console.log('‚ùå [PROBLEM-DETECTOR] Socket error:', error);
      testResults.errors.push(`Socket error: ${error}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
      console.log('üîå [PROBLEM-DETECTOR] Disconnected from server');
    });

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    setTimeout(() => {
      console.log('‚è∞ [PROBLEM-DETECTOR] Test timeout reached');
      socket.disconnect();
      resolve(testResults);
    }, 20000);
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç [PROBLEM-DETECTOR] ==========================================');
  console.log('üîç [PROBLEM-DETECTOR] GAME PROBLEM DETECTION');
  console.log('üîç [PROBLEM-DETECTOR] ==========================================\n');
  
  try {
    const results = await detectGameProblems();
    
    console.log('\nüìä [PROBLEM-DETECTOR] Test Results:');
    console.log(`   - Connection: ${results.connection ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Room Join: ${results.roomJoin ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Ready State: ${results.readyState ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Game Start: ${results.gameStart ? '‚úÖ OK' : '‚ùå FAILED'}`);
    
    console.log('\nüìã [PROBLEM-DETECTOR] Game Events:');
    results.gameEvents.forEach(event => console.log(`   - ${event}`));
    
    if (results.errors.length > 0) {
      console.log('\n‚ùå [PROBLEM-DETECTOR] Errors:');
      results.errors.forEach(error => console.log(`   - ${error}`));
    }
    
    if (results.gameStart) {
      console.log('\nüéâ [PROBLEM-DETECTOR] ==========================================');
      console.log('üéâ [PROBLEM-DETECTOR] GAME START TEST PASSED!');
      console.log('üéâ [PROBLEM-DETECTOR] ==========================================');
      console.log('‚úÖ [PROBLEM-DETECTOR] Game can be started successfully!');
    } else {
      console.log('\n‚ùå [PROBLEM-DETECTOR] ==========================================');
      console.log('‚ùå [PROBLEM-DETECTOR] GAME START TEST FAILED!');
      console.log('‚ùå [PROBLEM-DETECTOR] ==========================================');
      console.log('‚ö†Ô∏è  [PROBLEM-DETECTOR] Game start problems detected');
      console.log('üîç [PROBLEM-DETECTOR] Check the errors and events above');
    }
    
  } catch (error) {
    console.log(`üí• [PROBLEM-DETECTOR] ERROR: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().catch(console.error);
