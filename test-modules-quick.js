#!/usr/bin/env node

/**
 * üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –û–°–ù–û–í–ù–´–• –ú–û–î–£–õ–ï–ô
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * 1. ‚úÖ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 * 2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
 * 3. ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
 * 4. ‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
 * 5. ‚úÖ –¢–∞–π–º–µ—Ä
 */

const { io } = require('socket.io-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:5000';
const ROOM_ID = 'quick-test-' + Date.now();

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
async function runQuickTests() {
  log('üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê –ú–û–î–£–õ–ï–ô', 'cyan');
  log(`üåê –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`, 'cyan');
  log(`üè† –ö–æ–º–Ω–∞—Ç–∞: ${ROOM_ID}`, 'cyan');
  log('‚îÄ'.repeat(50), 'cyan');

  let passed = 0;
  let failed = 0;

  // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
  try {
    log('\nüß™ –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'yellow');
    await testConnection();
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É - –ü–†–û–ô–î–ï–ù', 'green');
    passed++;
  } catch (error) {
    log(`‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`, 'red');
    failed++;
  }

  // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  try {
    log('\nüß™ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã', 'yellow');
    await testRoomCreation();
    log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã - –ü–†–û–ô–î–ï–ù', 'green');
    passed++;
  } catch (error) {
    log(`‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`, 'red');
    failed++;
  }

  // –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  try {
    log('\nüß™ –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ', 'yellow');
    await testJoinRoom();
    log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ - –ü–†–û–ô–î–ï–ù', 'green');
    passed++;
  } catch (error) {
    log(`‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`, 'red');
    failed++;
  }

  // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
  try {
    log('\nüß™ –¢–µ—Å—Ç 4: –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤', 'yellow');
    await testPlayersList();
    log('‚úÖ –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ - –ü–†–û–ô–î–ï–ù', 'green');
    passed++;
  } catch (error) {
    log(`‚ùå –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`, 'red');
    failed++;
  }

  // –¢–µ—Å—Ç 5: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  try {
    log('\nüß™ –¢–µ—Å—Ç 5: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã', 'yellow');
    await testRoomData();
    log('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã - –ü–†–û–ô–î–ï–ù', 'green');
    passed++;
  } catch (error) {
    log(`‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`, 'red');
    failed++;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\n' + '‚îÄ'.repeat(50), 'cyan');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–´–°–¢–†–û–ì–û –¢–ï–°–¢–ê', 'cyan');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`, 'red');
  log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${passed + failed}`, 'cyan');
  
  if (failed === 0) {
    log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!', 'green');
  } else {
    log('‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´', 'yellow');
  }

  return { passed, failed };
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function testConnection() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
    }, 5000);

    socket.on('connect', () => {
      clearTimeout(timeout);
      log('üîå Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
}

// –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
function testRoomCreation() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã'));
    }, 5000);

    socket.on('connect', () => {
      log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É...', 'cyan');
      socket.emit('createRoom', { roomId: ROOM_ID, maxPlayers: 4 });
    });

    socket.on('roomCreated', (data) => {
      clearTimeout(timeout);
      log(`üè† –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${data.roomId}`, 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
}

// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
function testJoinRoom() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ'));
    }, 5000);

    socket.on('connect', () => {
      log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ...', 'cyan');
      socket.emit('joinRoom', ROOM_ID);
    });

    socket.on('joinedRoom', (data) => {
      clearTimeout(timeout);
      log(`üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ: ${data.roomId}`, 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
}

// –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
function testPlayersList() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤'));
    }, 5000);

    socket.on('connect', () => {
      log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...', 'cyan');
      socket.emit('getPlayers', ROOM_ID);
    });

    socket.on('playersList', (players) => {
      clearTimeout(timeout);
      log(`üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: ${players.length}`, 'green');
      if (Array.isArray(players)) {
        log('‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
}

// –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
function testRoomData() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã'));
    }, 5000);

    socket.on('connect', () => {
      log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã...', 'cyan');
      socket.emit('getRoom', ROOM_ID);
    });

    socket.on('roomData', (data) => {
      clearTimeout(timeout);
      log(`üè† –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: ${data.roomId}`, 'green');
      if (data.roomId && data.maxPlayers) {
        log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'green');
      } else {
        reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã'));
      }
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', (error) => {
      clearTimeout(timeout);
      reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`));
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServer() {
  return new Promise((resolve, reject) => {
    const socket = io(SERVER_URL);
    
    const timeout = setTimeout(() => {
      reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç'));
    }, 5000);

    socket.on('connect', () => {
      clearTimeout(timeout);
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
      socket.disconnect();
      resolve();
    });

    socket.on('connect_error', () => {
      clearTimeout(timeout);
      reject(new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await checkServer();
    await runQuickTests();
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server', 'yellow');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { runQuickTests, checkServer };

