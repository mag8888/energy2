const io = require('socket.io-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:5000';
const TEST_ROOM_ID = 'test-order-determination-' + Date.now();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testPlayers = [
  { username: 'Player1', email: 'player1@test.com', displayId: 'P1' },
  { username: 'Player2', email: 'player2@test.com', displayId: 'P2' },
  { username: 'Player3', email: 'player3@test.com', displayId: 'P3' }
];

let sockets = [];
let roomId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testOrderDetermination() {
  console.log('üé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...\n');

  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (let i = 0; i < testPlayers.length; i++) {
      const socket = io(SERVER_URL);
      
      socket.on('connect', () => {
        console.log(`   ‚úÖ –ò–≥—Ä–æ–∫ ${i + 1} –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id}`);
      });
      
      socket.on('error', (error) => {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä–æ–∫–∞ ${i + 1}:`, error);
      });
      
      sockets.push(socket);
      await wait(100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
    }

    // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...');
    const hostSocket = sockets[0];
    
    hostSocket.emit('createRoom', TEST_ROOM_ID, 4, '', 3, '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏');
    
    await new Promise((resolve) => {
      hostSocket.once('roomCreated', (room) => {
        roomId = room.roomId;
        console.log(`   ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`);
        resolve();
      });
    });

    // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫–æ–º–Ω–∞—Ç–µ
    console.log('\n3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫–æ–º–Ω–∞—Ç–µ...');
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      const player = testPlayers[i];
      
      socket.emit('joinRoom', roomId, {
        id: socket.id,
        username: player.username,
        email: player.email,
        displayId: player.displayId
      });
      
      await wait(100);
    }

    // 4. –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤...');
    await wait(1000);

    // 5. –û—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n5Ô∏è‚É£ –û—Ç–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤...');
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      socket.emit('setReady', roomId, true);
      await wait(100);
    }

    // 6. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    console.log('\n6Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...');
    hostSocket.emit('startGame', roomId);
    
    await new Promise((resolve) => {
      hostSocket.once('orderDeterminationStarted', (data) => {
        console.log('   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ—Å—å:', {
          players: data.players.length,
          timer: data.timer,
          phase: data.phase
        });
        resolve();
      });
    });

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏...');
    let playersReceivedEvent = 0;
    
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      
      socket.once('orderDeterminationStarted', (data) => {
        playersReceivedEvent++;
        console.log(`   ‚úÖ –ò–≥—Ä–æ–∫ ${i + 1} –ø–æ–ª—É—á–∏–ª —Å–æ–±—ã—Ç–∏–µ:`, {
          players: data.players.length,
          timer: data.timer,
          phase: data.phase
        });
      });
    }
    
    await wait(1000);
    console.log(`   üìä –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–∏–ª–∏: ${playersReceivedEvent}/${sockets.length} –∏–≥—Ä–æ–∫–æ–≤`);

    // 8. –ò–≥—Ä–æ–∫–∏ –±—Ä–æ—Å–∞—é—Ç –∫—É–±–∏–∫–∏
    console.log('\n8Ô∏è‚É£ –ò–≥—Ä–æ–∫–∏ –±—Ä–æ—Å–∞—é—Ç –∫—É–±–∏–∫–∏...');
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      
      socket.emit('rollDiceForOrder', roomId, socket.id);
      console.log(`   üé≤ –ò–≥—Ä–æ–∫ ${i + 1} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫...`);
      
      await wait(500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±—Ä–æ—Å–∫–∞–º–∏
    }

    // 9. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
    console.log('\n9Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...');
    let orderDeterminationComplete = false;
    
    hostSocket.once('orderDeterminationComplete', (data) => {
      orderDeterminationComplete = true;
      console.log('   ‚úÖ –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', {
        players: data.players.length,
        positions: data.players.map(p => `${p.username}: ${p.position}`)
      });
    });
    
    // –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
    for (let i = 0; i < 120; i++) {
      if (orderDeterminationComplete) break;
      await wait(1000);
      if (i % 10 === 0) {
        console.log(`   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... ${i}s`);
      }
    }

    if (!orderDeterminationComplete) {
      console.log('   ‚ö†Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
    }

    // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
    console.log('\nüîü –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...');
    let gameStarted = false;
    
    hostSocket.once('roomData', (data) => {
      if (data.status === 'started') {
        gameStarted = true;
        console.log('   ‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å:', {
          status: data.status,
          currentTurn: data.currentTurn
        });
      }
    });
    
    await wait(2000);

    if (!gameStarted) {
      console.log('   ‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏');
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
    console.log(`   ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ –ò–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: ${sockets.length}/${testPlayers.length}`);
    console.log(`   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ—Å—å: ${orderDeterminationComplete ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å: ${gameStarted ? '–î–∞' : '–ù–µ—Ç'}`);

    if (roomId && sockets.length === testPlayers.length && orderDeterminationComplete && gameStarted) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!');
    }

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞...');
    for (const socket of sockets) {
      if (socket.connected) {
        socket.disconnect();
      }
    }
    
    // –í—ã—Ö–æ–¥
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...');
testOrderDetermination();
