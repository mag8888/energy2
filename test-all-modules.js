#!/usr/bin/env node

/**
 * üß™ –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢-–†–ê–ù–ù–ï–† –í–°–ï–• –ú–û–î–£–õ–ï–ô
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã:
 * 1. ‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
 * 2. ‚úÖ –¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * 3. ‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
 */

const { runQuickTests } = require('./test-modules-quick');
const { testReactComponents } = require('./test-react-components');
const { TestRunner } = require('./test-modules-comprehensive');

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  bright: '\x1b[1m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  const startTime = Date.now();
  
  log('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ú–û–î–£–õ–ï–ô –ò–ì–†–´', 'bright');
  log('‚îÄ'.repeat(70), 'cyan');
  
  const results = {
    quick: { passed: 0, failed: 0 },
    react: { passed: 0, total: 0 },
    comprehensive: { passed: 0, failed: 0 }
  };

  // –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  log('\nüß™ –¢–ï–°–¢ 1: –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π', 'yellow');
  try {
    const quickResult = await runQuickTests();
    results.quick = quickResult;
    log(`‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${quickResult.passed}/${quickResult.passed + quickResult.failed}`, 'green');
  } catch (error) {
    log(`‚ùå –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'red');
    results.quick.failed = 1;
  }

  // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  log('\nüß™ –¢–ï–°–¢ 2: –¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', 'yellow');
  try {
    const reactResult = await testReactComponents();
    results.react = reactResult;
    log(`‚úÖ –¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: ${reactResult.passed}/${reactResult.total}`, 'green');
  } catch (error) {
    log(`‚ùå –¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'red');
    results.react.total = 1;
  }

  // –¢–µ—Å—Ç 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
  log('\nüß™ –¢–ï–°–¢ 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π', 'yellow');
  try {
    const runner = new TestRunner();
    await runner.runAll();
    results.comprehensive = {
      passed: runner.results.passed,
      failed: runner.results.failed
    };
    log(`‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${runner.results.passed}/${runner.results.total}`, 'green');
  } catch (error) {
    log(`‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'red');
    results.comprehensive.failed = 1;
  }

  // –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const duration = Date.now() - startTime;
  const totalPassed = results.quick.passed + results.react.passed + results.comprehensive.passed;
  const totalFailed = results.quick.failed + (results.react.total - results.react.passed) + results.comprehensive.failed;
  const totalTests = totalPassed + totalFailed;

  log('\n' + '‚îÄ'.repeat(70), 'cyan');
  log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–• –¢–ï–°–¢–û–í', 'bright');
  log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`, 'cyan');
  log('‚îÄ'.repeat(70), 'cyan');
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', 'cyan');
  log(`  üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: ${results.quick.passed}/${results.quick.passed + results.quick.failed}`, 
      results.quick.failed === 0 ? 'green' : 'red');
  log(`  ‚öõÔ∏è  React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${results.react.passed}/${results.react.total}`, 
      results.react.passed === results.react.total ? 'green' : 'yellow');
  log(`  üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç: ${results.comprehensive.passed}/${results.comprehensive.passed + results.comprehensive.failed}`, 
      results.comprehensive.failed === 0 ? 'green' : 'red');
  
  log('‚îÄ'.repeat(70), 'cyan');
  log(`‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${totalTests}`, 'bright');
  
  if (totalFailed === 0) {
    log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
    log('üöÄ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!', 'green');
  } else {
    log(`‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´: ${totalFailed}`, 'yellow');
    log('üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã', 'yellow');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'cyan');
  if (results.quick.failed > 0) {
    log('  üîå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ', 'yellow');
  }
  if (results.react.passed < results.react.total) {
    log('  ‚öõÔ∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Ö—É–∫–∏', 'yellow');
  }
  if (results.comprehensive.failed > 0) {
    log('  üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏', 'yellow');
  }
  if (totalFailed === 0) {
    log('  üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!', 'green');
  }

  return {
    totalPassed,
    totalFailed,
    totalTests,
    duration,
    details: results
  };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkTestDependencies() {
  log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'cyan');
  
  const requiredFiles = [
    './test-modules-quick.js',
    './test-react-components.js',
    './test-modules-comprehensive.js'
  ];

  let missingFiles = 0;
  requiredFiles.forEach(file => {
    if (require('fs').existsSync(file)) {
      log(`  ‚úÖ ${file}`, 'green');
    } else {
      log(`  ‚ùå ${file} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
      missingFiles++;
    }
  });

  if (missingFiles > 0) {
    log(`\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${missingFiles} —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤`, 'yellow');
    log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã', 'yellow');
    return false;
  }

  log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã', 'green');
  return true;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    log('üß™ –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢-–†–ê–ù–ù–ï–† –ú–û–î–£–õ–ï–ô –ò–ì–†–´', 'bright');
    log('‚îÄ'.repeat(70), 'cyan');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if (!checkTestDependencies()) {
      log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤', 'red');
      process.exit(1);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    const results = await runAllTests();
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    if (results.totalFailed === 0) {
      process.exit(0); // –£—Å–ø–µ—Ö
    } else {
      process.exit(1); // –ï—Å—Ç—å –æ—à–∏–±–∫–∏
    }
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { runAllTests, checkTestDependencies };

