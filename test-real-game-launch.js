#!/usr/bin/env node

const http = require('http');
const net = require('net');

console.log('üéÆ [REAL-GAME-TEST] Testing real game launch process...\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function testWebSocketConnection() {
  return new Promise((resolve) => {
    console.log('üîå [REAL-GAME-TEST] Testing WebSocket connection...');
    
    const client = net.createConnection(5000, 'localhost', () => {
      console.log('‚úÖ [REAL-GAME-TEST] WebSocket port is accessible');
      client.end();
      resolve(true);
    });

    client.on('error', (err) => {
      console.log('‚ùå [REAL-GAME-TEST] WebSocket connection failed:', err.message);
      resolve(false);
    });

    setTimeout(() => {
      client.destroy();
      resolve(false);
    }, 5000);
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
function checkRealGameRooms() {
  return new Promise((resolve) => {
    console.log('üè† [REAL-GAME-TEST] Checking rooms with real players...');
    
    const req = http.request({
      hostname: 'localhost',
      port: 5000,
      path: '/api/admin/rooms',
      method: 'GET',
      timeout: 10000
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          if (response.success && response.rooms && response.rooms.length > 0) {
            console.log(`‚úÖ [REAL-GAME-TEST] Found ${response.rooms.length} total rooms`);
            
            // –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ (–Ω–µ offline) –∏–≥—Ä–æ–∫–∞–º–∏
            const realPlayerRooms = response.rooms.filter(room => {
              if (room.players && room.players.length > 0) {
                const onlinePlayers = room.players.filter(p => !p.offline);
                return onlinePlayers.length >= 2;
              }
              return false;
            });
            
            if (realPlayerRooms.length > 0) {
              console.log(`üéÆ [REAL-GAME-TEST] Found ${realPlayerRooms.length} rooms with real players:`);
              realPlayerRooms.forEach((room, index) => {
                const onlinePlayers = room.players.filter(p => !p.offline);
                const readyPlayers = onlinePlayers.filter(p => p.ready);
                console.log(`   ${index + 1}. Room ${room.roomId}: ${onlinePlayers.length} online, ${readyPlayers.length} ready`);
                
                onlinePlayers.forEach(player => {
                  console.log(`      - ${player.username}: ready=${player.ready}, socketId=${player.socketId || 'none'}`);
                });
              });
              
              resolve({ success: true, rooms: realPlayerRooms });
            } else {
              console.log('‚ö†Ô∏è  [REAL-GAME-TEST] No rooms with real online players found');
              resolve({ success: true, rooms: [] });
            }
          } else {
            console.log('‚ùå [REAL-GAME-TEST] No rooms found');
            resolve({ success: false, rooms: [] });
          }
        } catch (e) {
          console.log('‚ùå [REAL-GAME-TEST] Cannot parse rooms data:', e.message);
          resolve({ success: false, rooms: [] });
        }
      });
    });

    req.on('error', () => {
      console.log('‚ùå [REAL-GAME-TEST] Cannot check rooms');
      resolve({ success: false, rooms: [] });
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function testGameStartAPI(roomId) {
  return new Promise((resolve) => {
    console.log(`üöÄ [REAL-GAME-TEST] Testing game start API for room: ${roomId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–Ω–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞
    const checkReq = http.request({
      hostname: 'localhost',
      port: 5000,
      path: `/api/admin/rooms/${roomId}`,
      method: 'GET',
      timeout: 5000
    }, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const roomData = JSON.parse(data);
          console.log(`‚úÖ [REAL-GAME-TEST] Room ${roomId} data:`, {
            status: roomData.status,
            players: roomData.currentPlayers,
            maxPlayers: roomData.maxPlayers
          });
          
          if (roomData.status === 'waiting' && roomData.currentPlayers >= 2) {
            console.log(`üéØ [REAL-GAME-TEST] Room ${roomId} is ready for game start`);
            resolve({ success: true, roomData });
          } else {
            console.log(`‚ùå [REAL-GAME-TEST] Room ${roomId} is not ready for game start`);
            resolve({ success: false, reason: 'Room not ready' });
          }
        } catch (e) {
          console.log('‚ùå [REAL-GAME-TEST] Cannot parse room data:', e.message);
          resolve({ success: false, reason: 'Parse error' });
        }
      });
    });

    checkReq.on('error', () => {
      console.log('‚ùå [REAL-GAME-TEST] Cannot check room');
      resolve({ success: false, reason: 'Connection error' });
    });

    checkReq.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
function testClientRoutes() {
  return new Promise((resolve) => {
    console.log('üß≠ [REAL-GAME-TEST] Testing client routes...');
    
    const routes = [
      { path: '/', description: 'Main page' },
      { path: '/rooms', description: 'Room selection' },
      { path: '/room/test123', description: 'Room setup' },
      { path: '/game/test123', description: 'Game board' }
    ];

    let passed = 0;
    let failed = 0;

    const testRoute = (route) => {
      return new Promise((routeResolve) => {
        const req = http.request({
          hostname: 'localhost',
          port: 3000,
          path: route.path,
          method: 'GET',
          timeout: 5000
        }, (res) => {
          if (res.statusCode === 200) {
            console.log(`‚úÖ [REAL-GAME-TEST] ${route.description}: OK`);
            routeResolve(true);
          } else {
            console.log(`‚ùå [REAL-GAME-TEST] ${route.description}: Status ${res.statusCode}`);
            routeResolve(false);
          }
        });

        req.on('error', () => {
          console.log(`‚ùå [REAL-GAME-TEST] ${route.description}: Connection error`);
          routeResolve(false);
        });

        req.end();
      });
    };

    Promise.all(routes.map(testRoute)).then(results => {
      passed = results.filter(r => r).length;
      failed = results.length - passed;
      
      console.log(`\nüìä [REAL-GAME-TEST] Client routes: ${passed}/${results.length} passed`);
      resolve({ passed, failed, total: results.length });
    });
  });
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéÆ [REAL-GAME-TEST] ==========================================');
  console.log('üéÆ [REAL-GAME-TEST] REAL GAME LAUNCH TEST');
  console.log('üéÆ [REAL-GAME-TEST] ==========================================\n');
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const wsResult = await testWebSocketConnection();
    
    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–Ω–∞—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    const roomsResult = await checkRealGameRooms();
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    const routesResult = await testClientRoutes();
    
    // –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä [REAL-GAME-TEST] Test Results Summary:');
    console.log(`   - WebSocket: ${wsResult ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Rooms: ${roomsResult.success ? '‚úÖ OK' : '‚ùå FAILED'}`);
    console.log(`   - Client Routes: ${routesResult.passed}/${routesResult.total} passed`);
    
    if (roomsResult.success && roomsResult.rooms.length > 0) {
      console.log(`\nüéØ [REAL-GAME-TEST] Testing game start for room: ${roomsResult.rooms[0].roomId}`);
      const gameStartResult = await testGameStartAPI(roomsResult.rooms[0].roomId);
      
      if (gameStartResult.success) {
        console.log('\nüéâ [REAL-GAME-TEST] ==========================================');
        console.log('üéâ [REAL-GAME-TEST] GAME LAUNCH TEST PASSED!');
        console.log('üéâ [REAL-GAME-TEST] ==========================================');
        console.log('‚úÖ [REAL-GAME-TEST] All systems are operational');
        console.log('‚úÖ [REAL-GAME-TEST] Game launch should work correctly');
      } else {
        console.log('\n‚ùå [REAL-GAME-TEST] ==========================================');
        console.log('‚ùå [REAL-GAME-TEST] GAME LAUNCH TEST FAILED!');
        console.log('‚ùå [REAL-GAME-TEST] ==========================================');
        console.log(`‚ö†Ô∏è  [REAL-GAME-TEST] Reason: ${gameStartResult.reason}`);
      }
    } else {
      console.log('\n‚ö†Ô∏è  [REAL-GAME-TEST] No rooms with real players to test');
    }
    
  } catch (error) {
    console.log(`üí• [REAL-GAME-TEST] ERROR: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
main().catch(console.error);
