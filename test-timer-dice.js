#!/usr/bin/env node

/**
 * üé≤ –ê–í–¢–û–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Ö–æ–¥–æ–≤ –∏ —Ä–∞–Ω–¥–æ–º–∞ –∫—É–±–∏–∫–æ–≤
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –°–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫—É–±–∏–∫–∏
 * 2. –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞ (2 –º–∏–Ω—É—Ç—ã)
 * 3. –ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞
 * 4. –†–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤
 */

console.log('üé≤ [TEST] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ —Ç–∞–π–º–µ—Ä–∞ –∏ –∫—É–±–∏–∫–æ–≤...\n');

// –¢–µ—Å—Ç 1: –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏
console.log('üìã –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫—É–±–∏–∫–∏');
console.log('='.repeat(60));

const players = ['–ò–≥—Ä–æ–∫ 1', '–ò–≥—Ä–æ–∫ 2', '–ò–≥—Ä–æ–∫ 3', '–ò–≥—Ä–æ–∫ 4'];
const diceResults = {};

// –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
players.forEach(player => {
  const roll = Math.floor(Math.random() * 6) + 1;
  diceResults[player] = roll;
  console.log(`üéØ ${player}: –≤—ã–±—Ä–æ—Å–∏–ª ${roll}`);
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
const sortedPlayers = Object.entries(diceResults)
  .sort(([,a], [,b]) => b - a)
  .map(([player]) => player);

console.log('\nüèÜ –ü–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º:');
sortedPlayers.forEach((player, index) => {
  const result = diceResults[player];
  console.log(`${index + 1}. ${player} (${result})`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∏—á—å—é
const maxRoll = Math.max(...Object.values(diceResults));
const tiedPlayers = Object.entries(diceResults)
  .filter(([, roll]) => roll === maxRoll)
  .map(([player]) => player);

if (tiedPlayers.length > 1) {
  console.log(`\n‚öñÔ∏è –ù–∏—á—å—è! –ò–≥—Ä–æ–∫–∏ ${tiedPlayers.join(', ')} –±—Ä–æ—Å–∞—é—Ç –µ—â–µ —Ä–∞–∑...`);
  
  tiedPlayers.forEach(player => {
    const reRoll = Math.floor(Math.random() * 6) + 1;
    diceResults[`${player}_re`] = reRoll;
    console.log(`üéØ ${player} (–ø–æ–≤—Ç–æ—Ä): –≤—ã–±—Ä–æ—Å–∏–ª ${reRoll}`);
  });
  
  // –ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤
  const finalOrder = Object.entries(diceResults)
    .filter(([key]) => !key.includes('_re'))
    .sort(([,a], [,b]) => b - a)
    .map(([player]) => player);
    
  console.log('\nüèÜ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:');
  finalOrder.forEach((player, index) => {
    const result = diceResults[player];
    console.log(`${index + 1}. ${player} (${result})`);
  });
}

// –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —Ö–æ–¥–∞
console.log('\nüìã –¢–µ—Å—Ç 2: –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞ (2 –º–∏–Ω—É—Ç—ã)');
console.log('='.repeat(60));

const turnDuration = 120; // 2 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
let currentTime = turnDuration;

console.log(`‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞ —Ö–æ–¥: ${turnDuration} —Å–µ–∫—É–Ω–¥`);
console.log(`üë§ –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: ${sortedPlayers[0]}`);

// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const timerInterval = setInterval(() => {
  currentTime--;
  
  if (currentTime <= 0) {
    console.log(`\n‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É`);
    clearInterval(timerInterval);
  } else {
    const minutes = Math.floor(currentTime / 60);
    const seconds = currentTime % 60;
    const timeString = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    if (currentTime % 10 === 0 || currentTime <= 10) {
      console.log(`‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: ${timeString}`);
    }
  }
}, 1000);

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
setTimeout(() => {
  clearInterval(timerInterval);
  console.log('\n‚èπÔ∏è –¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏');
}, 5000);

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤
console.log('\nüìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏ –∫—É–±–∏–∫–æ–≤');
console.log('='.repeat(60));

const rolls = [];
const numRolls = 100;

console.log(`üé≤ –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ ${numRolls} —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç–∏...`);

for (let i = 0; i < numRolls; i++) {
  rolls.push(Math.floor(Math.random() * 6) + 1);
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = {};
for (let i = 1; i <= 6; i++) {
  stats[i] = rolls.filter(roll => roll === i).length;
}

console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ—Å–∫–æ–≤:');
Object.entries(stats).forEach(([value, count]) => {
  const percentage = ((count / numRolls) * 100).toFixed(1);
  const bar = '‚ñà'.repeat(Math.floor(count / 5));
  console.log(`${value}: ${count.toString().padStart(3)} (${percentage}%) ${bar}`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 16.67% –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
const expectedPercentage = 100 / 6;
const isFair = Object.values(stats).every(count => {
  const percentage = (count / numRolls) * 100;
  return Math.abs(percentage - expectedPercentage) < 10; // –î–æ–ø—É—Å–∫ 10%
});

console.log(`\n‚úÖ –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${isFair ? '–•–û–†–û–®–ê–Ø' : '–¢–†–ï–ë–£–ï–¢ –ü–†–û–í–ï–†–ö–ò'}`);
console.log(`üìà –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: ${expectedPercentage.toFixed(1)}%`);

// –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
console.log('\nüìã –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞');
console.log('='.repeat(60));

let currentPlayerIndex = 0;
let round = 1;

const simulateGameRound = () => {
  const currentPlayer = sortedPlayers[currentPlayerIndex];
  console.log(`\nüîÑ –†–∞—É–Ω–¥ ${round}, —Ö–æ–¥ ${currentPlayerIndex + 1}/${sortedPlayers.length}`);
  console.log(`üë§ –ò–≥—Ä–æ–∫: ${currentPlayer}`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞
  const actions = ['–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫', '–ö—É–ø–∏—Ç—å –∞–∫—Ç–∏–≤', '–ü—Ä–æ–¥–∞—Ç—å –∞–∫—Ç–∏–≤', '–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç', '–ü–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞'];
  const randomAction = actions[Math.floor(Math.random() * actions.length)];
  
  console.log(`üéØ –î–µ–π—Å—Ç–≤–∏–µ: ${randomAction}`);
  
  if (randomAction === '–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫') {
    const diceRoll = Math.floor(Math.random() * 6) + 1;
    console.log(`üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${diceRoll}`);
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
  currentPlayerIndex = (currentPlayerIndex + 1) % sortedPlayers.length;
  
  if (currentPlayerIndex === 0) {
    round++;
  }
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
  if (round <= 3) {
    setTimeout(simulateGameRound, 1000);
  } else {
    console.log('\nüèÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –¢–∞–π–º–µ—Ä —Ö–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('‚úÖ –ö—É–±–∏–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à—É—é —Ä–∞–Ω–¥–æ–º–Ω–æ—Å—Ç—å');
    console.log('‚úÖ –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    console.log('\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ —Ö–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫—É–±–∏–∫–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞)
setTimeout(simulateGameRound, 6000);

