#!/usr/bin/env node

/**
 * üß™ –ê–í–¢–û–¢–ï–°–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ myId –ø–æ username
 * 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ username –≤ localStorage
 * 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * 4. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö)
 * 5. –†–∞–±–æ—Ç—É —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è');
console.log('=' .repeat(70));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useSocketEvents.js
function checkPlayerSyncFixes() {
  const filePath = 'client/src/hooks/useSocketEvents.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useSocketEvents.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ myId –ø–æ username –∏–∑ localStorage',
      pattern: /const savedUsername = localStorage\.getItem\('cashflow_username'\)/,
      found: false
    },
    {
      name: '–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–∞ –ø–æ username',
      pattern: /currentPlayer = playersList\.find\(p => p\.username === savedUsername\)/,
      found: false
    },
    {
      name: 'Fallback –Ω–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞',
      pattern: /if \(!myId && playersList\.length > 0\)/,
      found: false
    },
    {
      name: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ username –≤ localStorage',
      pattern: /localStorage\.setItem\('cashflow_username', currentPlayer\.username\)/,
      found: false
    },
    {
      name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ turnTimerUpdate',
      pattern: /const handleTurnTimerUpdate = useCallback/,
      found: false
    },
    {
      name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è turnTimerUpdate',
      pattern: /registerEventHandler\('turnTimerUpdate', handleTurnTimerUpdate\)/,
      found: false
    },
    {
      name: '–£–±—Ä–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ isMyTurn = true',
      pattern: /–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMyTurn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/,
      found: false,
      shouldBeFalse: true
    }
  ];

  checks.forEach(check => {
    if (check.shouldBeFalse) {
      check.found = !check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    } else {
      check.found = check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    }
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ GameControls.js
function checkGameControlsPlayerSync() {
  const filePath = 'client/src/components/GameControls.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª GameControls.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–£–±—Ä–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏',
      pattern: /–¢–µ—Å—Ç –ò–≥—Ä–æ–∫ 1|–¢–µ—Å—Ç –ò–≥—Ä–æ–∫ 2/,
      found: false,
      shouldBeFalse: true
    },
    {
      name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
      pattern: /const realPlayers = players && Array\.isArray\(players\) \? players : \[\]/,
      found: false
    },
    {
      name: '–£–±—Ä–∞–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      pattern: /üêõ DEBUG: players=/,
      found: false,
      shouldBeFalse: true
    },
    {
      name: '–ü–µ—Ä–µ–¥–∞—á–∞ diceValue –≤ NextPlayerButton',
      pattern: /diceValue={diceValue}/,
      found: false
    }
  ];

  checks.forEach(check => {
    if (check.shouldBeFalse) {
      check.found = !check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    } else {
      check.found = check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    }
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useGameLogic.js
function checkGameLogicPlayerSync() {
  const filePath = 'client/src/hooks/useGameLogic.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useGameLogic.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–£–±—Ä–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ isMyTurn = true',
      pattern: /–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMyTurn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/,
      found: false,
      shouldBeFalse: true
    },
    {
      name: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ–¥–∞',
      pattern: /const isMyTurn = gameState\.currentTurn === gameState\.myId/,
      found: false
    },
    {
      name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ myId –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π isMyTurn',
      pattern: /if \(gameState\.myId && gameState\.currentTurn\)/,
      found: false
    }
  ];

  checks.forEach(check => {
    if (check.shouldBeFalse) {
      check.found = !check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    } else {
      check.found = check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    }
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
function checkServer() {
  try {
    const result = execSync('ps aux | grep "node index.js" | grep -v grep', { encoding: 'utf8' });
    if (result.trim()) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return false;
  }
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTests() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useSocketEvents.js:');
  const socketEventsFixed = checkPlayerSyncFixes();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ GameControls.js:');
  const gameControlsFixed = checkGameControlsPlayerSync();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useGameLogic.js:');
  const gameLogicFixed = checkGameLogicPlayerSync();

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' .repeat(50));
  console.log(`useSocketEvents.js: ${socketEventsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`GameControls.js: ${gameControlsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`useGameLogic.js: ${gameLogicFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);

  if (socketEventsFixed && gameControlsFixed && gameLogicFixed) {
    console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–ò–ú–ï–ù–ï–ù–´!');
    console.log('\nüß™ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏:');
    console.log('   - [playersList] Found player by username: ...');
    console.log('   - [playersList] Final myId: ...');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:');
    console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–Ω–µ "–¢–µ—Å—Ç –ò–≥—Ä–æ–∫")');
    console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫');
    console.log('   - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫—É–±–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞');
  } else {
    console.log('\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  const serverRunning = checkServer();
  
  if (!serverRunning) {
    console.log('\n‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd server && node index.js');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();

