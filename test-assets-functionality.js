#!/usr/bin/env node

/**
 * üß™ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ê–ö–¢–ò–í–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—É–ø–∫—É –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –≤ –∏–≥—Ä–µ
 */

const io = require('socket.io-client');
const http = require('http');

console.log('üß™ [ASSETS-TEST] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤...\n');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:5000';
const SOCKET_URL = 'http://localhost:5000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testRoom = {
  displayName: '–¢–µ—Å—Ç –ê–∫—Ç–∏–≤–æ–≤',
  maxPlayers: 2
};

const testPlayer1 = {
  username: 'test_assets_1',
  email: 'test1@assets.com'
};

const testPlayer2 = {
  username: 'test_assets_2', 
  email: 'test2@assets.com'
};

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
const testCard = {
  name: '–¢–µ—Å—Ç–æ–≤—ã–µ –ê–∫—Ü–∏–∏',
  type: 'stock',
  symbol: 'TEST',
  cost: 1000,
  cashflow: 100,
  description: '–¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'
};

let currentRoomId = null;
let player1Socket = null;
let player2Socket = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
const checkAPI = async () => {
  console.log('üîç [ASSETS-TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...');
  
  try {
    const response = await new Promise((resolve, reject) => {
      const req = http.request(`${SERVER_URL}/api/admin/rooms`, {
        method: 'GET'
      }, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => resolve({ statusCode: res.statusCode, data }));
      });
      
      req.on('error', reject);
      req.setTimeout(5000, () => reject(new Error('API timeout')));
      req.end();
    });
    
    if (response.statusCode === 200) {
      console.log('‚úÖ [ASSETS-TEST] API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } else {
      console.log(`‚ùå [ASSETS-TEST] API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ API: ${error.message}`);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
const createRoom = async (socket) => {
  console.log('üè† [ASSETS-TEST] –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã...');
  
  return new Promise((resolve, reject) => {
    socket.emit('createRoom', testRoom.displayName, testRoom.maxPlayers, (success, roomId, error) => {
      if (success && roomId) {
        console.log(`‚úÖ [ASSETS-TEST] –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`);
        resolve(roomId);
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: ${error}`);
        reject(error);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
const joinRoom = async (socket, roomId) => {
  console.log(`üö™ [ASSETS-TEST] –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
  
  return new Promise((resolve, reject) => {
    socket.emit('joinRoom', roomId, (success, error) => {
      if (success) {
        console.log(`‚úÖ [ASSETS-TEST] –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ`);
        resolve();
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error}`);
        reject(error);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
const setReady = async (socket, roomId, readyState) => {
  console.log(`üéØ [ASSETS-TEST] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${readyState}`);
  
  return new Promise((resolve, reject) => {
    socket.emit('setReady', roomId, readyState, (success, error) => {
      if (success) {
        console.log(`‚úÖ [ASSETS-TEST] –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${readyState}`);
        resolve();
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ${error}`);
        reject(error);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
const startGame = async (socket, roomId) => {
  console.log(`üéÆ [ASSETS-TEST] –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ: ${roomId}`);
  
  return new Promise((resolve, reject) => {
    socket.emit('startGame', roomId, (success, error) => {
      if (success) {
        console.log(`‚úÖ [ASSETS-TEST] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: ${error}`);
        reject(error);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–∞
const buyAsset = async (socket, roomId, card) => {
  console.log(`üí∞ [ASSETS-TEST] –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∞: ${card.name}`);
  
  return new Promise((resolve, reject) => {
    socket.emit('buyDeal', roomId, card, (success, error) => {
      if (success) {
        console.log(`‚úÖ [ASSETS-TEST] –ê–∫—Ç–∏–≤ –∫—É–ø–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ç–∏–≤–∞: ${error}`);
        reject(error);
      }
    });
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞
const checkPlayerAssets = async (socket, roomId) => {
  console.log(`üîç [ASSETS-TEST] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏–≥—Ä–æ–∫–∞...`);
  
  return new Promise((resolve, reject) => {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
    socket.emit('getPlayerInfo', roomId, (success, playerData, error) => {
      if (success && playerData) {
        console.log(`‚úÖ [ASSETS-TEST] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, {
          username: playerData.username,
          balance: playerData.balance,
          assetsCount: playerData.assets?.length || 0,
          assets: playerData.assets
        });
        resolve(playerData);
      } else {
        console.log(`‚ùå [ASSETS-TEST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞: ${error}`);
        reject(error);
      }
    });
  });
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
const runAssetsTest = async () => {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    const apiAvailable = await checkAPI();
    if (!apiAvailable) {
      throw new Error('API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
    
    // 2. –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    console.log('\nüîå [ASSETS-TEST] –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∫–µ—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤...');
    
    player1Socket = io(SOCKET_URL);
    player2Socket = io(SOCKET_URL);
    
    // 3. –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await Promise.all([
      new Promise(resolve => player1Socket.on('connect', resolve)),
      new Promise(resolve => player2Socket.on('connect', resolve))
    ]);
    
    console.log('‚úÖ [ASSETS-TEST] –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
    
    // 4. –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    currentRoomId = await createRoom(player1Socket);
    
    // 5. –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    await joinRoom(player2Socket, currentRoomId);
    
    // 6. –û–±–∞ –∏–≥—Ä–æ–∫–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    await Promise.all([
      setReady(player1Socket, currentRoomId, true),
      setReady(player2Socket, currentRoomId, true)
    ]);
    
    // 7. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await wait(1000);
    
    // 8. –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    await startGame(player1Socket, currentRoomId);
    
    // 9. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    await wait(2000);
    
    // 10. –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–∫—É–ø–∞–µ—Ç –∞–∫—Ç–∏–≤
    await buyAsset(player1Socket, currentRoomId, testCard);
    
    // 11. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
    await wait(1000);
    
    // 12. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤—ã –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const player1Data = await checkPlayerAssets(player1Socket, currentRoomId);
    
    // 13. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (player1Data.assets && player1Data.assets.length > 0) {
      console.log('\nüéâ [ASSETS-TEST] –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
      console.log(`‚úÖ –ê–∫—Ç–∏–≤—ã –∏–≥—Ä–æ–∫–∞: ${player1Data.assets.length}`);
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞: $${player1Data.balance}`);
      console.log(`‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤—ã:`, player1Data.assets);
    } else {
      console.log('\n‚ùå [ASSETS-TEST] –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!');
      console.log(`‚ùå –ê–∫—Ç–∏–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —É –∏–≥—Ä–æ–∫–∞`);
      console.log(`‚ùå –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞:`, player1Data);
    }
    
  } catch (error) {
    console.log(`\nüí• [ASSETS-TEST] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`);
    console.log(`‚ùå [ASSETS-TEST] –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω`);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    console.log('\nüßπ [ASSETS-TEST] –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
    
    if (player1Socket) {
      player1Socket.disconnect();
    }
    if (player2Socket) {
      player2Socket.disconnect();
    }
    
    console.log('‚úÖ [ASSETS-TEST] –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runAssetsTest();
