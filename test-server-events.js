#!/usr/bin/env node

const io = require('socket.io-client');

console.log('üîç [SERVER-EVENTS-TEST] Testing server event support...');

const socket = io('http://localhost:5000');

let testStep = 0;

function logStep(message, data = null) {
  testStep++;
  console.log(`\nüìã [STEP ${testStep}] ${message}`);
  if (data) {
    console.log('üìä Data:', JSON.stringify(data, null, 2));
  }
}

socket.on('connect', () => {
  logStep('‚úÖ Connected to server');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
  logStep('üè† Testing basic events...');
  
  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  socket.emit('getRoomsList');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
  const testRoomId = `test_events_${Date.now()}`;
  logStep(`Creating test room: ${testRoomId}`);
  socket.emit('createRoom', testRoomId, 2, null, 10, 'Test Events Room');
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
  setTimeout(() => {
    logStep(`Joining test room: ${testRoomId}`);
    socket.emit('joinRoom', testRoomId);
  }, 2000);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  setTimeout(() => {
    logStep('Setting ready state...');
    socket.emit('setReady', testRoomId, true);
  }, 4000);
  
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
  setTimeout(() => {
    logStep('Attempting to start game...');
    socket.emit('startGame', testRoomId);
  }, 6000);
});

// –°–ª—É—à–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
socket.on('roomsList', (data) => {
  logStep('‚úÖ Received roomsList event', { count: data.length });
});

socket.on('roomCreated', (data) => {
  logStep('‚úÖ Received roomCreated event', data);
});

socket.on('roomCreationError', (error) => {
  logStep('‚ùå Received roomCreationError event', { error });
});

socket.on('roomJoined', (data) => {
  logStep('‚úÖ Received roomJoined event', data);
});

socket.on('roomJoinError', (error) => {
  logStep('‚ùå Received roomJoinError event', { error });
});

socket.on('readyStateUpdated', (data) => {
  logStep('‚úÖ Received readyStateUpdated event', data);
});

socket.on('gameStarted', (data) => {
  logStep('‚úÖ Received gameStarted event', data);
});

socket.on('roomData', (data) => {
  logStep('‚úÖ Received roomData event', data);
});

socket.on('playersList', (data) => {
  logStep('‚úÖ Received playersList event', { count: data.length });
});

socket.on('turnChanged', (data) => {
  logStep('‚úÖ Received turnChanged event', data);
});

socket.on('timerUpdate', (data) => {
  logStep('‚úÖ Received timerUpdate event', data);
});

socket.on('disconnect', () => {
  logStep('‚ùå Disconnected from server');
});

socket.on('connect_error', (error) => {
  logStep('‚ùå Connection error', { error: error.message });
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
setTimeout(() => {
  logStep('‚è∞ Test timeout reached');
  socket.disconnect();
  process.exit(0);
}, 15000);
