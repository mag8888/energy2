#!/usr/bin/env node

/**
 * üß™ –¢–ï–°–¢ REACT –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ò–ì–†–´
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. ‚úÖ GameField –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * 2. ‚úÖ GameControls –∫–æ–º–ø–æ–Ω–µ–Ω—Ç  
 * 3. ‚úÖ GameBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * 4. ‚úÖ useSocketEvents —Ö—É–∫
 * 5. ‚úÖ useGameState —Ö—É–∫
 * 6. ‚úÖ useGameLogic —Ö—É–∫
 */

const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CLIENT_SRC = './client/src';
const COMPONENTS_DIR = `${CLIENT_SRC}/components`;
const HOOKS_DIR = `${CLIENT_SRC}/hooks`;

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
function checkFileExists(filePath, description) {
  if (fs.existsSync(filePath)) {
    log(`‚úÖ ${description}: ${filePath}`, 'green');
    return true;
  } else {
    log(`‚ùå ${description}: ${filePath} - –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù`, 'red');
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
function checkFileContent(filePath, checks) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let passed = 0;
    let total = checks.length;

    log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${filePath}`, 'cyan');

    checks.forEach((check, index) => {
      if (check.test(content)) {
        log(`  ‚úÖ ${check.description}`, 'green');
        passed++;
      } else {
        log(`  ‚ùå ${check.description}`, 'red');
      }
    });

    log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`, passed === total ? 'green' : 'yellow');
    return { passed, total };
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`, 'red');
    return { passed: 0, total: 0 };
  }
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
async function testReactComponents() {
  log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê REACT –ö–û–ú–ü–û–ù–ï–ù–¢–û–í', 'cyan');
  log('‚îÄ'.repeat(60), 'cyan');

  let totalPassed = 0;
  let totalChecks = 0;

  // –¢–µ—Å—Ç 1: GameField –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  log('\nüß™ –¢–µ—Å—Ç 1: GameField –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', 'yellow');
  const gameFieldPath = `${COMPONENTS_DIR}/GameField.js`;
  if (checkFileExists(gameFieldPath, 'GameField –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')) {
    const gameFieldChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: 'useState —Ö—É–∫',
        test: (content) => content.includes('useState')
      },
      {
        description: 'useEffect —Ö—É–∫',
        test: (content) => content.includes('useEffect')
      },
      {
        description: 'useMemo —Ö—É–∫',
        test: (content) => content.includes('useMemo')
      },
      {
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–∫–æ–≤',
        test: (content) => content.includes('players') && content.includes('forEach')
      },
      {
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined',
        test: (content) => content.includes('Array.isArray') || content.includes('players &&')
      },
      {
        description: '–†–µ–Ω–¥–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è',
        test: (content) => content.includes('return') && content.includes('Box')
      }
    ];

    const result = checkFileContent(gameFieldPath, gameFieldChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 2: GameControls –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  log('\nüß™ –¢–µ—Å—Ç 2: GameControls –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', 'yellow');
  const gameControlsPath = `${COMPONENTS_DIR}/GameControls.js`;
  if (checkFileExists(gameControlsPath, 'GameControls –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')) {
    const gameControlsChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: '–ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞',
        test: (content) => content.includes('isMyTurn') && content.includes('currentTurn')
      },
      {
        description: '–¢–∞–π–º–µ—Ä',
        test: (content) => content.includes('turnTimer') || content.includes('timer')
      },
      {
        description: '–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤',
        test: (content) => content.includes('players') && content.includes('map')
      },
      {
        description: '–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        test: (content) => content.includes('Button') || content.includes('onClick')
      }
    ];

    const result = checkFileContent(gameControlsPath, gameControlsChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 3: GameBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  log('\nüß™ –¢–µ—Å—Ç 3: GameBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', 'yellow');
  const gameBoardPath = `${COMPONENTS_DIR}/GameBoardRefactored.js`;
  if (checkFileExists(gameBoardPath, 'GameBoard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç')) {
    const gameBoardChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: 'GameField –∫–æ–º–ø–æ–Ω–µ–Ω—Ç',
        test: (content) => content.includes('GameField')
      },
      {
        description: 'GameControls –∫–æ–º–ø–æ–Ω–µ–Ω—Ç',
        test: (content) => content.includes('GameControls')
      },
      {
        description: '–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–æ–ø—Å–æ–≤',
        test: (content) => content.includes('isMyTurn') && content.includes('players')
      },
      {
        description: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ roomId',
        test: (content) => content.includes('roomId') && content.includes('–ö–æ–º–Ω–∞—Ç–∞')
      }
    ];

    const result = checkFileContent(gameBoardPath, gameBoardChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 4: useSocketEvents —Ö—É–∫
  log('\nüß™ –¢–µ—Å—Ç 4: useSocketEvents —Ö—É–∫', 'yellow');
  const useSocketEventsPath = `${HOOKS_DIR}/useSocketEvents.js`;
  if (checkFileExists(useSocketEventsPath, 'useSocketEvents —Ö—É–∫')) {
    const useSocketEventsChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: 'useCallback —Ö—É–∫',
        test: (content) => content.includes('useCallback')
      },
      {
        description: 'useEffect —Ö—É–∫',
        test: (content) => content.includes('useEffect')
      },
      {
        description: 'Socket.IO —Å–æ–±—ã—Ç–∏—è',
        test: (content) => content.includes('socket.on') || content.includes('socket.emit')
      },
      {
        description: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ playersList',
        test: (content) => content.includes('handlePlayersList')
      },
      {
        description: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ turnTimerUpdate',
        test: (content) => content.includes('handleTurnTimerUpdate')
      },
      {
        description: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
        test: (content) => content.includes('...prev') || content.includes('...prevState')
      }
    ];

    const result = checkFileContent(useSocketEventsPath, useSocketEventsChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 5: useGameState —Ö—É–∫
  log('\nüß™ –¢–µ—Å—Ç 5: useGameState —Ö—É–∫', 'yellow');
  const useGameStatePath = `${HOOKS_DIR}/useGameState.js`;
  if (checkFileExists(useGameStatePath, 'useGameState —Ö—É–∫')) {
    const useGameStateChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: 'useState —Ö—É–∫',
        test: (content) => content.includes('useState')
      },
      {
        description: 'useCallback —Ö—É–∫',
        test: (content) => content.includes('useCallback')
      },
      {
        description: 'updateGameState —Ñ—É–Ω–∫—Ü–∏—è',
        test: (content) => content.includes('updateGameState')
      },
      {
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        test: (content) => content.includes('typeof updates === "function"')
      },
      {
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–∞ –∏–≥—Ä–æ–∫–æ–≤',
        test: (content) => content.includes('Array.isArray') || content.includes('players &&')
      }
    ];

    const result = checkFileContent(useGameStatePath, useGameStateChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 6: useGameLogic —Ö—É–∫
  log('\nüß™ –¢–µ—Å—Ç 6: useGameLogic —Ö—É–∫', 'yellow');
  const useGameLogicPath = `${HOOKS_DIR}/useGameLogic.js`;
  if (checkFileExists(useGameLogicPath, 'useGameLogic —Ö—É–∫')) {
    const useGameLogicChecks = [
      {
        description: '–ò–º–ø–æ—Ä—Ç React',
        test: (content) => content.includes('import React') || content.includes('from "react"')
      },
      {
        description: 'useEffect —Ö—É–∫',
        test: (content) => content.includes('useEffect')
      },
      {
        description: 'useCallback —Ö—É–∫',
        test: (content) => content.includes('useCallback')
      },
      {
        description: '–¢–∞–π–º–µ—Ä –∏–≥—Ä—ã',
        test: (content) => content.includes('turnTimer') || content.includes('timer')
      },
      {
        description: '–õ–æ–≥–∏–∫–∞ —Ö–æ–¥–∞',
        test: (content) => content.includes('isMyTurn') || content.includes('currentTurn')
      }
    ];

    const result = checkFileContent(useGameLogicPath, useGameLogicChecks);
    totalPassed += result.passed;
    totalChecks += result.total;
  }

  // –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
  log('\nüß™ –¢–µ—Å—Ç 7: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'yellow');
  const structureChecks = [
    {
      description: '–ü–∞–ø–∫–∞ components',
      test: () => fs.existsSync(COMPONENTS_DIR)
    },
    {
      description: '–ü–∞–ø–∫–∞ hooks',
      test: () => fs.existsSync(HOOKS_DIR)
    },
    {
      description: '–û—Å–Ω–æ–≤–Ω–æ–π App.js',
      test: () => fs.existsSync(`${CLIENT_SRC}/App.js`)
    },
    {
      description: 'Socket.js –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
      test: () => fs.existsSync(`${CLIENT_SRC}/socket.js`)
    },
    {
      description: 'WebSocket fix',
      test: () => fs.existsSync(`${CLIENT_SRC}/websocket-fix.js`)
    }
  ];

  structureChecks.forEach(check => {
    if (check.test()) {
      log(`  ‚úÖ ${check.description}`, 'green');
      totalPassed++;
    } else {
      log(`  ‚ùå ${check.description}`, 'red');
    }
    totalChecks++;
  });

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\n' + '‚îÄ'.repeat(60), 'cyan');
  log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê REACT –ö–û–ú–ü–û–ù–ï–ù–¢–û–í', 'cyan');
  log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`, 'green');
  log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalChecks - totalPassed}`, 'red');
  log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${totalPassed}/${totalChecks}`, 'cyan');
  
  if (totalPassed === totalChecks) {
    log('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!', 'green');
  } else {
    log('‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò', 'yellow');
  }

  return { passed: totalPassed, total: totalChecks };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π', 'cyan');
  
  const packageJsonPath = './package.json';
  if (fs.existsSync(packageJsonPath)) {
    try {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      log(`üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${packageJson.version || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`, 'cyan');
      
      if (packageJson.dependencies) {
        log('üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:', 'cyan');
        Object.keys(packageJson.dependencies).forEach(dep => {
          log(`  üìå ${dep}`, 'magenta');
        });
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: ${error.message}`, 'red');
    }
  } else {
    log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω', 'red');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REACT –ö–û–ú–ü–û–ù–ï–ù–¢–û–í –ò–ì–†–´', 'bright');
    log('‚îÄ'.repeat(60), 'cyan');
    
    checkDependencies();
    await testReactComponents();
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { testReactComponents, checkDependencies };

