const io = require('socket.io-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:5000';
const TEST_ROOM_ID = 'test-profession-system-' + Date.now();

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testPlayers = [
  { username: 'Player1', email: 'player1@test.com', displayId: 'P1' },
  { username: 'Player2', email: 'player2@test.com', displayId: 'P2' }
];

let sockets = [];
let roomId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testProfessionSystem() {
  console.log('üíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...\n');

  try {
    // 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    for (let i = 0; i < testPlayers.length; i++) {
      const socket = io(SERVER_URL);
      
      socket.on('connect', () => {
        console.log(`   ‚úÖ –ò–≥—Ä–æ–∫ ${i + 1} –ø–æ–¥–∫–ª—é—á–µ–Ω: ${socket.id}`);
      });
      
      socket.on('error', (error) => {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä–æ–∫–∞ ${i + 1}:`, error);
      });
      
      sockets.push(socket);
      await wait(100);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã...');
    const hostSocket = sockets[0];
    
    hostSocket.emit('createRoom', TEST_ROOM_ID, 4, '', 3, '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π');
    
    await new Promise((resolve) => {
      hostSocket.once('roomCreated', (room) => {
        roomId = room.roomId;
        console.log(`   ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId}`);
        resolve();
      });
    });

    // 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫–æ–º–Ω–∞—Ç–µ
    console.log('\n3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∫ –∫–æ–º–Ω–∞—Ç–µ...');
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      const player = testPlayers[i];
      
      socket.emit('joinRoom', roomId, {
        id: socket.id,
        username: player.username,
        email: player.email,
        displayId: player.displayId
      });
      
      await wait(100);
    }

    // 4. –ñ–¥–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n4Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤...');
    await wait(1000);

    // 5. –û—Ç–º–µ—á–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n5Ô∏è‚É£ –û—Ç–º–µ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤...');
    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      socket.emit('setReady', roomId, true);
      await wait(100);
    }

    // 6. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π (–¥–æ–ª–∂–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—å—Å—è)
    console.log('\n6Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...');
    let gameStartFailed = false;
    
    hostSocket.emit('startGame', roomId, (success, error) => {
      if (!success && error === 'NEED_PROFESSIONS') {
        gameStartFailed = true;
        console.log('   ‚úÖ –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å (–æ–∂–∏–¥–∞–µ–º–æ): –Ω–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é');
      } else if (success) {
        console.log('   ‚ùå –ò–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)');
      } else {
        console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      }
    });
    
    await wait(2000);
    
    if (!gameStartFailed) {
      console.log('   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–ø—É—Å–∫–∞ –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π');
    }

    // 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞–º
    console.log('\n7Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–≥—Ä–æ–∫–∞–º...');
    const testProfessions = [
      {
        id: 'engineer',
        name: '–ò–Ω–∂–µ–Ω–µ—Ä',
        salary: 5000,
        expenses: 2000,
        balance: 3000,
        passiveIncome: 0,
        description: '–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ö–æ—Ä–æ—à–µ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π'
      },
      {
        id: 'doctor',
        name: '–í—Ä–∞—á',
        salary: 8000,
        expenses: 3000,
        balance: 5000,
        passiveIncome: 0,
        description: '–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Å –±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏'
      }
    ];

    for (let i = 0; i < sockets.length; i++) {
      const socket = sockets[i];
      const profession = testProfessions[i];
      
      socket.emit('setPlayerProfession', roomId, socket.id, profession);
      console.log(`   üíº –ò–≥—Ä–æ–∫ ${i + 1} –ø–æ–ª—É—á–∏–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é: ${profession.name}`);
      
      await wait(500);
    }

    // 8. –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('\n8Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    await wait(1000);

    // 9. –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏
    console.log('\n9Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏...');
    let gameStartSuccess = false;
    
    hostSocket.emit('startGame', roomId, (success, error) => {
      if (success) {
        gameStartSuccess = true;
        console.log('   ‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏!');
      } else {
        console.log('   ‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å:', error);
      }
    });
    
    await wait(3000);

    // 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ—Å—å
    console.log('\nüîü –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏...');
    let orderDeterminationStarted = false;
    
    hostSocket.once('orderDeterminationStarted', (data) => {
      orderDeterminationStarted = true;
      console.log('   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ—Å—å:', {
        players: data.players.length,
        timer: data.timer,
        phase: data.phase
      });
    });
    
    await wait(2000);

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:');
    console.log(`   ‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: ${roomId ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ –ò–≥—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: ${sockets.length}/${testPlayers.length}`);
    console.log(`   ‚úÖ –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: ${gameStartFailed ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${testProfessions.length}/${testPlayers.length}`);
    console.log(`   ‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏: ${gameStartSuccess ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   ‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ –Ω–∞—á–∞–ª–æ—Å—å: ${orderDeterminationStarted ? '–î–∞' : '–ù–µ—Ç'}`);

    if (roomId && sockets.length === testPlayers.length && gameStartFailed && gameStartSuccess && orderDeterminationStarted) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!');
    }

  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
  } finally {
    // –û—á–∏—Å—Ç–∫–∞
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞...');
    for (const socket of sockets) {
      if (socket.connected) {
        socket.disconnect();
      }
    }
    
    // –í—ã—Ö–æ–¥
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...');
testProfessionSystem();
