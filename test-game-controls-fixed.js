#!/usr/bin/env node

/**
 * üß™ –ê–í–¢–û–¢–ï–°–¢: GameControls - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
 * 1. –ö–Ω–æ–ø–∫–∞ "–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö" –∫–æ–≥–¥–∞ diceValue = 0
 * 2. –ö–Ω–æ–ø–∫–∞ "–ü–ï–†–ï–•–û–î –•–û–î–ê" –ø–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
 * 3. –ö–Ω–æ–ø–∫–∞ "–û–ñ–ò–î–ê–ù–ò–ï" –∫–æ–≥–¥–∞ –Ω–µ –º–æ–π —Ö–æ–¥
 * 4. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞
 * 5. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞: GameControls - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫');
console.log('=' .repeat(60));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
function checkServer() {
  try {
    const result = execSync('ps aux | grep "node index.js" | grep -v grep', { encoding: 'utf8' });
    if (result.trim()) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return false;
  }
  return false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω
function checkClient() {
  try {
    const result = execSync('ps aux | grep "react-scripts" | grep -v grep', { encoding: 'utf8' });
    if (result.trim()) {
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω');
      return true;
    }
  } catch (error) {
    console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    return false;
  }
  return false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ GameControls.js
function checkGameControlsFixes() {
  const filePath = 'client/src/components/GameControls.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª GameControls.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–ö–Ω–æ–ø–∫–∞ "–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö" –¥–ª—è diceValue = 0',
      pattern: /if \(diceValue === 0\) return '–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö'/,
      found: false
    },
    {
      name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∫—É–±–∏–∫–∞',
      pattern: /if \(diceValue === 0 && onRollDice\)/,
      found: false
    },
    {
      name: '–ü–µ—Ä–µ–¥–∞—á–∞ diceValue –≤ NextPlayerButton',
      pattern: /diceValue={diceValue}/,
      found: false
    },
    {
      name: '–ü–µ—Ä–µ–¥–∞—á–∞ onRollDice –≤ NextPlayerButton',
      pattern: /onRollDice={onRollDice}/,
      found: false
    },
    {
      name: '–ü–µ—Ä–µ–¥–∞—á–∞ isRolling –≤ NextPlayerButton',
      pattern: /isRolling={isRolling}/,
      found: false
    }
  ];

  checks.forEach(check => {
    check.found = check.pattern.test(content);
    console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useSocketEvents.js
function checkSocketEventsFixes() {
  const filePath = 'client/src/hooks/useSocketEvents.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useSocketEvents.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–û–±—Ä–∞–±–æ—Ç—á–∏–∫ turnTimerUpdate',
      pattern: /const handleTurnTimerUpdate = useCallback/,
      found: false
    },
    {
      name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è turnTimerUpdate',
      pattern: /registerEventHandler\('turnTimerUpdate', handleTurnTimerUpdate\)/,
      found: false
    },
    {
      name: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ username –≤ localStorage',
      pattern: /localStorage\.setItem\('cashflow_username'/,
      found: false
    },
    {
      name: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ myId –ø–æ username',
      pattern: /const savedUsername = localStorage\.getItem\('cashflow_username'\)/,
      found: false
    }
  ];

  checks.forEach(check => {
    check.found = check.pattern.test(content);
    console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });

  return checks.every(check => check.found);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ useGameLogic.js
function checkGameLogicFixes() {
  const filePath = 'client/src/hooks/useGameLogic.js';
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª useGameLogic.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const content = fs.readFileSync(filePath, 'utf8');
  
  const checks = [
    {
      name: '–£–±—Ä–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ isMyTurn = true',
      pattern: /–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isMyTurn –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/,
      found: false,
      shouldBeFalse: true
    },
    {
      name: '–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–æ–¥–∞',
      pattern: /const isMyTurn = gameState\.currentTurn === gameState\.myId/,
      found: false
    }
  ];

  checks.forEach(check => {
    if (check.shouldBeFalse) {
      check.found = !check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    } else {
      check.found = check.pattern.test(content);
      console.log(`${check.found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    }
  });

  return checks.every(check => check.found);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function runTests() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  const serverRunning = checkServer();
  const clientRunning = checkClient();
  
  if (!serverRunning || !clientRunning) {
    console.log('\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
    console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ:');
    console.log('   cd server && node index.js');
    console.log('   cd client && npm start');
    return;
  }

  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ GameControls.js:');
  const gameControlsFixed = checkGameControlsFixes();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useSocketEvents.js:');
  const socketEventsFixed = checkSocketEventsFixes();
  
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ useGameLogic.js:');
  const gameLogicFixed = checkGameLogicFixes();

  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' .repeat(40));
  console.log(`GameControls.js: ${gameControlsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`useSocketEvents.js: ${socketEventsFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);
  console.log(`useGameLogic.js: ${gameLogicFixed ? '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù' : '‚ùå –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù'}`);

  if (gameControlsFixed && socketEventsFixed && gameLogicFixed) {
    console.log('\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('\nüß™ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ (F5)');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–Ω–µ "–¢–µ—Å—Ç –ò–≥—Ä–æ–∫")');
    console.log('   - –ò–¥–µ—Ç –ª–∏ —Ç–∞–π–º–µ—Ä –≤–Ω–∏–∑ –æ—Ç 2:00');
    console.log('   - –ö–Ω–æ–ø–∫–∞ "–ë–†–û–°–ò–¢–¨ –ö–£–ë–ò–ö" –∞–∫—Ç–∏–≤–Ω–∞ –∫–æ–≥–¥–∞ –≤–∞—à —Ö–æ–¥');
    console.log('   - –ü–æ—Å–ª–µ –±—Ä–æ—Å–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–ü–ï–†–ï–•–û–î –•–û–î–ê"');
    console.log('   - –ö—É–±–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–∞ 1-6');
  } else {
    console.log('\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ü–†–ò–ú–ï–ù–ï–ù–´');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();

