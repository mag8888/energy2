#!/usr/bin/env node

const io = require('socket.io-client');

console.log('üîç [CLIENT-DETAILED-TEST] Detailed client testing...');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
const socket = io('http://localhost:5000');

let testStep = 0;

function logStep(message, data = null) {
  testStep++;
  console.log(`\nüìã [STEP ${testStep}] ${message}`);
  if (data) {
    console.log('üìä Data:', JSON.stringify(data, null, 2));
  }
}

socket.on('connect', () => {
  logStep('‚úÖ Connected to server');
  
  // –®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
  logStep('üè† Requesting rooms list...');
  socket.emit('getRoomsList');
});

socket.on('roomsList', (roomsList) => {
  logStep('üè† Received rooms list from server', {
    totalRooms: roomsList.length,
    firstRoom: roomsList[0],
    secondRoom: roomsList[1],
    lastRoom: roomsList[roomsList.length - 1]
  });
  
  // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
  if (roomsList.length > 0) {
    const room = roomsList[0];
    logStep('üîç Analyzing first room structure', {
      roomId: room.roomId,
      displayName: room.displayName,
      currentPlayers: room.currentPlayers,
      hasCurrentPlayers: room.hasOwnProperty('currentPlayers'),
      currentPlayersType: typeof room.currentPlayers,
      isArray: Array.isArray(room.currentPlayers),
      playersCount: Array.isArray(room.currentPlayers) ? room.currentPlayers.length : 'N/A',
      maxPlayers: room.maxPlayers,
      status: room.status
    });
    
    // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
    if (Array.isArray(room.currentPlayers) && room.currentPlayers.length > 0) {
      const player = room.currentPlayers[0];
      logStep('üë§ Analyzing first player', {
        playerId: player.id,
        username: player.username,
        ready: player.ready,
        offline: player.offline,
        hasUsername: player.hasOwnProperty('username'),
        usernameType: typeof player.username
      });
    }
  }
  
  // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  const validRooms = roomsList.filter(room => {
    return room && 
           room.roomId && 
           room.displayName && 
           Array.isArray(room.currentPlayers);
  });
  
  logStep('‚úÖ Validation results', {
    totalRooms: roomsList.length,
    validRooms: validRooms.length,
    invalidRooms: roomsList.length - validRooms.length,
    validationSuccess: validRooms.length === roomsList.length
  });
  
  // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  const invalidRooms = roomsList.filter(room => {
    return !room || 
           !room.roomId || 
           !room.displayName || 
           !Array.isArray(room.currentPlayers);
  });
  
  if (invalidRooms.length > 0) {
    logStep('‚ùå Found invalid rooms', {
      count: invalidRooms.length,
      examples: invalidRooms.slice(0, 3)
    });
  }
  
  logStep('üéØ Test completed successfully');
});

socket.on('disconnect', () => {
  logStep('‚ùå Disconnected from server');
});

socket.on('connect_error', (error) => {
  logStep('‚ùå Connection error', { error: error.message });
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
setTimeout(() => {
  logStep('‚è∞ Test timeout reached');
  socket.disconnect();
  process.exit(0);
}, 10000);
